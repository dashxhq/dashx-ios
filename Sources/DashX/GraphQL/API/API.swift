// This file was auto-generated using maticzav/swift-graphql. DO NOT EDIT MANUALLY!
import Foundation
import GraphQL
import SwiftGraphQL

// MARK: - Operations
enum Operations {}
extension Objects.Query: GraphQLHttpOperation {
  public static var operation: GraphQLOperationKind { .query }
}
extension Objects.Mutation: GraphQLHttpOperation {
  public static var operation: GraphQLOperationKind { .mutation }
}

// MARK: - Objects
enum Objects {}
extension Objects {
  struct Account {}
}

extension Fields where TypeLock == Objects.Account {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func environmentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "environmentId",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func email() throws -> String? {
    let field = GraphQLField.leaf(
      field: "email",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func phone() throws -> String? {
    let field = GraphQLField.leaf(
      field: "phone",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func fullName() throws -> String? {
    let field = GraphQLField.leaf(
      field: "fullName",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func name() throws -> String? {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func firstName() throws -> String? {
    let field = GraphQLField.leaf(
      field: "firstName",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func lastName() throws -> String? {
    let field = GraphQLField.leaf(
      field: "lastName",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func avatar() throws -> String? {
    let field = GraphQLField.leaf(
      field: "avatar",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func gender() throws -> Enums.AccountGender? {
    let field = GraphQLField.leaf(
      field: "gender",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.AccountGender?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func dateOfBirth() throws -> DateScalar? {
    let field = GraphQLField.leaf(
      field: "dateOfBirth",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func timeZone() throws -> String? {
    let field = GraphQLField.leaf(
      field: "timeZone",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func uid() throws -> String? {
    let field = GraphQLField.leaf(
      field: "uid",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func anonymousUid() throws -> String? {
    let field = GraphQLField.leaf(
      field: "anonymousUid",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func hasApiAccess() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "hasApiAccess",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func hasGuiAccess() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "hasGuiAccess",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func custom() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "custom",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func status() throws -> Enums.AccountStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.AccountStatus(from: $0) }
    case .selecting:
      return Enums.AccountStatus.mockValue
    }
  }

  func invitationToken() throws -> String? {
    let field = GraphQLField.leaf(
      field: "invitationToken",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func unconfirmedEmail() throws -> String? {
    let field = GraphQLField.leaf(
      field: "unconfirmedEmail",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func confirmationDigest() throws -> String? {
    let field = GraphQLField.leaf(
      field: "confirmationDigest",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func confirmationExpiresAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "confirmationExpiresAt",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func regularAccountId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "regularAccountId",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func scope() throws -> String {
    let field = GraphQLField.leaf(
      field: "scope",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func kind() throws -> Enums.AccountKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "Account",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.AccountKind(from: $0) }
    case .selecting:
      return Enums.AccountKind.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Account<T> = Selection<T, Objects.Account>
}
extension Objects {
  struct AggregateResponse {}
}

extension Fields where TypeLock == Objects.AggregateResponse {

  func count() throws -> Int? {
    let field = GraphQLField.leaf(
      field: "count",
      parent: "AggregateResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int?(from: $0) }
    case .selecting:
      return nil
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias AggregateResponse<T> = Selection<T, Objects.AggregateResponse>
}
extension Objects {
  struct App {}
}

extension Fields where TypeLock == Objects.App {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "App",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "App",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "App",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "App",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func summary() throws -> String? {
    let field = GraphQLField.leaf(
      field: "summary",
      parent: "App",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func fields() throws -> [JSONScalar] {
    let field = GraphQLField.leaf(
      field: "fields",
      parent: "App",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func isInstallable() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isInstallable",
      parent: "App",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "App",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "App",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func kind() throws -> Enums.AppKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "App",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.AppKind(from: $0) }
    case .selecting:
      return Enums.AppKind.mockValue
    }
  }

  func appCategoryId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "appCategoryId",
      parent: "App",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func appCategory<T>(selection: Selection<T, Objects.AppCategory?>) throws -> T {
    let field = GraphQLField.composite(
      field: "appCategory",
      parent: "App",
      type: "AppCategory",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias App<T> = Selection<T, Objects.App>
}
extension Objects {
  struct AppCategory {}
}

extension Fields where TypeLock == Objects.AppCategory {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "AppCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "AppCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func description() throws -> String? {
    let field = GraphQLField.leaf(
      field: "description",
      parent: "AppCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "AppCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "AppCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "AppCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias AppCategory<T> = Selection<T, Objects.AppCategory>
}
extension Objects {
  struct Asset {}
}

extension Fields where TypeLock == Objects.Asset {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Asset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Asset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func resourceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "resourceId",
      parent: "Asset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func attributeId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "attributeId",
      parent: "Asset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func storageProviderId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "storageProviderId",
      parent: "Asset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func uploaderId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "uploaderId",
      parent: "Asset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func data() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "data",
      parent: "Asset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func uploadStatus() throws -> Enums.AssetUploadStatus {
    let field = GraphQLField.leaf(
      field: "uploadStatus",
      parent: "Asset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.AssetUploadStatus(from: $0) }
    case .selecting:
      return Enums.AssetUploadStatus.mockValue
    }
  }

  func processingStatus() throws -> Enums.AssetProcessingStatus {
    let field = GraphQLField.leaf(
      field: "processingStatus",
      parent: "Asset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.AssetProcessingStatus(from: $0) }
    case .selecting:
      return Enums.AssetProcessingStatus.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Asset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Asset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Asset<T> = Selection<T, Objects.Asset>
}
extension Objects {
  struct Attribute {}
}

extension Fields where TypeLock == Objects.Attribute {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func resourceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "resourceId",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func fieldType() throws -> String {
    let field = GraphQLField.leaf(
      field: "fieldType",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func isNullable() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isNullable",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func isRepeatable() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isRepeatable",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func isTranslatable() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isTranslatable",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func isFilterable() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isFilterable",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func isOrderable() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isOrderable",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func isSearchable() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isSearchable",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func validations() throws -> [JSONScalar] {
    let field = GraphQLField.leaf(
      field: "validations",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func settings() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "settings",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func defaultValue() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "defaultValue",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func placeholder() throws -> String? {
    let field = GraphQLField.leaf(
      field: "placeholder",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func helpText() throws -> String? {
    let field = GraphQLField.leaf(
      field: "helpText",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func dataType() throws -> String {
    let field = GraphQLField.leaf(
      field: "dataType",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func dataFormat() throws -> String? {
    let field = GraphQLField.leaf(
      field: "dataFormat",
      parent: "Attribute",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func resource<T>(selection: Selection<T, Objects.Resource>) throws -> T {
    let field = GraphQLField.composite(
      field: "resource",
      parent: "Attribute",
      type: "Resource",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Attribute<T> = Selection<T, Objects.Attribute>
}
extension Objects {
  struct ChangeEmailResponse {}
}

extension Fields where TypeLock == Objects.ChangeEmailResponse {

  func success() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "success",
      parent: "ChangeEmailResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ChangeEmailResponse<T> = Selection<T, Objects.ChangeEmailResponse>
}
extension Objects {
  struct Configuration {}
}

extension Fields where TypeLock == Objects.Configuration {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Configuration",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func installationId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "installationId",
      parent: "Configuration",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func environmentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "environmentId",
      parent: "Configuration",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func digest() throws -> String {
    let field = GraphQLField.leaf(
      field: "digest",
      parent: "Configuration",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func settings() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "settings",
      parent: "Configuration",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Configuration",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Configuration",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func status() throws -> Enums.ConfigurationStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "Configuration",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ConfigurationStatus(from: $0) }
    case .selecting:
      return Enums.ConfigurationStatus.mockValue
    }
  }

  func statusMessage() throws -> String? {
    let field = GraphQLField.leaf(
      field: "statusMessage",
      parent: "Configuration",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func installation<T>(selection: Selection<T, Objects.Installation>) throws -> T {
    let field = GraphQLField.composite(
      field: "installation",
      parent: "Configuration",
      type: "Installation",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func environment<T>(selection: Selection<T, Objects.Environment>) throws -> T {
    let field = GraphQLField.composite(
      field: "environment",
      parent: "Configuration",
      type: "Environment",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Configuration<T> = Selection<T, Objects.Configuration>
}
extension Objects {
  struct Contact {}
}

extension Fields where TypeLock == Objects.Contact {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func accountId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "accountId",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func environmentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "environmentId",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func isAccountAnonymous() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isAccountAnonymous",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func name() throws -> String? {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func kind() throws -> Enums.ContactKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ContactKind(from: $0) }
    case .selecting:
      return Enums.ContactKind.mockValue
    }
  }

  func value() throws -> String {
    let field = GraphQLField.leaf(
      field: "value",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func unverifiedValue() throws -> String? {
    let field = GraphQLField.leaf(
      field: "unverifiedValue",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func verifiedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "verifiedAt",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func verificationDigest() throws -> String? {
    let field = GraphQLField.leaf(
      field: "verificationDigest",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func verificationExpiresAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "verificationExpiresAt",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func status() throws -> Enums.ContactStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ContactStatus(from: $0) }
    case .selecting:
      return Enums.ContactStatus.mockValue
    }
  }

  func userAgent() throws -> String? {
    let field = GraphQLField.leaf(
      field: "userAgent",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func osName() throws -> String? {
    let field = GraphQLField.leaf(
      field: "osName",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func osVersion() throws -> String? {
    let field = GraphQLField.leaf(
      field: "osVersion",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func deviceModel() throws -> String? {
    let field = GraphQLField.leaf(
      field: "deviceModel",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func deviceManufacturer() throws -> String? {
    let field = GraphQLField.leaf(
      field: "deviceManufacturer",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func deviceUid() throws -> String? {
    let field = GraphQLField.leaf(
      field: "deviceUid",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func deviceAdvertisingUid() throws -> String? {
    let field = GraphQLField.leaf(
      field: "deviceAdvertisingUid",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func isDeviceAdTrackingEnabled() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isDeviceAdTrackingEnabled",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func tag() throws -> String? {
    let field = GraphQLField.leaf(
      field: "tag",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func accountScope() throws -> String {
    let field = GraphQLField.leaf(
      field: "accountScope",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func accountKind() throws -> Enums.AccountKind {
    let field = GraphQLField.leaf(
      field: "accountKind",
      parent: "Contact",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.AccountKind(from: $0) }
    case .selecting:
      return Enums.AccountKind.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Contact<T> = Selection<T, Objects.Contact>
}
extension Objects {
  struct ContentType {}
}

extension Fields where TypeLock == Objects.ContentType {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func kind() throws -> Enums.ContentTypeKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ContentTypeKind(from: $0) }
    case .selecting:
      return Enums.ContentTypeKind.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func systemIdentifier() throws -> String? {
    let field = GraphQLField.leaf(
      field: "systemIdentifier",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func titleFieldId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "titleFieldId",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func category() throws -> Enums.ContentTypeCategory {
    let field = GraphQLField.leaf(
      field: "category",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ContentTypeCategory(from: $0) }
    case .selecting:
      return Enums.ContentTypeCategory.mockValue
    }
  }

  func orderingStyle() throws -> Enums.ContentTypeOrderingStyle {
    let field = GraphQLField.leaf(
      field: "orderingStyle",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ContentTypeOrderingStyle(from: $0) }
    case .selecting:
      return Enums.ContentTypeOrderingStyle.mockValue
    }
  }

  func fieldOrderings<T>(selection: Selection<T, [Objects.FieldOrderingInput]>) throws -> T {
    let field = GraphQLField.composite(
      field: "fieldOrderings",
      parent: "ContentType",
      type: "FieldOrderingInput",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func isPublishingEnabled() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isPublishingEnabled",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "ContentType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func contentTypeFieldOrderings<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ContentTypeFieldOrdering]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "contentTypeFieldOrderings",
      parent: "ContentType",
      type: "ContentTypeFieldOrdering",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ContentType<T> = Selection<T, Objects.ContentType>
}
extension Objects {
  struct ContentTypeFieldOrdering {}
}

extension Fields where TypeLock == Objects.ContentTypeFieldOrdering {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "ContentTypeFieldOrdering",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func contentTypeId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "contentTypeId",
      parent: "ContentTypeFieldOrdering",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func fieldId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "fieldId",
      parent: "ContentTypeFieldOrdering",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func direction() throws -> Enums.SortDirection {
    let field = GraphQLField.leaf(
      field: "direction",
      parent: "ContentTypeFieldOrdering",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.SortDirection(from: $0) }
    case .selecting:
      return Enums.SortDirection.mockValue
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "ContentTypeFieldOrdering",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "ContentTypeFieldOrdering",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "ContentTypeFieldOrdering",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func contentType<T>(selection: Selection<T, Objects.ContentType>) throws -> T {
    let field = GraphQLField.composite(
      field: "contentType",
      parent: "ContentTypeFieldOrdering",
      type: "ContentType",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ContentTypeFieldOrdering<T> = Selection<T, Objects.ContentTypeFieldOrdering>
}
extension Objects {
  struct ContentVersion {}
}

extension Fields where TypeLock == Objects.ContentVersion {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "ContentVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func contentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "contentId",
      parent: "ContentVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func version() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "version",
      parent: "ContentVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "ContentVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "ContentVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func createdById() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "createdById",
      parent: "ContentVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func snapshot() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "snapshot",
      parent: "ContentVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func createdBy<T>(selection: Selection<T, Objects.Account>) throws -> T {
    let field = GraphQLField.composite(
      field: "createdBy",
      parent: "ContentVersion",
      type: "Account",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ContentVersion<T> = Selection<T, Objects.ContentVersion>
}
extension Objects {
  struct Coupon {}
}

extension Fields where TypeLock == Objects.Coupon {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func discountType() throws -> Enums.CouponDiscountType {
    let field = GraphQLField.leaf(
      field: "discountType",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.CouponDiscountType(from: $0) }
    case .selecting:
      return Enums.CouponDiscountType.mockValue
    }
  }

  func discountAmount() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "discountAmount",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func currencyCode() throws -> String? {
    let field = GraphQLField.leaf(
      field: "currencyCode",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func expiresAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "expiresAt",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func redemptionsLimit() throws -> Int? {
    let field = GraphQLField.leaf(
      field: "redemptionsLimit",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func redemptionsCount() throws -> Int {
    let field = GraphQLField.leaf(
      field: "redemptionsCount",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func environmentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "environmentId",
      parent: "Coupon",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Coupon<T> = Selection<T, Objects.Coupon>
}
extension Objects {
  struct CouponCode {}
}

extension Fields where TypeLock == Objects.CouponCode {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "CouponCode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "CouponCode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func accountId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "accountId",
      parent: "CouponCode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func couponId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "couponId",
      parent: "CouponCode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func redemptionsLimit() throws -> Int? {
    let field = GraphQLField.leaf(
      field: "redemptionsLimit",
      parent: "CouponCode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func redemptionsCount() throws -> Int {
    let field = GraphQLField.leaf(
      field: "redemptionsCount",
      parent: "CouponCode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "CouponCode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "CouponCode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias CouponCode<T> = Selection<T, Objects.CouponCode>
}
extension Objects {
  struct CouponRedemption {}
}

extension Fields where TypeLock == Objects.CouponRedemption {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "CouponRedemption",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func couponId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "couponId",
      parent: "CouponRedemption",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func orderId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "orderId",
      parent: "CouponRedemption",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "CouponRedemption",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "CouponRedemption",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func coupon<T>(selection: Selection<T, Objects.Coupon>) throws -> T {
    let field = GraphQLField.composite(
      field: "coupon",
      parent: "CouponRedemption",
      type: "Coupon",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func order<T>(selection: Selection<T, Objects.Order>) throws -> T {
    let field = GraphQLField.composite(
      field: "order",
      parent: "CouponRedemption",
      type: "Order",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias CouponRedemption<T> = Selection<T, Objects.CouponRedemption>
}
extension Objects {
  struct CouponRestriction {}
}

extension Fields where TypeLock == Objects.CouponRestriction {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "CouponRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func couponId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "couponId",
      parent: "CouponRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func itemId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "itemId",
      parent: "CouponRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func itemCategoryId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "itemCategoryId",
      parent: "CouponRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "CouponRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "CouponRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func item<T>(selection: Selection<T, Objects.Item?>) throws -> T {
    let field = GraphQLField.composite(
      field: "item",
      parent: "CouponRestriction",
      type: "Item",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func itemCategory<T>(selection: Selection<T, Objects.ItemCategory?>) throws -> T {
    let field = GraphQLField.composite(
      field: "itemCategory",
      parent: "CouponRestriction",
      type: "ItemCategory",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias CouponRestriction<T> = Selection<T, Objects.CouponRestriction>
}
extension Objects {
  struct Currency {}
}

extension Fields where TypeLock == Objects.Currency {

  func code() throws -> String {
    let field = GraphQLField.leaf(
      field: "code",
      parent: "Currency",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Currency",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func symbol() throws -> String {
    let field = GraphQLField.leaf(
      field: "symbol",
      parent: "Currency",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Currency<T> = Selection<T, Objects.Currency>
}
extension Objects {
  struct CustomContent {}
}

extension Fields where TypeLock == Objects.CustomContent {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "CustomContent",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "CustomContent",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func contentTypeId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "contentTypeId",
      parent: "CustomContent",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func data() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "data",
      parent: "CustomContent",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "CustomContent",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "CustomContent",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "CustomContent",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func publishedContentVersionId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "publishedContentVersionId",
      parent: "CustomContent",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func currentContentVersionId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "currentContentVersionId",
      parent: "CustomContent",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func contentType<T>(selection: Selection<T, Objects.ContentType>) throws -> T {
    let field = GraphQLField.composite(
      field: "contentType",
      parent: "CustomContent",
      type: "ContentType",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias CustomContent<T> = Selection<T, Objects.CustomContent>
}
extension Objects {
  struct Dashboard {}
}

extension Fields where TypeLock == Objects.Dashboard {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Dashboard",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func dashboardableType() throws -> String {
    let field = GraphQLField.leaf(
      field: "dashboardableType",
      parent: "Dashboard",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func dashboardableId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "dashboardableId",
      parent: "Dashboard",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Dashboard",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Dashboard",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Dashboard",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Dashboard",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func menuElements<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.MenuElement]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "menuElements",
      parent: "Dashboard",
      type: "MenuElement",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Dashboard<T> = Selection<T, Objects.Dashboard>
}
extension Objects {
  struct Delivery {}
}

extension Fields where TypeLock == Objects.Delivery {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func contentId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "contentId",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func content() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "content",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func data() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "data",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func status() throws -> Enums.DeliveryStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.DeliveryStatus(from: $0) }
    case .selecting:
      return Enums.DeliveryStatus.mockValue
    }
  }

  func sentNotificationsCount() throws -> Int {
    let field = GraphQLField.leaf(
      field: "sentNotificationsCount",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func deliveredNotificationsCount() throws -> Int {
    let field = GraphQLField.leaf(
      field: "deliveredNotificationsCount",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func name() throws -> String? {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func contentTypeSystemIdentifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "contentTypeSystemIdentifier",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func failureReason() throws -> String? {
    let field = GraphQLField.leaf(
      field: "failureReason",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func isTest() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isTest",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func scheduledAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "scheduledAt",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func environmentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "environmentId",
      parent: "Delivery",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func environment<T>(selection: Selection<T, Objects.Environment>) throws -> T {
    let field = GraphQLField.composite(
      field: "environment",
      parent: "Delivery",
      type: "Environment",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func recipients<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.Recipient]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "recipients",
      parent: "Delivery",
      type: "Recipient",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Delivery<T> = Selection<T, Objects.Delivery>
}
extension Objects {
  struct DestroyOtherSessionsResponse {}
}

extension Fields where TypeLock == Objects.DestroyOtherSessionsResponse {

  func success() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "success",
      parent: "DestroyOtherSessionsResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias DestroyOtherSessionsResponse<T> = Selection<T, Objects.DestroyOtherSessionsResponse>
}
extension Objects {
  struct Environment {}
}

extension Fields where TypeLock == Objects.Environment {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Environment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Environment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Environment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Environment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func isLive() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isLive",
      parent: "Environment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Environment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Environment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Environment<T> = Selection<T, Objects.Environment>
}
extension Objects {
  struct Event {}
}

extension Fields where TypeLock == Objects.Event {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Event",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func eventTypeId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "eventTypeId",
      parent: "Event",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func accountId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "accountId",
      parent: "Event",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func data() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "data",
      parent: "Event",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Event",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Event",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func timestamp() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "timestamp",
      parent: "Event",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func environmentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "environmentId",
      parent: "Event",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func eventType<T>(selection: Selection<T, Objects.EventType>) throws -> T {
    let field = GraphQLField.composite(
      field: "eventType",
      parent: "Event",
      type: "EventType",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func account<T>(selection: Selection<T, Objects.Account>) throws -> T {
    let field = GraphQLField.composite(
      field: "account",
      parent: "Event",
      type: "Account",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Event<T> = Selection<T, Objects.Event>
}
extension Objects {
  struct EventType {}
}

extension Fields where TypeLock == Objects.EventType {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "EventType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "EventType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func lastReceivedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "lastReceivedAt",
      parent: "EventType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func archivedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "archivedAt",
      parent: "EventType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "EventType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "EventType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func operationId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "operationId",
      parent: "EventType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func workspaceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "EventType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias EventType<T> = Selection<T, Objects.EventType>
}
extension Objects {
  struct ExportExternalRecordsResponse {}
}

extension Fields where TypeLock == Objects.ExportExternalRecordsResponse {

  func success() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "success",
      parent: "ExportExternalRecordsResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ExportExternalRecordsResponse<T> = Selection<T, Objects.ExportExternalRecordsResponse>
}
extension Objects {
  struct ExternalAsset {}
}

extension Fields where TypeLock == Objects.ExternalAsset {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "ExternalAsset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func installationId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "installationId",
      parent: "ExternalAsset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func externalColumnId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "externalColumnId",
      parent: "ExternalAsset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func storageProviderId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "storageProviderId",
      parent: "ExternalAsset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func status() throws -> String? {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "ExternalAsset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func data() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "data",
      parent: "ExternalAsset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "ExternalAsset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "ExternalAsset",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ExternalAsset<T> = Selection<T, Objects.ExternalAsset>
}
extension Objects {
  struct ExternalColumn {}
}

extension Fields where TypeLock == Objects.ExternalColumn {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func externalTableId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "externalTableId",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func fieldType() throws -> String {
    let field = GraphQLField.leaf(
      field: "fieldType",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func settings() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "settings",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func isRepeated() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isRepeated",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func dbMeta() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "dbMeta",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func uiMeta() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "uiMeta",
      parent: "ExternalColumn",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ExternalColumn<T> = Selection<T, Objects.ExternalColumn>
}
extension Objects {
  struct ExternalLog {}
}

extension Fields where TypeLock == Objects.ExternalLog {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func installationId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "installationId",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func kind() throws -> Enums.ExternalLogKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ExternalLogKind(from: $0) }
    case .selecting:
      return Enums.ExternalLogKind.mockValue
    }
  }

  func timeTaken() throws -> Int? {
    let field = GraphQLField.leaf(
      field: "timeTaken",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func requestUid() throws -> String? {
    let field = GraphQLField.leaf(
      field: "requestUid",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func requestParts() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "requestParts",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func requestBody() throws -> [Int]? {
    let field = GraphQLField.leaf(
      field: "requestBody",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [Int]?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func responseParts() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "responseParts",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func responseBody() throws -> [Int]? {
    let field = GraphQLField.leaf(
      field: "responseBody",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [Int]?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func status() throws -> Enums.ExternalLogStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ExternalLogStatus(from: $0) }
    case .selecting:
      return Enums.ExternalLogStatus.mockValue
    }
  }

  func statusReason() throws -> String? {
    let field = GraphQLField.leaf(
      field: "statusReason",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func environmentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "environmentId",
      parent: "ExternalLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ExternalLog<T> = Selection<T, Objects.ExternalLog>
}
extension Objects {
  struct ExternalPolymorphicView {}
}

extension Fields where TypeLock == Objects.ExternalPolymorphicView {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "ExternalPolymorphicView",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func externalTableId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "externalTableId",
      parent: "ExternalPolymorphicView",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "ExternalPolymorphicView",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func value() throws -> String {
    let field = GraphQLField.leaf(
      field: "value",
      parent: "ExternalPolymorphicView",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "ExternalPolymorphicView",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "ExternalPolymorphicView",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ExternalPolymorphicView<T> = Selection<T, Objects.ExternalPolymorphicView>
}
extension Objects {
  struct ExternalRelationship {}
}

extension Fields where TypeLock == Objects.ExternalRelationship {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "ExternalRelationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func installationId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "installationId",
      parent: "ExternalRelationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func sourceExternalTableId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "sourceExternalTableId",
      parent: "ExternalRelationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func sourceExternalColumnId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "sourceExternalColumnId",
      parent: "ExternalRelationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func destinationExternalTableId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "destinationExternalTableId",
      parent: "ExternalRelationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func destinationExternalColumnId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "destinationExternalColumnId",
      parent: "ExternalRelationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func kind() throws -> Enums.ExternalRelationshipKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "ExternalRelationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ExternalRelationshipKind(from: $0) }
    case .selecting:
      return Enums.ExternalRelationshipKind.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "ExternalRelationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "ExternalRelationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func sourceExternalTable<T>(selection: Selection<T, Objects.ExternalTable>) throws -> T {
    let field = GraphQLField.composite(
      field: "sourceExternalTable",
      parent: "ExternalRelationship",
      type: "ExternalTable",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func sourceExternalColumn<T>(selection: Selection<T, Objects.ExternalColumn>) throws -> T {
    let field = GraphQLField.composite(
      field: "sourceExternalColumn",
      parent: "ExternalRelationship",
      type: "ExternalColumn",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destinationExternalTable<T>(selection: Selection<T, Objects.ExternalTable>) throws -> T {
    let field = GraphQLField.composite(
      field: "destinationExternalTable",
      parent: "ExternalRelationship",
      type: "ExternalTable",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destinationExternalColumn<T>(selection: Selection<T, Objects.ExternalColumn>) throws -> T {
    let field = GraphQLField.composite(
      field: "destinationExternalColumn",
      parent: "ExternalRelationship",
      type: "ExternalColumn",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ExternalRelationship<T> = Selection<T, Objects.ExternalRelationship>
}
extension Objects {
  struct ExternalTable {}
}

extension Fields where TypeLock == Objects.ExternalTable {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "ExternalTable",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func installationId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "installationId",
      parent: "ExternalTable",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "ExternalTable",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "ExternalTable",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "ExternalTable",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "ExternalTable",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func titleColumnId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "titleColumnId",
      parent: "ExternalTable",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func polymorphicColumnId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "polymorphicColumnId",
      parent: "ExternalTable",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func dbMeta() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "dbMeta",
      parent: "ExternalTable",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func uiMeta() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "uiMeta",
      parent: "ExternalTable",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func externalPolymorphicViews<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalPolymorphicView]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalPolymorphicViews",
      parent: "ExternalTable",
      type: "ExternalPolymorphicView",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func titleColumn<T>(selection: Selection<T, Objects.ExternalColumn?>) throws -> T {
    let field = GraphQLField.composite(
      field: "titleColumn",
      parent: "ExternalTable",
      type: "ExternalColumn",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func polymorphicColumn<T>(selection: Selection<T, Objects.ExternalColumn?>) throws -> T {
    let field = GraphQLField.composite(
      field: "polymorphicColumn",
      parent: "ExternalTable",
      type: "ExternalColumn",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ExternalTable<T> = Selection<T, Objects.ExternalTable>
}
extension Objects {
  struct FetchContactsResponse {}
}

extension Fields where TypeLock == Objects.FetchContactsResponse {

  func contacts<T>(selection: Selection<T, [Objects.Contact]>) throws -> T {
    let field = GraphQLField.composite(
      field: "contacts",
      parent: "FetchContactsResponse",
      type: "Contact",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias FetchContactsResponse<T> = Selection<T, Objects.FetchContactsResponse>
}
extension Objects {
  struct FetchStoredPreferencesResponse {}
}

extension Fields where TypeLock == Objects.FetchStoredPreferencesResponse {

  func preferenceData() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "preferenceData",
      parent: "FetchStoredPreferencesResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias FetchStoredPreferencesResponse<T> = Selection<T, Objects.FetchStoredPreferencesResponse>
}
extension Objects {
  struct Field {}
}

extension Fields where TypeLock == Objects.Field {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func contentTypeId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "contentTypeId",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func fieldType() throws -> String {
    let field = GraphQLField.leaf(
      field: "fieldType",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func isRepeated() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isRepeated",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func defaultValue() throws -> String? {
    let field = GraphQLField.leaf(
      field: "defaultValue",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func placeholder() throws -> String? {
    let field = GraphQLField.leaf(
      field: "placeholder",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func helpText() throws -> String? {
    let field = GraphQLField.leaf(
      field: "helpText",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func settings() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "settings",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func restrictions() throws -> [UUIDScalar] {
    let field = GraphQLField.leaf(
      field: "restrictions",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [UUIDScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func isTranslatable() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isTranslatable",
      parent: "Field",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func fieldRestrictions<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.FieldRestriction]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "fieldRestrictions",
      parent: "Field",
      type: "FieldRestriction",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Field<T> = Selection<T, Objects.Field>
}
extension Objects {
  struct FieldOrderingInput {}
}

extension Fields where TypeLock == Objects.FieldOrderingInput {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "FieldOrderingInput",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func direction() throws -> Enums.SortDirection {
    let field = GraphQLField.leaf(
      field: "direction",
      parent: "FieldOrderingInput",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.SortDirection(from: $0) }
    case .selecting:
      return Enums.SortDirection.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias FieldOrderingInput<T> = Selection<T, Objects.FieldOrderingInput>
}
extension Objects {
  struct FieldRestriction {}
}

extension Fields where TypeLock == Objects.FieldRestriction {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "FieldRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func fieldId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "fieldId",
      parent: "FieldRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func contentTypeId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "contentTypeId",
      parent: "FieldRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "FieldRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "FieldRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "FieldRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func contentType<T>(selection: Selection<T, Objects.ContentType>) throws -> T {
    let field = GraphQLField.composite(
      field: "contentType",
      parent: "FieldRestriction",
      type: "ContentType",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias FieldRestriction<T> = Selection<T, Objects.FieldRestriction>
}
extension Objects {
  struct FieldType {}
}

extension Fields where TypeLock == Objects.FieldType {

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "FieldType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "FieldType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func icon() throws -> String {
    let field = GraphQLField.leaf(
      field: "icon",
      parent: "FieldType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "FieldType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func category() throws -> Enums.FieldTypeCategory {
    let field = GraphQLField.leaf(
      field: "category",
      parent: "FieldType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FieldTypeCategory(from: $0) }
    case .selecting:
      return Enums.FieldTypeCategory.mockValue
    }
  }

  func dataType() throws -> Enums.FieldTypeDataType {
    let field = GraphQLField.leaf(
      field: "dataType",
      parent: "FieldType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FieldTypeDataType(from: $0) }
    case .selecting:
      return Enums.FieldTypeDataType.mockValue
    }
  }

  func defaultValue() throws -> String? {
    let field = GraphQLField.leaf(
      field: "defaultValue",
      parent: "FieldType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func placeholder() throws -> String? {
    let field = GraphQLField.leaf(
      field: "placeholder",
      parent: "FieldType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func helpText() throws -> String? {
    let field = GraphQLField.leaf(
      field: "helpText",
      parent: "FieldType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func configuration() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "configuration",
      parent: "FieldType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func settings() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "settings",
      parent: "FieldType",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias FieldType<T> = Selection<T, Objects.FieldType>
}
extension Objects {
  struct Flow {}
}

extension Fields where TypeLock == Objects.Flow {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Flow",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Flow",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Flow",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Flow",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Flow",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func status() throws -> Enums.FlowVersionStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "Flow",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FlowVersionStatus(from: $0) }
    case .selecting:
      return Enums.FlowVersionStatus.mockValue
    }
  }

  func runCount() throws -> Int {
    let field = GraphQLField.leaf(
      field: "runCount",
      parent: "Flow",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func lastRunAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "lastRunAt",
      parent: "Flow",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func workspaceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Flow",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func flowVersions<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.FlowVersion]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "flowVersions",
      parent: "Flow",
      type: "FlowVersion",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Flow<T> = Selection<T, Objects.Flow>
}
extension Objects {
  struct FlowExecution {}
}

extension Fields where TypeLock == Objects.FlowExecution {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "FlowExecution",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func flowVersionId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "flowVersionId",
      parent: "FlowExecution",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func failureReason() throws -> String? {
    let field = GraphQLField.leaf(
      field: "failureReason",
      parent: "FlowExecution",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "FlowExecution",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "FlowExecution",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func enteredAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "enteredAt",
      parent: "FlowExecution",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func exitedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "exitedAt",
      parent: "FlowExecution",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func accountId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "accountId",
      parent: "FlowExecution",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func status() throws -> Enums.FlowExecutionStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "FlowExecution",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FlowExecutionStatus(from: $0) }
    case .selecting:
      return Enums.FlowExecutionStatus.mockValue
    }
  }

  func environmentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "environmentId",
      parent: "FlowExecution",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func flowVersion<T>(selection: Selection<T, Objects.FlowVersion>) throws -> T {
    let field = GraphQLField.composite(
      field: "flowVersion",
      parent: "FlowExecution",
      type: "FlowVersion",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func environment<T>(selection: Selection<T, Objects.Environment>) throws -> T {
    let field = GraphQLField.composite(
      field: "environment",
      parent: "FlowExecution",
      type: "Environment",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias FlowExecution<T> = Selection<T, Objects.FlowExecution>
}
extension Objects {
  struct FlowExecutionNode {}
}

extension Fields where TypeLock == Objects.FlowExecutionNode {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func flowExecutionId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "flowExecutionId",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func flowNodeId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "flowNodeId",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func data() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "data",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func status() throws -> Enums.FlowExecutionNodeStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FlowExecutionNodeStatus(from: $0) }
    case .selecting:
      return Enums.FlowExecutionNodeStatus.mockValue
    }
  }

  func enteredAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "enteredAt",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func exitedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "exitedAt",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func failureReason() throws -> String? {
    let field = GraphQLField.leaf(
      field: "failureReason",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func scheduledAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "scheduledAt",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func timeoutAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "timeoutAt",
      parent: "FlowExecutionNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func flowExecution<T>(selection: Selection<T, Objects.FlowExecution>) throws -> T {
    let field = GraphQLField.composite(
      field: "flowExecution",
      parent: "FlowExecutionNode",
      type: "FlowExecution",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowNode<T>(selection: Selection<T, Objects.FlowNode>) throws -> T {
    let field = GraphQLField.composite(
      field: "flowNode",
      parent: "FlowExecutionNode",
      type: "FlowNode",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias FlowExecutionNode<T> = Selection<T, Objects.FlowExecutionNode>
}
extension Objects {
  struct FlowNode {}
}

extension Fields where TypeLock == Objects.FlowNode {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func flowVersionId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "flowVersionId",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func kind() throws -> Enums.FlowNodeKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FlowNodeKind(from: $0) }
    case .selecting:
      return Enums.FlowNodeKind.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func eventTypeId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "eventTypeId",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func settings() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "settings",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func description() throws -> String? {
    let field = GraphQLField.leaf(
      field: "description",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func summary() throws -> String? {
    let field = GraphQLField.leaf(
      field: "summary",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func occurrenceKind() throws -> Enums.FlowNodeOccurrenceKind {
    let field = GraphQLField.leaf(
      field: "occurrenceKind",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FlowNodeOccurrenceKind(from: $0) }
    case .selecting:
      return Enums.FlowNodeOccurrenceKind.mockValue
    }
  }

  func occurrenceCount() throws -> Int {
    let field = GraphQLField.leaf(
      field: "occurrenceCount",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func occurrenceWindowPeriod() throws -> Enums.FlowNodeOccurrenceWindowPeriod {
    let field = GraphQLField.leaf(
      field: "occurrenceWindowPeriod",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) {
        try Enums.FlowNodeOccurrenceWindowPeriod(from: $0)
      }
    case .selecting:
      return Enums.FlowNodeOccurrenceWindowPeriod.mockValue
    }
  }

  func occurrenceWindowAmount() throws -> Int {
    let field = GraphQLField.leaf(
      field: "occurrenceWindowAmount",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func waitBehavior() throws -> Enums.FlowNodeWaitBehavior {
    let field = GraphQLField.leaf(
      field: "waitBehavior",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FlowNodeWaitBehavior(from: $0) }
    case .selecting:
      return Enums.FlowNodeWaitBehavior.mockValue
    }
  }

  func waitForPeriod() throws -> Enums.FlowNodeWaitForPeriod {
    let field = GraphQLField.leaf(
      field: "waitForPeriod",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FlowNodeWaitForPeriod(from: $0) }
    case .selecting:
      return Enums.FlowNodeWaitForPeriod.mockValue
    }
  }

  func waitForAmount() throws -> Int {
    let field = GraphQLField.leaf(
      field: "waitForAmount",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func waitUntilPeriod() throws -> Enums.FlowNodeWaitUntilPeriod {
    let field = GraphQLField.leaf(
      field: "waitUntilPeriod",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FlowNodeWaitUntilPeriod(from: $0) }
    case .selecting:
      return Enums.FlowNodeWaitUntilPeriod.mockValue
    }
  }

  func waitUntilMinute() throws -> Int? {
    let field = GraphQLField.leaf(
      field: "waitUntilMinute",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func waitUntilHour() throws -> Int? {
    let field = GraphQLField.leaf(
      field: "waitUntilHour",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func waitUntilDay() throws -> Int? {
    let field = GraphQLField.leaf(
      field: "waitUntilDay",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func operationId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "operationId",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func occurrenceScope() throws -> Enums.FlowNodeOccurrenceScope {
    let field = GraphQLField.leaf(
      field: "occurrenceScope",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FlowNodeOccurrenceScope(from: $0) }
    case .selecting:
      return Enums.FlowNodeOccurrenceScope.mockValue
    }
  }

  func repeatability() throws -> Enums.FlowNodeRepeatability {
    let field = GraphQLField.leaf(
      field: "repeatability",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FlowNodeRepeatability(from: $0) }
    case .selecting:
      return Enums.FlowNodeRepeatability.mockValue
    }
  }

  func waitUntilWeekday() throws -> Enums.FlowNodeWaitUntilWeekday? {
    let field = GraphQLField.leaf(
      field: "waitUntilWeekday",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) {
        try Enums.FlowNodeWaitUntilWeekday?(from: $0)
      }
    case .selecting:
      return nil
    }
  }

  func occurrenceBehavior() throws -> Enums.FlowNodeOccurrenceBehavior {
    let field = GraphQLField.leaf(
      field: "occurrenceBehavior",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) {
        try Enums.FlowNodeOccurrenceBehavior(from: $0)
      }
    case .selecting:
      return Enums.FlowNodeOccurrenceBehavior.mockValue
    }
  }

  func arguments() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "arguments",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func dataFilter() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "dataFilter",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func isConcurrent() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isConcurrent",
      parent: "FlowNode",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias FlowNode<T> = Selection<T, Objects.FlowNode>
}
extension Objects {
  struct FlowVersion {}
}

extension Fields where TypeLock == Objects.FlowVersion {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "FlowVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func flowId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "flowId",
      parent: "FlowVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "FlowVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "FlowVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func status() throws -> Enums.FlowVersionStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "FlowVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.FlowVersionStatus(from: $0) }
    case .selecting:
      return Enums.FlowVersionStatus.mockValue
    }
  }

  func version() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "version",
      parent: "FlowVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func snapshot() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "snapshot",
      parent: "FlowVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func runCount() throws -> Int {
    let field = GraphQLField.leaf(
      field: "runCount",
      parent: "FlowVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func lastRunAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "lastRunAt",
      parent: "FlowVersion",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func flow<T>(selection: Selection<T, Objects.Flow>) throws -> T {
    let field = GraphQLField.composite(
      field: "flow",
      parent: "FlowVersion",
      type: "Flow",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias FlowVersion<T> = Selection<T, Objects.FlowVersion>
}
extension Objects {
  struct ForgotPasswordResponse {}
}

extension Fields where TypeLock == Objects.ForgotPasswordResponse {

  func success() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "success",
      parent: "ForgotPasswordResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ForgotPasswordResponse<T> = Selection<T, Objects.ForgotPasswordResponse>
}
extension Objects {
  struct GenerateIdentityTokenResponse {}
}

extension Fields where TypeLock == Objects.GenerateIdentityTokenResponse {

  func token() throws -> String {
    let field = GraphQLField.leaf(
      field: "token",
      parent: "GenerateIdentityTokenResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias GenerateIdentityTokenResponse<T> = Selection<T, Objects.GenerateIdentityTokenResponse>
}
extension Objects {
  struct Group {}
}

extension Fields where TypeLock == Objects.Group {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Group",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func environmentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "environmentId",
      parent: "Group",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func parentId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "parentId",
      parent: "Group",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Group",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "Group",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Group",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Group",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func accountKind() throws -> Enums.AccountKind {
    let field = GraphQLField.leaf(
      field: "accountKind",
      parent: "Group",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.AccountKind(from: $0) }
    case .selecting:
      return Enums.AccountKind.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Group<T> = Selection<T, Objects.Group>
}
extension Objects {
  struct IdentifyProspectResponse {}
}

extension Fields where TypeLock == Objects.IdentifyProspectResponse {

  func success() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "success",
      parent: "IdentifyProspectResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias IdentifyProspectResponse<T> = Selection<T, Objects.IdentifyProspectResponse>
}
extension Objects {
  struct Installation {}
}

extension Fields where TypeLock == Objects.Installation {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Installation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func appId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "appId",
      parent: "Installation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Installation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Installation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Installation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Installation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func archivedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "archivedAt",
      parent: "Installation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func workspaceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Installation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func appKind() throws -> Enums.AppKind {
    let field = GraphQLField.leaf(
      field: "appKind",
      parent: "Installation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.AppKind(from: $0) }
    case .selecting:
      return Enums.AppKind.mockValue
    }
  }

  func app<T>(selection: Selection<T, Objects.App>) throws -> T {
    let field = GraphQLField.composite(
      field: "app",
      parent: "Installation",
      type: "App",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Installation<T> = Selection<T, Objects.Installation>
}
extension Objects {
  struct Item {}
}

extension Fields where TypeLock == Objects.Item {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Item",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func kind() throws -> Enums.ItemKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "Item",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ItemKind(from: $0) }
    case .selecting:
      return Enums.ItemKind.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Item",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Item",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func description() throws -> String? {
    let field = GraphQLField.leaf(
      field: "description",
      parent: "Item",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Item",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Item",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Item",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func itemCategoryMemberships<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.ItemCategoryMembership]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "itemCategoryMemberships",
      parent: "Item",
      type: "ItemCategoryMembership",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func pricings<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.Pricing]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "pricings",
      parent: "Item",
      type: "Pricing",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Item<T> = Selection<T, Objects.Item>
}
extension Objects {
  struct ItemCategory {}
}

extension Fields where TypeLock == Objects.ItemCategory {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "ItemCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "ItemCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "ItemCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func description() throws -> String? {
    let field = GraphQLField.leaf(
      field: "description",
      parent: "ItemCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "ItemCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "ItemCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "ItemCategory",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ItemCategory<T> = Selection<T, Objects.ItemCategory>
}
extension Objects {
  struct ItemCategoryMembership {}
}

extension Fields where TypeLock == Objects.ItemCategoryMembership {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "ItemCategoryMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func itemId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "itemId",
      parent: "ItemCategoryMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func itemCategoryId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "itemCategoryId",
      parent: "ItemCategoryMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "ItemCategoryMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "ItemCategoryMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func item<T>(selection: Selection<T, Objects.Item>) throws -> T {
    let field = GraphQLField.composite(
      field: "item",
      parent: "ItemCategoryMembership",
      type: "Item",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func itemCategory<T>(selection: Selection<T, Objects.ItemCategory>) throws -> T {
    let field = GraphQLField.composite(
      field: "itemCategory",
      parent: "ItemCategoryMembership",
      type: "ItemCategory",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ItemCategoryMembership<T> = Selection<T, Objects.ItemCategoryMembership>
}
extension Objects {
  struct KeyPair {}
}

extension Fields where TypeLock == Objects.KeyPair {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "KeyPair",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func accountId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "accountId",
      parent: "KeyPair",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func publicKey() throws -> String {
    let field = GraphQLField.leaf(
      field: "publicKey",
      parent: "KeyPair",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func privateKey() throws -> String {
    let field = GraphQLField.leaf(
      field: "privateKey",
      parent: "KeyPair",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func expiresAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "expiresAt",
      parent: "KeyPair",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "KeyPair",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "KeyPair",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias KeyPair<T> = Selection<T, Objects.KeyPair>
}
extension Objects {
  struct Locale {}
}

extension Fields where TypeLock == Objects.Locale {

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Locale",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Locale",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Locale<T> = Selection<T, Objects.Locale>
}
extension Objects {
  struct Medium {}
}

extension Fields where TypeLock == Objects.Medium {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Medium",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func fileUrl() throws -> String? {
    let field = GraphQLField.leaf(
      field: "fileUrl",
      parent: "Medium",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func metadata() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "metadata",
      parent: "Medium",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Medium",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Medium",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Medium",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Medium<T> = Selection<T, Objects.Medium>
}
extension Objects {
  struct MenuElement {}
}

extension Fields where TypeLock == Objects.MenuElement {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func dashboardId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "dashboardId",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func installationId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "installationId",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func parentId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "parentId",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func systemIdentifier() throws -> String? {
    let field = GraphQLField.leaf(
      field: "systemIdentifier",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func viewId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "viewId",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func viewStyle() throws -> Enums.ViewStyle? {
    let field = GraphQLField.leaf(
      field: "viewStyle",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ViewStyle?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func name() throws -> String? {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func path() throws -> String? {
    let field = GraphQLField.leaf(
      field: "path",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func icon() throws -> String? {
    let field = GraphQLField.leaf(
      field: "icon",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func kind() throws -> Enums.MenuElementKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.MenuElementKind(from: $0) }
    case .selecting:
      return Enums.MenuElementKind.mockValue
    }
  }

  func separatorStyle() throws -> Enums.MenuElementSeparatorStyle? {
    let field = GraphQLField.leaf(
      field: "separatorStyle",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) {
        try Enums.MenuElementSeparatorStyle?(from: $0)
      }
    case .selecting:
      return nil
    }
  }

  func placement() throws -> Enums.MenuElementPlacement {
    let field = GraphQLField.leaf(
      field: "placement",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.MenuElementPlacement(from: $0) }
    case .selecting:
      return Enums.MenuElementPlacement.mockValue
    }
  }

  func target() throws -> Enums.MenuElementTarget? {
    let field = GraphQLField.leaf(
      field: "target",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.MenuElementTarget?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func url() throws -> String? {
    let field = GraphQLField.leaf(
      field: "url",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func query() throws -> String? {
    let field = GraphQLField.leaf(
      field: "query",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func actions<T>(selection: Selection<T, [Objects.MenuElementAction]>) throws -> T {
    let field = GraphQLField.composite(
      field: "actions",
      parent: "MenuElement",
      type: "MenuElementAction",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func isLocked() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isLocked",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func isRepeated() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isRepeated",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func isSticky() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isSticky",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "MenuElement",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func view<T>(selection: Selection<T, Objects.View?>) throws -> T {
    let field = GraphQLField.composite(
      field: "view",
      parent: "MenuElement",
      type: "View",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias MenuElement<T> = Selection<T, Objects.MenuElement>
}
extension Objects {
  struct MenuElementAction {}
}

extension Fields where TypeLock == Objects.MenuElementAction {

  func icon() throws -> String {
    let field = GraphQLField.leaf(
      field: "icon",
      parent: "MenuElementAction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "MenuElementAction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func action() throws -> String {
    let field = GraphQLField.leaf(
      field: "action",
      parent: "MenuElementAction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias MenuElementAction<T> = Selection<T, Objects.MenuElementAction>
}
extension Objects {
  struct Mutation {}
}

extension Fields where TypeLock == Objects.Mutation {

  func identifyProspect<T>(
    input: InputObjects.IdentifyProspectInput,
    selection: Selection<T, Objects.IdentifyProspectResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "identifyProspect",
      parent: "Mutation",
      type: "IdentifyProspectResponse",
      arguments: [Argument(name: "input", type: "IdentifyProspectInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func verifyProspect<T>(
    input: InputObjects.VerifyProspectInput, selection: Selection<T, Objects.Prospect>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "verifyProspect",
      parent: "Mutation",
      type: "Prospect",
      arguments: [Argument(name: "input", type: "VerifyProspectInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func registerWorkspace<T>(
    input: InputObjects.RegisterWorkspaceInput,
    selection: Selection<T, Objects.RegisterWorkspaceResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "registerWorkspace",
      parent: "Mutation",
      type: "RegisterWorkspaceResponse",
      arguments: [Argument(name: "input", type: "RegisterWorkspaceInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateWorkspaceTheme<T>(
    input: InputObjects.UpdateWorkspaceThemeInput, selection: Selection<T, Objects.Workspace>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateWorkspaceTheme",
      parent: "Mutation",
      type: "Workspace",
      arguments: [Argument(name: "input", type: "UpdateWorkspaceThemeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateWorkspaceBranding<T>(
    input: InputObjects.UpdateWorkspaceBrandingInput, selection: Selection<T, Objects.Workspace>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateWorkspaceBranding",
      parent: "Mutation",
      type: "Workspace",
      arguments: [Argument(name: "input", type: "UpdateWorkspaceBrandingInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateWorkspaceDomain<T>(
    input: InputObjects.UpdateWorkspaceDomainInput, selection: Selection<T, Objects.Workspace>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateWorkspaceDomain",
      parent: "Mutation",
      type: "Workspace",
      arguments: [Argument(name: "input", type: "UpdateWorkspaceDomainInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func saveWorkspaceLocale<T>(
    input: InputObjects.SaveWorkspaceLocaleInput, selection: Selection<T, Objects.Workspace>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "saveWorkspaceLocale",
      parent: "Mutation",
      type: "Workspace",
      arguments: [Argument(name: "input", type: "SaveWorkspaceLocaleInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func removeWorkspaceLocale<T>(
    input: InputObjects.RemoveWorkspaceLocaleInput, selection: Selection<T, Objects.Workspace>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "removeWorkspaceLocale",
      parent: "Mutation",
      type: "Workspace",
      arguments: [Argument(name: "input", type: "RemoveWorkspaceLocaleInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createApp<T>(input: InputObjects.CreateAppInput, selection: Selection<T, Objects.App>) throws
    -> T
  {
    let field = GraphQLField.composite(
      field: "createApp",
      parent: "Mutation",
      type: "App",
      arguments: [Argument(name: "input", type: "CreateAppInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createEnvironment<T>(
    input: InputObjects.CreateEnvironmentInput, selection: Selection<T, Objects.Environment>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createEnvironment",
      parent: "Mutation",
      type: "Environment",
      arguments: [Argument(name: "input", type: "CreateEnvironmentInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateEnvironment<T>(
    input: InputObjects.UpdateEnvironmentInput, selection: Selection<T, Objects.Environment>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateEnvironment",
      parent: "Mutation",
      type: "Environment",
      arguments: [Argument(name: "input", type: "UpdateEnvironmentInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createInstallation<T>(
    input: InputObjects.CreateInstallationInput, selection: Selection<T, Objects.Installation>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createInstallation",
      parent: "Mutation",
      type: "Installation",
      arguments: [Argument(name: "input", type: "CreateInstallationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateInstallation<T>(
    input: InputObjects.UpdateInstallationInput, selection: Selection<T, Objects.Installation>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateInstallation",
      parent: "Mutation",
      type: "Installation",
      arguments: [Argument(name: "input", type: "UpdateInstallationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func archiveInstallation<T>(
    input: InputObjects.ArchiveInstallationInput, selection: Selection<T, Objects.Installation>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "archiveInstallation",
      parent: "Mutation",
      type: "Installation",
      arguments: [Argument(name: "input", type: "ArchiveInstallationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func unarchiveInstallation<T>(
    input: InputObjects.UnarchiveInstallationInput, selection: Selection<T, Objects.Installation>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "unarchiveInstallation",
      parent: "Mutation",
      type: "Installation",
      arguments: [Argument(name: "input", type: "UnarchiveInstallationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createConfiguration<T>(
    input: InputObjects.CreateConfigurationInput, selection: Selection<T, Objects.Configuration>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createConfiguration",
      parent: "Mutation",
      type: "Configuration",
      arguments: [Argument(name: "input", type: "CreateConfigurationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateConfiguration<T>(
    input: InputObjects.UpdateConfigurationInput, selection: Selection<T, Objects.Configuration>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateConfiguration",
      parent: "Mutation",
      type: "Configuration",
      arguments: [Argument(name: "input", type: "UpdateConfigurationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyConfiguration<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Configuration>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyConfiguration",
      parent: "Mutation",
      type: "Configuration",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func configureInstallation<T>(
    input: InputObjects.ConfigureInstallationInput, selection: Selection<T, Objects.Configuration>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "configureInstallation",
      parent: "Mutation",
      type: "Configuration",
      arguments: [Argument(name: "input", type: "ConfigureInstallationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createDashboard<T>(
    input: InputObjects.CreateDashboardInput, selection: Selection<T, Objects.Dashboard>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createDashboard",
      parent: "Mutation",
      type: "Dashboard",
      arguments: [Argument(name: "input", type: "CreateDashboardInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateDashboard<T>(
    input: InputObjects.UpdateDashboardInput, selection: Selection<T, Objects.Dashboard>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateDashboard",
      parent: "Mutation",
      type: "Dashboard",
      arguments: [Argument(name: "input", type: "UpdateDashboardInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func addToDashboard<T>(
    input: InputObjects.AddToDashboardInput, selection: Selection<T, Objects.Dashboard>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "addToDashboard",
      parent: "Mutation",
      type: "Dashboard",
      arguments: [Argument(name: "input", type: "AddToDashboardInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyDashboard<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Dashboard>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyDashboard",
      parent: "Mutation",
      type: "Dashboard",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateView<T>(input: InputObjects.UpdateViewInput, selection: Selection<T, Objects.View>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "updateView",
      parent: "Mutation",
      type: "View",
      arguments: [Argument(name: "input", type: "UpdateViewInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createMenuElement<T>(
    input: InputObjects.CreateMenuElementInput, selection: Selection<T, Objects.MenuElement>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createMenuElement",
      parent: "Mutation",
      type: "MenuElement",
      arguments: [Argument(name: "input", type: "CreateMenuElementInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateMenuElement<T>(
    input: InputObjects.UpdateMenuElementInput, selection: Selection<T, Objects.MenuElement>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateMenuElement",
      parent: "Mutation",
      type: "MenuElement",
      arguments: [Argument(name: "input", type: "UpdateMenuElementInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyMenuElement<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.MenuElement>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyMenuElement",
      parent: "Mutation",
      type: "MenuElement",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createTheme<T>(input: InputObjects.CreateThemeInput, selection: Selection<T, Objects.Theme>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "createTheme",
      parent: "Mutation",
      type: "Theme",
      arguments: [Argument(name: "input", type: "CreateThemeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateTheme<T>(input: InputObjects.UpdateThemeInput, selection: Selection<T, Objects.Theme>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "updateTheme",
      parent: "Mutation",
      type: "Theme",
      arguments: [Argument(name: "input", type: "UpdateThemeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyTheme<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Theme>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroyTheme",
      parent: "Mutation",
      type: "Theme",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createGroup<T>(input: InputObjects.CreateGroupInput, selection: Selection<T, Objects.Group>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "createGroup",
      parent: "Mutation",
      type: "Group",
      arguments: [Argument(name: "input", type: "CreateGroupInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateGroup<T>(input: InputObjects.UpdateGroupInput, selection: Selection<T, Objects.Group>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "updateGroup",
      parent: "Mutation",
      type: "Group",
      arguments: [Argument(name: "input", type: "UpdateGroupInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyGroup<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Group>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroyGroup",
      parent: "Mutation",
      type: "Group",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func forgotPassword<T>(
    input: InputObjects.ForgotPasswordInput, selection: Selection<T, Objects.ForgotPasswordResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "forgotPassword",
      parent: "Mutation",
      type: "ForgotPasswordResponse",
      arguments: [Argument(name: "input", type: "ForgotPasswordInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateAccount<T>(
    input: InputObjects.UpdateAccountInput, selection: Selection<T, Objects.Account>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateAccount",
      parent: "Mutation",
      type: "Account",
      arguments: [Argument(name: "input", type: "UpdateAccountInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func identifyAccount<T>(
    input: InputObjects.IdentifyAccountInput, selection: Selection<T, Objects.Account>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "identifyAccount",
      parent: "Mutation",
      type: "Account",
      arguments: [Argument(name: "input", type: "IdentifyAccountInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func changePassword<T>(
    input: InputObjects.ChangePasswordInput, selection: Selection<T, Objects.Account>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "changePassword",
      parent: "Mutation",
      type: "Account",
      arguments: [Argument(name: "input", type: "ChangePasswordInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func changeEmail<T>(
    input: InputObjects.ChangeEmailInput, selection: Selection<T, Objects.ChangeEmailResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "changeEmail",
      parent: "Mutation",
      type: "ChangeEmailResponse",
      arguments: [Argument(name: "input", type: "ChangeEmailInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func verifyEmailChange<T>(
    input: InputObjects.VerifyEmailChangeInput, selection: Selection<T, Objects.Account>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "verifyEmailChange",
      parent: "Mutation",
      type: "Account",
      arguments: [Argument(name: "input", type: "VerifyEmailChangeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createAccount<T>(
    input: InputObjects.CreateAccountInput, selection: Selection<T, Objects.Account>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createAccount",
      parent: "Mutation",
      type: "Account",
      arguments: [Argument(name: "input", type: "CreateAccountInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func completeOnboarding<T>(
    input: InputObjects.CompleteOnboardingInput, selection: Selection<T, Objects.Account>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "completeOnboarding",
      parent: "Mutation",
      type: "Account",
      arguments: [Argument(name: "input", type: "CompleteOnboardingInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateAccountAvatar<T>(
    input: InputObjects.UpdateAccountAvatarInput, selection: Selection<T, Objects.Account>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateAccountAvatar",
      parent: "Mutation",
      type: "Account",
      arguments: [Argument(name: "input", type: "UpdateAccountAvatarInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createSession<T>(
    input: InputObjects.CreateSessionInput, selection: Selection<T, Objects.Session>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createSession",
      parent: "Mutation",
      type: "Session",
      arguments: [Argument(name: "input", type: "CreateSessionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyOtherSessions<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.DestroyOtherSessionsResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyOtherSessions",
      parent: "Mutation",
      type: "DestroyOtherSessionsResponse",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroySession<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Session>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroySession",
      parent: "Mutation",
      type: "Session",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func resetPassword<T>(
    input: InputObjects.ResetPasswordInput, selection: Selection<T, Objects.Session>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "resetPassword",
      parent: "Mutation",
      type: "Session",
      arguments: [Argument(name: "input", type: "ResetPasswordInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func startOnboarding<T>(
    input: InputObjects.StartOnboardingInput, selection: Selection<T, Objects.Session>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "startOnboarding",
      parent: "Mutation",
      type: "Session",
      arguments: [Argument(name: "input", type: "StartOnboardingInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateSession<T>(
    input: InputObjects.UpdateSessionInput, selection: Selection<T, Objects.Session>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateSession",
      parent: "Mutation",
      type: "Session",
      arguments: [Argument(name: "input", type: "UpdateSessionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createKeyPair<T>(
    input: InputObjects.CreateKeyPairInput, selection: Selection<T, Objects.KeyPair>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createKeyPair",
      parent: "Mutation",
      type: "KeyPair",
      arguments: [Argument(name: "input", type: "CreateKeyPairInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func revokeKeyPair<T>(
    input: InputObjects.RevokeKeyPairInput, selection: Selection<T, Objects.KeyPair>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "revokeKeyPair",
      parent: "Mutation",
      type: "KeyPair",
      arguments: [Argument(name: "input", type: "RevokeKeyPairInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createContact<T>(
    input: InputObjects.CreateContactInput, selection: Selection<T, Objects.Contact>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createContact",
      parent: "Mutation",
      type: "Contact",
      arguments: [Argument(name: "input", type: "CreateContactInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateContact<T>(
    input: InputObjects.UpdateContactInput, selection: Selection<T, Objects.Contact>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateContact",
      parent: "Mutation",
      type: "Contact",
      arguments: [Argument(name: "input", type: "UpdateContactInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyContact<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Contact>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroyContact",
      parent: "Mutation",
      type: "Contact",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func saveContacts<T>(
    input: InputObjects.SaveContactsInput, selection: Selection<T, Objects.SaveContactsResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "saveContacts",
      parent: "Mutation",
      type: "SaveContactsResponse",
      arguments: [Argument(name: "input", type: "SaveContactsInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func subscribeContact<T>(
    input: InputObjects.SubscribeContactInput, selection: Selection<T, Objects.Contact>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "subscribeContact",
      parent: "Mutation",
      type: "Contact",
      arguments: [Argument(name: "input", type: "SubscribeContactInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createExternalTable<T>(
    input: InputObjects.CreateExternalTableInput, selection: Selection<T, Objects.ExternalTable>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createExternalTable",
      parent: "Mutation",
      type: "ExternalTable",
      arguments: [Argument(name: "input", type: "CreateExternalTableInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateExternalTable<T>(
    input: InputObjects.UpdateExternalTableInput, selection: Selection<T, Objects.ExternalTable>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateExternalTable",
      parent: "Mutation",
      type: "ExternalTable",
      arguments: [Argument(name: "input", type: "UpdateExternalTableInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyExternalTable<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ExternalTable>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyExternalTable",
      parent: "Mutation",
      type: "ExternalTable",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func generateExternalTableMenu<T>(
    input: InputObjects.GenerateExternalTableMenuInput,
    selection: Selection<T, Objects.ExternalTable>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "generateExternalTableMenu",
      parent: "Mutation",
      type: "ExternalTable",
      arguments: [Argument(name: "input", type: "GenerateExternalTableMenuInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func addExternalRecord(input: InputObjects.AddExternalRecordInput) throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "addExternalRecord",
      parent: "Mutation",
      arguments: [Argument(name: "input", type: "AddExternalRecordInput!", value: input)]
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func editExternalRecord(input: InputObjects.EditExternalRecordInput) throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "editExternalRecord",
      parent: "Mutation",
      arguments: [Argument(name: "input", type: "EditExternalRecordInput!", value: input)]
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func deleteExternalRecord(input: InputObjects.DeleteExternalRecordInput) throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "deleteExternalRecord",
      parent: "Mutation",
      arguments: [Argument(name: "input", type: "DeleteExternalRecordInput!", value: input)]
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func createExternalColumn<T>(
    input: InputObjects.CreateExternalColumnInput, selection: Selection<T, Objects.ExternalColumn>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createExternalColumn",
      parent: "Mutation",
      type: "ExternalColumn",
      arguments: [Argument(name: "input", type: "CreateExternalColumnInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateExternalColumn<T>(
    input: InputObjects.UpdateExternalColumnInput, selection: Selection<T, Objects.ExternalColumn>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateExternalColumn",
      parent: "Mutation",
      type: "ExternalColumn",
      arguments: [Argument(name: "input", type: "UpdateExternalColumnInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyExternalColumn<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ExternalColumn>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyExternalColumn",
      parent: "Mutation",
      type: "ExternalColumn",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func prepareExternalAsset<T>(
    input: InputObjects.PrepareExternalAssetInput, selection: Selection<T, Objects.ExternalAsset>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "prepareExternalAsset",
      parent: "Mutation",
      type: "ExternalAsset",
      arguments: [Argument(name: "input", type: "PrepareExternalAssetInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func prepareAsset<T>(
    input: InputObjects.PrepareAssetInput, selection: Selection<T, Objects.Asset>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "prepareAsset",
      parent: "Mutation",
      type: "Asset",
      arguments: [Argument(name: "input", type: "PrepareAssetInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createExternalRelationship<T>(
    input: InputObjects.CreateExternalRelationshipInput,
    selection: Selection<T, Objects.ExternalRelationship>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createExternalRelationship",
      parent: "Mutation",
      type: "ExternalRelationship",
      arguments: [Argument(name: "input", type: "CreateExternalRelationshipInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateExternalRelationship<T>(
    input: InputObjects.UpdateExternalRelationshipInput,
    selection: Selection<T, Objects.ExternalRelationship>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateExternalRelationship",
      parent: "Mutation",
      type: "ExternalRelationship",
      arguments: [Argument(name: "input", type: "UpdateExternalRelationshipInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyExternalRelationship<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ExternalRelationship>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyExternalRelationship",
      parent: "Mutation",
      type: "ExternalRelationship",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createExternalPolymorphicView<T>(
    input: InputObjects.CreateExternalPolymorphicViewInput,
    selection: Selection<T, Objects.ExternalPolymorphicView>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createExternalPolymorphicView",
      parent: "Mutation",
      type: "ExternalPolymorphicView",
      arguments: [
        Argument(name: "input", type: "CreateExternalPolymorphicViewInput!", value: input)
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateExternalPolymorphicView<T>(
    input: InputObjects.UpdateExternalPolymorphicViewInput,
    selection: Selection<T, Objects.ExternalPolymorphicView>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateExternalPolymorphicView",
      parent: "Mutation",
      type: "ExternalPolymorphicView",
      arguments: [
        Argument(name: "input", type: "UpdateExternalPolymorphicViewInput!", value: input)
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyExternalPolymorphicView<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ExternalPolymorphicView>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyExternalPolymorphicView",
      parent: "Mutation",
      type: "ExternalPolymorphicView",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateEventType<T>(
    input: InputObjects.UpdateEventTypeInput, selection: Selection<T, Objects.EventType>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateEventType",
      parent: "Mutation",
      type: "EventType",
      arguments: [Argument(name: "input", type: "UpdateEventTypeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createEventType<T>(
    input: InputObjects.CreateEventTypeInput, selection: Selection<T, Objects.EventType>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createEventType",
      parent: "Mutation",
      type: "EventType",
      arguments: [Argument(name: "input", type: "CreateEventTypeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func trackEvent<T>(
    input: InputObjects.TrackEventInput, selection: Selection<T, Objects.TrackEventResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "trackEvent",
      parent: "Mutation",
      type: "TrackEventResponse",
      arguments: [Argument(name: "input", type: "TrackEventInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createResource<T>(
    input: InputObjects.CreateResourceInput, selection: Selection<T, Objects.Resource>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createResource",
      parent: "Mutation",
      type: "Resource",
      arguments: [Argument(name: "input", type: "CreateResourceInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateResource<T>(
    input: InputObjects.UpdateResourceInput, selection: Selection<T, Objects.Resource>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateResource",
      parent: "Mutation",
      type: "Resource",
      arguments: [Argument(name: "input", type: "UpdateResourceInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyResource<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Resource>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyResource",
      parent: "Mutation",
      type: "Resource",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func addRecord(input: InputObjects.AddRecordInput) throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "addRecord",
      parent: "Mutation",
      arguments: [Argument(name: "input", type: "AddRecordInput!", value: input)]
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func editRecord(input: InputObjects.EditRecordInput) throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "editRecord",
      parent: "Mutation",
      arguments: [Argument(name: "input", type: "EditRecordInput!", value: input)]
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func deleteRecord(input: InputObjects.DeleteRecordInput) throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "deleteRecord",
      parent: "Mutation",
      arguments: [Argument(name: "input", type: "DeleteRecordInput!", value: input)]
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func createOperation<T>(
    input: InputObjects.CreateOperationInput, selection: Selection<T, Objects.Operation>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createOperation",
      parent: "Mutation",
      type: "Operation",
      arguments: [Argument(name: "input", type: "CreateOperationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateOperation<T>(
    input: InputObjects.UpdateOperationInput, selection: Selection<T, Objects.Operation>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateOperation",
      parent: "Mutation",
      type: "Operation",
      arguments: [Argument(name: "input", type: "UpdateOperationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createAttribute<T>(
    input: InputObjects.CreateAttributeInput, selection: Selection<T, Objects.Attribute>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createAttribute",
      parent: "Mutation",
      type: "Attribute",
      arguments: [Argument(name: "input", type: "CreateAttributeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateAttribute<T>(
    input: InputObjects.UpdateAttributeInput, selection: Selection<T, Objects.Attribute>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateAttribute",
      parent: "Mutation",
      type: "Attribute",
      arguments: [Argument(name: "input", type: "UpdateAttributeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyAttribute<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Attribute>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyAttribute",
      parent: "Mutation",
      type: "Attribute",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createParameter<T>(
    input: InputObjects.CreateParameterInput, selection: Selection<T, Objects.Parameter>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createParameter",
      parent: "Mutation",
      type: "Parameter",
      arguments: [Argument(name: "input", type: "CreateParameterInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateParameter<T>(
    input: InputObjects.UpdateParameterInput, selection: Selection<T, Objects.Parameter>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateParameter",
      parent: "Mutation",
      type: "Parameter",
      arguments: [Argument(name: "input", type: "UpdateParameterInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyParameter<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Parameter>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyParameter",
      parent: "Mutation",
      type: "Parameter",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createRelationship<T>(
    input: InputObjects.CreateRelationshipInput, selection: Selection<T, Objects.Relationship>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createRelationship",
      parent: "Mutation",
      type: "Relationship",
      arguments: [Argument(name: "input", type: "CreateRelationshipInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateRelationship<T>(
    input: InputObjects.UpdateRelationshipInput, selection: Selection<T, Objects.Relationship>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateRelationship",
      parent: "Mutation",
      type: "Relationship",
      arguments: [Argument(name: "input", type: "UpdateRelationshipInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyRelationship<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Relationship>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyRelationship",
      parent: "Mutation",
      type: "Relationship",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateFlow<T>(input: InputObjects.UpdateFlowInput, selection: Selection<T, Objects.Flow>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "updateFlow",
      parent: "Mutation",
      type: "Flow",
      arguments: [Argument(name: "input", type: "UpdateFlowInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createFlow<T>(input: InputObjects.CreateFlowInput, selection: Selection<T, Objects.Flow>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "createFlow",
      parent: "Mutation",
      type: "Flow",
      arguments: [Argument(name: "input", type: "CreateFlowInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createFlowVersion<T>(
    input: InputObjects.CreateFlowVersionInput, selection: Selection<T, Objects.FlowVersion>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createFlowVersion",
      parent: "Mutation",
      type: "FlowVersion",
      arguments: [Argument(name: "input", type: "CreateFlowVersionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateFlowVersion<T>(
    input: InputObjects.UpdateFlowVersionInput, selection: Selection<T, Objects.FlowVersion>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateFlowVersion",
      parent: "Mutation",
      type: "FlowVersion",
      arguments: [Argument(name: "input", type: "UpdateFlowVersionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func publishFlowVersion<T>(
    input: InputObjects.PublishFlowVersionInput, selection: Selection<T, Objects.FlowVersion>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "publishFlowVersion",
      parent: "Mutation",
      type: "FlowVersion",
      arguments: [Argument(name: "input", type: "PublishFlowVersionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func unpublishFlowVersion<T>(
    input: InputObjects.UnpublishFlowVersionInput, selection: Selection<T, Objects.FlowVersion>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "unpublishFlowVersion",
      parent: "Mutation",
      type: "FlowVersion",
      arguments: [Argument(name: "input", type: "UnpublishFlowVersionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func duplicateFlowVersion<T>(
    input: InputObjects.DuplicateFlowVersionInput, selection: Selection<T, Objects.FlowVersion>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "duplicateFlowVersion",
      parent: "Mutation",
      type: "FlowVersion",
      arguments: [Argument(name: "input", type: "DuplicateFlowVersionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createContent<T>(
    input: InputObjects.CreateContentInput, selection: Selection<T, Objects.CustomContent>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createContent",
      parent: "Mutation",
      type: "CustomContent",
      arguments: [Argument(name: "input", type: "CreateContentInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateContent<T>(
    input: InputObjects.UpdateContentInput, selection: Selection<T, Objects.CustomContent>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateContent",
      parent: "Mutation",
      type: "CustomContent",
      arguments: [Argument(name: "input", type: "UpdateContentInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyContent<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.CustomContent>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyContent",
      parent: "Mutation",
      type: "CustomContent",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func addContent<T>(
    input: InputObjects.AddContentInput, selection: Selection<T, Objects.CustomContent>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "addContent",
      parent: "Mutation",
      type: "CustomContent",
      arguments: [Argument(name: "input", type: "AddContentInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func editContent<T>(
    input: InputObjects.EditContentInput, selection: Selection<T, Objects.CustomContent>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "editContent",
      parent: "Mutation",
      type: "CustomContent",
      arguments: [Argument(name: "input", type: "EditContentInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func publishContentVersion<T>(
    input: InputObjects.PublishContentVersionInput, selection: Selection<T, Objects.CustomContent>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "publishContentVersion",
      parent: "Mutation",
      type: "CustomContent",
      arguments: [Argument(name: "input", type: "PublishContentVersionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func unpublishContentVersion<T>(
    input: InputObjects.UnpublishContentVersionInput, selection: Selection<T, Objects.CustomContent>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "unpublishContentVersion",
      parent: "Mutation",
      type: "CustomContent",
      arguments: [Argument(name: "input", type: "UnpublishContentVersionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createContentType<T>(
    input: InputObjects.CreateContentTypeInput, selection: Selection<T, Objects.ContentType>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createContentType",
      parent: "Mutation",
      type: "ContentType",
      arguments: [Argument(name: "input", type: "CreateContentTypeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateContentType<T>(
    input: InputObjects.UpdateContentTypeInput, selection: Selection<T, Objects.ContentType>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateContentType",
      parent: "Mutation",
      type: "ContentType",
      arguments: [Argument(name: "input", type: "UpdateContentTypeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyContentType<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ContentType>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyContentType",
      parent: "Mutation",
      type: "ContentType",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createField<T>(input: InputObjects.CreateFieldInput, selection: Selection<T, Objects.Field>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "createField",
      parent: "Mutation",
      type: "Field",
      arguments: [Argument(name: "input", type: "CreateFieldInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateField<T>(input: InputObjects.UpdateFieldInput, selection: Selection<T, Objects.Field>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "updateField",
      parent: "Mutation",
      type: "Field",
      arguments: [Argument(name: "input", type: "UpdateFieldInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyField<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Field>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroyField",
      parent: "Mutation",
      type: "Field",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyMedium<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Medium>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroyMedium",
      parent: "Mutation",
      type: "Medium",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createMedium<T>(
    input: InputObjects.CreateMediumInput, selection: Selection<T, Objects.Medium>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createMedium",
      parent: "Mutation",
      type: "Medium",
      arguments: [Argument(name: "input", type: "CreateMediumInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateMedium<T>(
    input: InputObjects.UpdateMediumInput, selection: Selection<T, Objects.Medium>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateMedium",
      parent: "Mutation",
      type: "Medium",
      arguments: [Argument(name: "input", type: "UpdateMediumInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func restoreContentVersion<T>(
    input: InputObjects.RestoreContentVersionInput, selection: Selection<T, Objects.CustomContent>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "restoreContentVersion",
      parent: "Mutation",
      type: "CustomContent",
      arguments: [Argument(name: "input", type: "RestoreContentVersionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createDelivery<T>(
    input: InputObjects.CreateDeliveryInput, selection: Selection<T, Objects.Delivery>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createDelivery",
      parent: "Mutation",
      type: "Delivery",
      arguments: [Argument(name: "input", type: "CreateDeliveryInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateDelivery<T>(
    input: InputObjects.UpdateDeliveryInput, selection: Selection<T, Objects.Delivery>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateDelivery",
      parent: "Mutation",
      type: "Delivery",
      arguments: [Argument(name: "input", type: "UpdateDeliveryInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func startDelivery<T>(
    input: InputObjects.StartDeliveryInput, selection: Selection<T, Objects.Delivery>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "startDelivery",
      parent: "Mutation",
      type: "Delivery",
      arguments: [Argument(name: "input", type: "StartDeliveryInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyDelivery<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Delivery>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyDelivery",
      parent: "Mutation",
      type: "Delivery",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createRecipient<T>(
    input: InputObjects.CreateRecipientInput, selection: Selection<T, Objects.Recipient>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createRecipient",
      parent: "Mutation",
      type: "Recipient",
      arguments: [Argument(name: "input", type: "CreateRecipientInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateRecipient<T>(
    input: InputObjects.UpdateRecipientInput, selection: Selection<T, Objects.Recipient>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateRecipient",
      parent: "Mutation",
      type: "Recipient",
      arguments: [Argument(name: "input", type: "UpdateRecipientInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyRecipient<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Recipient>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyRecipient",
      parent: "Mutation",
      type: "Recipient",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func trackNotification<T>(
    input: InputObjects.TrackNotificationInput,
    selection: Selection<T, Objects.TrackNotificationResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "trackNotification",
      parent: "Mutation",
      type: "TrackNotificationResponse",
      arguments: [Argument(name: "input", type: "TrackNotificationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updatePreference<T>(
    input: InputObjects.UpdatePreferenceInput, selection: Selection<T, Objects.Preference>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updatePreference",
      parent: "Mutation",
      type: "Preference",
      arguments: [Argument(name: "input", type: "UpdatePreferenceInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createPreference<T>(
    input: InputObjects.CreatePreferenceInput, selection: Selection<T, Objects.Preference>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createPreference",
      parent: "Mutation",
      type: "Preference",
      arguments: [Argument(name: "input", type: "CreatePreferenceInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyPreference<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Preference>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyPreference",
      parent: "Mutation",
      type: "Preference",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateStoredPreference<T>(
    input: InputObjects.UpdateStoredPreferenceInput,
    selection: Selection<T, Objects.StoredPreference>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateStoredPreference",
      parent: "Mutation",
      type: "StoredPreference",
      arguments: [Argument(name: "input", type: "UpdateStoredPreferenceInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createStoredPreference<T>(
    input: InputObjects.CreateStoredPreferenceInput,
    selection: Selection<T, Objects.StoredPreference>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createStoredPreference",
      parent: "Mutation",
      type: "StoredPreference",
      arguments: [Argument(name: "input", type: "CreateStoredPreferenceInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyStoredPreference<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.StoredPreference>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyStoredPreference",
      parent: "Mutation",
      type: "StoredPreference",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func saveStoredPreferences<T>(
    input: InputObjects.SaveStoredPreferencesInput,
    selection: Selection<T, Objects.SaveStoredPreferencesResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "saveStoredPreferences",
      parent: "Mutation",
      type: "SaveStoredPreferencesResponse",
      arguments: [Argument(name: "input", type: "SaveStoredPreferencesInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createItem<T>(input: InputObjects.CreateItemInput, selection: Selection<T, Objects.Item>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "createItem",
      parent: "Mutation",
      type: "Item",
      arguments: [Argument(name: "input", type: "CreateItemInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateItem<T>(input: InputObjects.UpdateItemInput, selection: Selection<T, Objects.Item>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "updateItem",
      parent: "Mutation",
      type: "Item",
      arguments: [Argument(name: "input", type: "UpdateItemInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyItem<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Item>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroyItem",
      parent: "Mutation",
      type: "Item",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createPricing<T>(
    input: InputObjects.CreatePricingInput, selection: Selection<T, Objects.Pricing>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createPricing",
      parent: "Mutation",
      type: "Pricing",
      arguments: [Argument(name: "input", type: "CreatePricingInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updatePricing<T>(
    input: InputObjects.UpdatePricingInput, selection: Selection<T, Objects.Pricing>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updatePricing",
      parent: "Mutation",
      type: "Pricing",
      arguments: [Argument(name: "input", type: "UpdatePricingInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyPricing<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Pricing>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroyPricing",
      parent: "Mutation",
      type: "Pricing",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createItemCategory<T>(
    input: InputObjects.CreateItemCategoryInput, selection: Selection<T, Objects.ItemCategory>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createItemCategory",
      parent: "Mutation",
      type: "ItemCategory",
      arguments: [Argument(name: "input", type: "CreateItemCategoryInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateItemCategory<T>(
    input: InputObjects.UpdateItemCategoryInput, selection: Selection<T, Objects.ItemCategory>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateItemCategory",
      parent: "Mutation",
      type: "ItemCategory",
      arguments: [Argument(name: "input", type: "UpdateItemCategoryInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyItemCategory<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ItemCategory>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyItemCategory",
      parent: "Mutation",
      type: "ItemCategory",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createItemCategoryMembership<T>(
    input: InputObjects.CreateItemCategoryMembershipInput,
    selection: Selection<T, Objects.ItemCategoryMembership>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createItemCategoryMembership",
      parent: "Mutation",
      type: "ItemCategoryMembership",
      arguments: [
        Argument(name: "input", type: "CreateItemCategoryMembershipInput!", value: input)
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateItemCategoryMembership<T>(
    input: InputObjects.UpdateItemCategoryMembershipInput,
    selection: Selection<T, Objects.ItemCategoryMembership>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateItemCategoryMembership",
      parent: "Mutation",
      type: "ItemCategoryMembership",
      arguments: [
        Argument(name: "input", type: "UpdateItemCategoryMembershipInput!", value: input)
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyItemCategoryMembership<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ItemCategoryMembership>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyItemCategoryMembership",
      parent: "Mutation",
      type: "ItemCategoryMembership",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createCoupon<T>(
    input: InputObjects.CreateCouponInput, selection: Selection<T, Objects.Coupon>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createCoupon",
      parent: "Mutation",
      type: "Coupon",
      arguments: [Argument(name: "input", type: "CreateCouponInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateCoupon<T>(
    input: InputObjects.UpdateCouponInput, selection: Selection<T, Objects.Coupon>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateCoupon",
      parent: "Mutation",
      type: "Coupon",
      arguments: [Argument(name: "input", type: "UpdateCouponInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyCoupon<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Coupon>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroyCoupon",
      parent: "Mutation",
      type: "Coupon",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createCouponCode<T>(
    input: InputObjects.CreateCouponCodeInput, selection: Selection<T, Objects.CouponCode>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createCouponCode",
      parent: "Mutation",
      type: "CouponCode",
      arguments: [Argument(name: "input", type: "CreateCouponCodeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateCouponCode<T>(
    input: InputObjects.UpdateCouponCodeInput, selection: Selection<T, Objects.CouponCode>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateCouponCode",
      parent: "Mutation",
      type: "CouponCode",
      arguments: [Argument(name: "input", type: "UpdateCouponCodeInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyCouponCode<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.CouponCode>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyCouponCode",
      parent: "Mutation",
      type: "CouponCode",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createCouponRestriction<T>(
    input: InputObjects.CreateCouponRestrictionInput,
    selection: Selection<T, Objects.CouponRestriction>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createCouponRestriction",
      parent: "Mutation",
      type: "CouponRestriction",
      arguments: [Argument(name: "input", type: "CreateCouponRestrictionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateCouponRestriction<T>(
    input: InputObjects.UpdateCouponRestrictionInput,
    selection: Selection<T, Objects.CouponRestriction>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateCouponRestriction",
      parent: "Mutation",
      type: "CouponRestriction",
      arguments: [Argument(name: "input", type: "UpdateCouponRestrictionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyCouponRestriction<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.CouponRestriction>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyCouponRestriction",
      parent: "Mutation",
      type: "CouponRestriction",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createCouponRedemption<T>(
    input: InputObjects.CreateCouponRedemptionInput,
    selection: Selection<T, Objects.CouponRedemption>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createCouponRedemption",
      parent: "Mutation",
      type: "CouponRedemption",
      arguments: [Argument(name: "input", type: "CreateCouponRedemptionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateCouponRedemption<T>(
    input: InputObjects.UpdateCouponRedemptionInput,
    selection: Selection<T, Objects.CouponRedemption>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateCouponRedemption",
      parent: "Mutation",
      type: "CouponRedemption",
      arguments: [Argument(name: "input", type: "UpdateCouponRedemptionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyCouponRedemption<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.CouponRedemption>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyCouponRedemption",
      parent: "Mutation",
      type: "CouponRedemption",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createOrder<T>(input: InputObjects.CreateOrderInput, selection: Selection<T, Objects.Order>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "createOrder",
      parent: "Mutation",
      type: "Order",
      arguments: [Argument(name: "input", type: "CreateOrderInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateOrder<T>(input: InputObjects.UpdateOrderInput, selection: Selection<T, Objects.Order>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "updateOrder",
      parent: "Mutation",
      type: "Order",
      arguments: [Argument(name: "input", type: "UpdateOrderInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyOrder<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Order>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroyOrder",
      parent: "Mutation",
      type: "Order",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func transferCart<T>(
    input: InputObjects.TransferCartInput, selection: Selection<T, Objects.Order>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "transferCart",
      parent: "Mutation",
      type: "Order",
      arguments: [Argument(name: "input", type: "TransferCartInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func addItemToCart<T>(
    input: InputObjects.AddItemToCartInput, selection: Selection<T, Objects.Order>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "addItemToCart",
      parent: "Mutation",
      type: "Order",
      arguments: [Argument(name: "input", type: "AddItemToCartInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func editItemInCart<T>(
    input: InputObjects.EditItemInCartInput, selection: Selection<T, Objects.Order>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "editItemInCart",
      parent: "Mutation",
      type: "Order",
      arguments: [Argument(name: "input", type: "EditItemInCartInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func removeItemFromCart<T>(
    input: InputObjects.RemoveItemFromCartInput, selection: Selection<T, Objects.Order>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "removeItemFromCart",
      parent: "Mutation",
      type: "Order",
      arguments: [Argument(name: "input", type: "RemoveItemFromCartInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func applyCouponToCart<T>(
    input: InputObjects.ApplyCouponToCartInput, selection: Selection<T, Objects.Order>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "applyCouponToCart",
      parent: "Mutation",
      type: "Order",
      arguments: [Argument(name: "input", type: "ApplyCouponToCartInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func removeCouponFromCart<T>(
    input: InputObjects.RemoveCouponFromCartInput, selection: Selection<T, Objects.Order>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "removeCouponFromCart",
      parent: "Mutation",
      type: "Order",
      arguments: [Argument(name: "input", type: "RemoveCouponFromCartInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func checkoutCart<T>(
    input: InputObjects.CheckoutCartInput, selection: Selection<T, Objects.Order>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "checkoutCart",
      parent: "Mutation",
      type: "Order",
      arguments: [Argument(name: "input", type: "CheckoutCartInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func capturePayment<T>(
    input: InputObjects.CapturePaymentInput, selection: Selection<T, Objects.Order>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "capturePayment",
      parent: "Mutation",
      type: "Order",
      arguments: [Argument(name: "input", type: "CapturePaymentInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createOrderItem<T>(
    input: InputObjects.CreateOrderItemInput, selection: Selection<T, Objects.OrderItem>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createOrderItem",
      parent: "Mutation",
      type: "OrderItem",
      arguments: [Argument(name: "input", type: "CreateOrderItemInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateOrderItem<T>(
    input: InputObjects.UpdateOrderItemInput, selection: Selection<T, Objects.OrderItem>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateOrderItem",
      parent: "Mutation",
      type: "OrderItem",
      arguments: [Argument(name: "input", type: "UpdateOrderItemInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyOrderItem<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.OrderItem>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyOrderItem",
      parent: "Mutation",
      type: "OrderItem",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createTransaction<T>(
    input: InputObjects.CreateTransactionInput, selection: Selection<T, Objects.Transaction>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createTransaction",
      parent: "Mutation",
      type: "Transaction",
      arguments: [Argument(name: "input", type: "CreateTransactionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateTransaction<T>(
    input: InputObjects.UpdateTransactionInput, selection: Selection<T, Objects.Transaction>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateTransaction",
      parent: "Mutation",
      type: "Transaction",
      arguments: [Argument(name: "input", type: "UpdateTransactionInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyTransaction<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Transaction>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyTransaction",
      parent: "Mutation",
      type: "Transaction",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createRole<T>(input: InputObjects.CreateRoleInput, selection: Selection<T, Objects.Role>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "createRole",
      parent: "Mutation",
      type: "Role",
      arguments: [Argument(name: "input", type: "CreateRoleInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateRole<T>(input: InputObjects.UpdateRoleInput, selection: Selection<T, Objects.Role>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "updateRole",
      parent: "Mutation",
      type: "Role",
      arguments: [Argument(name: "input", type: "UpdateRoleInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyRole<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Role>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroyRole",
      parent: "Mutation",
      type: "Role",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createRoleMembership<T>(
    input: InputObjects.CreateRoleMembershipInput, selection: Selection<T, Objects.RoleMembership>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createRoleMembership",
      parent: "Mutation",
      type: "RoleMembership",
      arguments: [Argument(name: "input", type: "CreateRoleMembershipInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroyRoleMembership<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.RoleMembership>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "destroyRoleMembership",
      parent: "Mutation",
      type: "RoleMembership",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createSegment<T>(
    input: InputObjects.CreateSegmentInput, selection: Selection<T, Objects.Segment>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "createSegment",
      parent: "Mutation",
      type: "Segment",
      arguments: [Argument(name: "input", type: "CreateSegmentInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func updateSegment<T>(
    input: InputObjects.UpdateSegmentInput, selection: Selection<T, Objects.Segment>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "updateSegment",
      parent: "Mutation",
      type: "Segment",
      arguments: [Argument(name: "input", type: "UpdateSegmentInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func destroySegment<T>(input: InputObjects.GenericInput, selection: Selection<T, Objects.Segment>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "destroySegment",
      parent: "Mutation",
      type: "Segment",
      arguments: [Argument(name: "input", type: "GenericInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Mutation<T> = Selection<T, Objects.Mutation>
}
extension Objects {
  struct Notification {}
}

extension Fields where TypeLock == Objects.Notification {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func deliveryId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "deliveryId",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func integrationId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "integrationId",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func data() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "data",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func renderedContent() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "renderedContent",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func report() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "report",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func failedSendAttempts() throws -> Int {
    let field = GraphQLField.leaf(
      field: "failedSendAttempts",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func lastSendFailureAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "lastSendFailureAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func sentAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "sentAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func deliveredAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "deliveredAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func firstOpenedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "firstOpenedAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func externalUid() throws -> String? {
    let field = GraphQLField.leaf(
      field: "externalUid",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func queuedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "queuedAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func lastDeliveryFailureAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "lastDeliveryFailureAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func failedDeliveryAttempts() throws -> Int? {
    let field = GraphQLField.leaf(
      field: "failedDeliveryAttempts",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func failedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "failedAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func failureReason() throws -> String? {
    let field = GraphQLField.leaf(
      field: "failureReason",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func firstClickedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "firstClickedAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func complainedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "complainedAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func unsubscribedAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "unsubscribedAt",
      parent: "Notification",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func delivery<T>(selection: Selection<T, Objects.Delivery>) throws -> T {
    let field = GraphQLField.composite(
      field: "delivery",
      parent: "Notification",
      type: "Delivery",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func notificationRecipients<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.NotificationRecipient]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "notificationRecipients",
      parent: "Notification",
      type: "NotificationRecipient",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Notification<T> = Selection<T, Objects.Notification>
}
extension Objects {
  struct NotificationLog {}
}

extension Fields where TypeLock == Objects.NotificationLog {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "NotificationLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func notificationId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "notificationId",
      parent: "NotificationLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func integrationId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "integrationId",
      parent: "NotificationLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func category() throws -> Enums.NotificationLogCategory {
    let field = GraphQLField.leaf(
      field: "category",
      parent: "NotificationLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.NotificationLogCategory(from: $0) }
    case .selecting:
      return Enums.NotificationLogCategory.mockValue
    }
  }

  func subcategory() throws -> Enums.NotificationLogSubcategory? {
    let field = GraphQLField.leaf(
      field: "subcategory",
      parent: "NotificationLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) {
        try Enums.NotificationLogSubcategory?(from: $0)
      }
    case .selecting:
      return nil
    }
  }

  func data() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "data",
      parent: "NotificationLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func timestamp() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "timestamp",
      parent: "NotificationLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "NotificationLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "NotificationLog",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func notification<T>(selection: Selection<T, Objects.Notification>) throws -> T {
    let field = GraphQLField.composite(
      field: "notification",
      parent: "NotificationLog",
      type: "Notification",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func integration<T>(selection: Selection<T, Objects.Installation>) throws -> T {
    let field = GraphQLField.composite(
      field: "integration",
      parent: "NotificationLog",
      type: "Installation",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias NotificationLog<T> = Selection<T, Objects.NotificationLog>
}
extension Objects {
  struct NotificationRecipient {}
}

extension Fields where TypeLock == Objects.NotificationRecipient {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "NotificationRecipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func notificationId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "notificationId",
      parent: "NotificationRecipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func recipientId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "recipientId",
      parent: "NotificationRecipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func contactId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "contactId",
      parent: "NotificationRecipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func contact() throws -> String {
    let field = GraphQLField.leaf(
      field: "contact",
      parent: "NotificationRecipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func readAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "readAt",
      parent: "NotificationRecipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func externalUid() throws -> String? {
    let field = GraphQLField.leaf(
      field: "externalUid",
      parent: "NotificationRecipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "NotificationRecipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "NotificationRecipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func recipient<T>(selection: Selection<T, Objects.Recipient>) throws -> T {
    let field = GraphQLField.composite(
      field: "recipient",
      parent: "NotificationRecipient",
      type: "Recipient",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias NotificationRecipient<T> = Selection<T, Objects.NotificationRecipient>
}
extension Objects {
  struct Operation {}
}

extension Fields where TypeLock == Objects.Operation {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func resourceId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "resourceId",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func description() throws -> String? {
    let field = GraphQLField.leaf(
      field: "description",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func icon() throws -> String? {
    let field = GraphQLField.leaf(
      field: "icon",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func behavior() throws -> Enums.OperationBehavior {
    let field = GraphQLField.leaf(
      field: "behavior",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.OperationBehavior(from: $0) }
    case .selecting:
      return Enums.OperationBehavior.mockValue
    }
  }

  func kind() throws -> Enums.OperationKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.OperationKind(from: $0) }
    case .selecting:
      return Enums.OperationKind.mockValue
    }
  }

  func actsOn() throws -> Enums.OperationActsOn? {
    let field = GraphQLField.leaf(
      field: "actsOn",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.OperationActsOn?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func parameters() throws -> [JSONScalar] {
    let field = GraphQLField.leaf(
      field: "parameters",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func behaviorInstallationId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "behaviorInstallationId",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func behaviorOperationId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "behaviorOperationId",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func behaviorArguments() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "behaviorArguments",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func appId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "appId",
      parent: "Operation",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func resource<T>(selection: Selection<T, Objects.Resource?>) throws -> T {
    let field = GraphQLField.composite(
      field: "resource",
      parent: "Operation",
      type: "Resource",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func app<T>(selection: Selection<T, Objects.App?>) throws -> T {
    let field = GraphQLField.composite(
      field: "app",
      parent: "Operation",
      type: "App",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Operation<T> = Selection<T, Objects.Operation>
}
extension Objects {
  struct Order {}
}

extension Fields where TypeLock == Objects.Order {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func accountId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "accountId",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func gatewayId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "gatewayId",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func gatewayMeta() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "gatewayMeta",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func subtotal() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "subtotal",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func discount() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "discount",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func tax() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "tax",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func total() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "total",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func status() throws -> Enums.OrderStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.OrderStatus(from: $0) }
    case .selecting:
      return Enums.OrderStatus.mockValue
    }
  }

  func paidAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "paidAt",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func checkedOutAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "checkedOutAt",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func currencyCode() throws -> String {
    let field = GraphQLField.leaf(
      field: "currencyCode",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func createdById() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "createdById",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func environmentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "environmentId",
      parent: "Order",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func orderItems<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.OrderItem]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "orderItems",
      parent: "Order",
      type: "OrderItem",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponRedemptions<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.CouponRedemption]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "couponRedemptions",
      parent: "Order",
      type: "CouponRedemption",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func account<T>(selection: Selection<T, Objects.Account?>) throws -> T {
    let field = GraphQLField.composite(
      field: "account",
      parent: "Order",
      type: "Account",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createdBy<T>(selection: Selection<T, Objects.Account?>) throws -> T {
    let field = GraphQLField.composite(
      field: "createdBy",
      parent: "Order",
      type: "Account",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Order<T> = Selection<T, Objects.Order>
}
extension Objects {
  struct OrderItem {}
}

extension Fields where TypeLock == Objects.OrderItem {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func orderId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "orderId",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func itemId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "itemId",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func pricingId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "pricingId",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func quantity() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "quantity",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func unitPrice() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "unitPrice",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func subtotal() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "subtotal",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func discount() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "discount",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func tax() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "tax",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func total() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "total",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func custom() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "custom",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func currencyCode() throws -> String {
    let field = GraphQLField.leaf(
      field: "currencyCode",
      parent: "OrderItem",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func order<T>(selection: Selection<T, Objects.Order>) throws -> T {
    let field = GraphQLField.composite(
      field: "order",
      parent: "OrderItem",
      type: "Order",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func item<T>(selection: Selection<T, Objects.Item>) throws -> T {
    let field = GraphQLField.composite(
      field: "item",
      parent: "OrderItem",
      type: "Item",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func pricing<T>(selection: Selection<T, Objects.Pricing>) throws -> T {
    let field = GraphQLField.composite(
      field: "pricing",
      parent: "OrderItem",
      type: "Pricing",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias OrderItem<T> = Selection<T, Objects.OrderItem>
}
extension Objects {
  struct OrdersAggregateByItemsResponse {}
}

extension Fields where TypeLock == Objects.OrdersAggregateByItemsResponse {

  func count() throws -> Int? {
    let field = GraphQLField.leaf(
      field: "count",
      parent: "OrdersAggregateByItemsResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int?(from: $0) }
    case .selecting:
      return nil
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias OrdersAggregateByItemsResponse<T> = Selection<T, Objects.OrdersAggregateByItemsResponse>
}
extension Objects {
  struct Parameter {}
}

extension Fields where TypeLock == Objects.Parameter {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func operationId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "operationId",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func attributeId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "attributeId",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func fieldType() throws -> String? {
    let field = GraphQLField.leaf(
      field: "fieldType",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func isNullable() throws -> Bool? {
    let field = GraphQLField.leaf(
      field: "isNullable",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func isRepeatable() throws -> Bool? {
    let field = GraphQLField.leaf(
      field: "isRepeatable",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func validations() throws -> [JSONScalar] {
    let field = GraphQLField.leaf(
      field: "validations",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func defaultValue() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "defaultValue",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func position() throws -> Int? {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func placeholder() throws -> String? {
    let field = GraphQLField.leaf(
      field: "placeholder",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func helpText() throws -> String? {
    let field = GraphQLField.leaf(
      field: "helpText",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Parameter",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func operation<T>(selection: Selection<T, Objects.Operation>) throws -> T {
    let field = GraphQLField.composite(
      field: "operation",
      parent: "Parameter",
      type: "Operation",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func attribute<T>(selection: Selection<T, Objects.Attribute?>) throws -> T {
    let field = GraphQLField.composite(
      field: "attribute",
      parent: "Parameter",
      type: "Attribute",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Parameter<T> = Selection<T, Objects.Parameter>
}
extension Objects {
  struct ParseIdentityTokenResponse {}
}

extension Fields where TypeLock == Objects.ParseIdentityTokenResponse {

  func kind() throws -> String {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "ParseIdentityTokenResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func uid() throws -> String {
    let field = GraphQLField.leaf(
      field: "uid",
      parent: "ParseIdentityTokenResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ParseIdentityTokenResponse<T> = Selection<T, Objects.ParseIdentityTokenResponse>
}
extension Objects {
  struct Preference {}
}

extension Fields where TypeLock == Objects.Preference {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Preference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Preference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Preference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func restrictions() throws -> [UUIDScalar] {
    let field = GraphQLField.leaf(
      field: "restrictions",
      parent: "Preference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [UUIDScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Preference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Preference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func isEnabledByDefault() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isEnabledByDefault",
      parent: "Preference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Preference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func preferenceRestrictions<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.PreferenceRestriction]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "preferenceRestrictions",
      parent: "Preference",
      type: "PreferenceRestriction",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Preference<T> = Selection<T, Objects.Preference>
}
extension Objects {
  struct PreferenceRestriction {}
}

extension Fields where TypeLock == Objects.PreferenceRestriction {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "PreferenceRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func preferenceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "preferenceId",
      parent: "PreferenceRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func contentId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "contentId",
      parent: "PreferenceRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "PreferenceRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "PreferenceRestriction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func content<T>(selection: Selection<T, Objects.CustomContent>) throws -> T {
    let field = GraphQLField.composite(
      field: "content",
      parent: "PreferenceRestriction",
      type: "CustomContent",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias PreferenceRestriction<T> = Selection<T, Objects.PreferenceRestriction>
}
extension Objects {
  struct PrepareMediumResponse {}
}

extension Fields where TypeLock == Objects.PrepareMediumResponse {

  func presignedUrl() throws -> String {
    let field = GraphQLField.leaf(
      field: "presignedUrl",
      parent: "PrepareMediumResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias PrepareMediumResponse<T> = Selection<T, Objects.PrepareMediumResponse>
}
extension Objects {
  struct Pricing {}
}

extension Fields where TypeLock == Objects.Pricing {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func itemId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "itemId",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func amount() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "amount",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func currencyCode() throws -> String {
    let field = GraphQLField.leaf(
      field: "currencyCode",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func isRecurring() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isRecurring",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func recurringInterval() throws -> Int {
    let field = GraphQLField.leaf(
      field: "recurringInterval",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func recurringIntervalUnit() throws -> Enums.PricingRecurringIntervalUnit {
    let field = GraphQLField.leaf(
      field: "recurringIntervalUnit",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) {
        try Enums.PricingRecurringIntervalUnit(from: $0)
      }
    case .selecting:
      return Enums.PricingRecurringIntervalUnit.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func originalAmount() throws -> DecimalScalar? {
    let field = GraphQLField.leaf(
      field: "originalAmount",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func kind() throws -> Enums.PricingKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.PricingKind(from: $0) }
    case .selecting:
      return Enums.PricingKind.mockValue
    }
  }

  func appleProductIdentifier() throws -> String? {
    let field = GraphQLField.leaf(
      field: "appleProductIdentifier",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func googleProductIdentifier() throws -> String? {
    let field = GraphQLField.leaf(
      field: "googleProductIdentifier",
      parent: "Pricing",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func item<T>(selection: Selection<T, Objects.Item>) throws -> T {
    let field = GraphQLField.composite(
      field: "item",
      parent: "Pricing",
      type: "Item",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Pricing<T> = Selection<T, Objects.Pricing>
}
extension Objects {
  struct Prospect {}
}

extension Fields where TypeLock == Objects.Prospect {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Prospect",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func email() throws -> String {
    let field = GraphQLField.leaf(
      field: "email",
      parent: "Prospect",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func code() throws -> String? {
    let field = GraphQLField.leaf(
      field: "code",
      parent: "Prospect",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func codeExpiresAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "codeExpiresAt",
      parent: "Prospect",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func token() throws -> String? {
    let field = GraphQLField.leaf(
      field: "token",
      parent: "Prospect",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func expiresAt() throws -> DateTimeScalar? {
    let field = GraphQLField.leaf(
      field: "expiresAt",
      parent: "Prospect",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Prospect",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Prospect",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Prospect<T> = Selection<T, Objects.Prospect>
}
extension Objects {
  struct Query {}
}

extension Fields where TypeLock == Objects.Query {

  func workspace<T>(hostname: String, selection: Selection<T, Objects.Workspace>) throws -> T {
    let field = GraphQLField.composite(
      field: "workspace",
      parent: "Query",
      type: "Workspace",
      arguments: [Argument(name: "hostname", type: "String!", value: hostname)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func workspacesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Workspace]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "workspacesList",
      parent: "Query",
      type: "Workspace",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func workspacesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "workspacesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func generateIdentityToken<T>(
    input: InputObjects.GenerateIdentityTokenInput,
    selection: Selection<T, Objects.GenerateIdentityTokenResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "generateIdentityToken",
      parent: "Query",
      type: "GenerateIdentityTokenResponse",
      arguments: [Argument(name: "input", type: "GenerateIdentityTokenInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func parseIdentityToken<T>(
    input: InputObjects.ParseIdentityTokenInput,
    selection: Selection<T, Objects.ParseIdentityTokenResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "parseIdentityToken",
      parent: "Query",
      type: "ParseIdentityTokenResponse",
      arguments: [Argument(name: "input", type: "ParseIdentityTokenInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func validateKeyPair<T>(
    input: InputObjects.ValidateKeyPairInput,
    selection: Selection<T, Objects.ValidateKeyPairResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "validateKeyPair",
      parent: "Query",
      type: "ValidateKeyPairResponse",
      arguments: [Argument(name: "input", type: "ValidateKeyPairInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func app<T>(id: UUIDScalar, selection: Selection<T, Objects.App>) throws -> T {
    let field = GraphQLField.composite(
      field: "app",
      parent: "Query",
      type: "App",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func appsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.App]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "appsList",
      parent: "Query",
      type: "App",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func appsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "appsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func appCategoriesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.AppCategory]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "appCategoriesList",
      parent: "Query",
      type: "AppCategory",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func appCategoriesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "appCategoriesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func appCategory<T>(id: UUIDScalar, selection: Selection<T, Objects.AppCategory>) throws -> T {
    let field = GraphQLField.composite(
      field: "appCategory",
      parent: "Query",
      type: "AppCategory",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func environment<T>(id: UUIDScalar, selection: Selection<T, Objects.Environment>) throws -> T {
    let field = GraphQLField.composite(
      field: "environment",
      parent: "Query",
      type: "Environment",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func environmentsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Environment]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "environmentsList",
      parent: "Query",
      type: "Environment",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func environmentsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "environmentsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func installation<T>(id: UUIDScalar, selection: Selection<T, Objects.Installation>) throws -> T {
    let field = GraphQLField.composite(
      field: "installation",
      parent: "Query",
      type: "Installation",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func resolveInstallation<T>(
    input: InputObjects.ResolveInstallationInput, selection: Selection<T, Objects.Installation>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "resolveInstallation",
      parent: "Query",
      type: "Installation",
      arguments: [Argument(name: "input", type: "ResolveInstallationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func installationsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Installation]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "installationsList",
      parent: "Query",
      type: "Installation",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func installationsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "installationsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func configuration<T>(id: UUIDScalar, selection: Selection<T, Objects.Configuration>) throws -> T
  {
    let field = GraphQLField.composite(
      field: "configuration",
      parent: "Query",
      type: "Configuration",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func configurationsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Configuration]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "configurationsList",
      parent: "Query",
      type: "Configuration",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func configurationsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "configurationsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func dashboard<T>(id: UUIDScalar, selection: Selection<T, Objects.Dashboard>) throws -> T {
    let field = GraphQLField.composite(
      field: "dashboard",
      parent: "Query",
      type: "Dashboard",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func dashboardsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Dashboard]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "dashboardsList",
      parent: "Query",
      type: "Dashboard",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func dashboardsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "dashboardsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func view<T>(id: UUIDScalar, selection: Selection<T, Objects.View>) throws -> T {
    let field = GraphQLField.composite(
      field: "view",
      parent: "Query",
      type: "View",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func viewsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.View]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "viewsList",
      parent: "Query",
      type: "View",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func viewsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "viewsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func menuElement<T>(id: UUIDScalar, selection: Selection<T, Objects.MenuElement>) throws -> T {
    let field = GraphQLField.composite(
      field: "menuElement",
      parent: "Query",
      type: "MenuElement",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func menuElementsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.MenuElement]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "menuElementsList",
      parent: "Query",
      type: "MenuElement",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func menuElementsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "menuElementsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func theme<T>(id: UUIDScalar, selection: Selection<T, Objects.Theme>) throws -> T {
    let field = GraphQLField.composite(
      field: "theme",
      parent: "Query",
      type: "Theme",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func themesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Theme]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "themesList",
      parent: "Query",
      type: "Theme",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func themesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "themesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func group<T>(id: UUIDScalar, selection: Selection<T, Objects.Group>) throws -> T {
    let field = GraphQLField.composite(
      field: "group",
      parent: "Query",
      type: "Group",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func groupsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Group]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "groupsList",
      parent: "Query",
      type: "Group",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func groupsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "groupsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func verifyResetPasswordToken<T>(
    input: InputObjects.VerifyResetPasswordTokenInput,
    selection: Selection<T, Objects.VerifyResetPasswordTokenResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "verifyResetPasswordToken",
      parent: "Query",
      type: "VerifyResetPasswordTokenResponse",
      arguments: [Argument(name: "input", type: "VerifyResetPasswordTokenInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func account<T>(id: UUIDScalar, selection: Selection<T, Objects.Account>) throws -> T {
    let field = GraphQLField.composite(
      field: "account",
      parent: "Query",
      type: "Account",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func currentAccount<T>(selection: Selection<T, Objects.Account>) throws -> T {
    let field = GraphQLField.composite(
      field: "currentAccount",
      parent: "Query",
      type: "Account",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func accountsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Account]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "accountsList",
      parent: "Query",
      type: "Account",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func accountsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "accountsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func verifyInvitation<T>(
    input: InputObjects.VerifyInvitationInput,
    selection: Selection<T, Objects.VerifyInvitationResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "verifyInvitation",
      parent: "Query",
      type: "VerifyInvitationResponse",
      arguments: [Argument(name: "input", type: "VerifyInvitationInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func sessionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Session]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "sessionsList",
      parent: "Query",
      type: "Session",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func sessionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "sessionsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func keyPairsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.KeyPair]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "keyPairsList",
      parent: "Query",
      type: "KeyPair",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func keyPairsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "keyPairsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func keyPair<T>(id: UUIDScalar, selection: Selection<T, Objects.KeyPair>) throws -> T {
    let field = GraphQLField.composite(
      field: "keyPair",
      parent: "Query",
      type: "KeyPair",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func contact<T>(id: UUIDScalar, selection: Selection<T, Objects.Contact>) throws -> T {
    let field = GraphQLField.composite(
      field: "contact",
      parent: "Query",
      type: "Contact",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func contactsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Contact]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "contactsList",
      parent: "Query",
      type: "Contact",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func contactsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "contactsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func fetchContacts<T>(
    input: InputObjects.FetchContactsInput, selection: Selection<T, Objects.FetchContactsResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "fetchContacts",
      parent: "Query",
      type: "FetchContactsResponse",
      arguments: [Argument(name: "input", type: "FetchContactsInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func timeZones<T>(selection: Selection<T, [Objects.TimeZone]>) throws -> T {
    let field = GraphQLField.composite(
      field: "timeZones",
      parent: "Query",
      type: "TimeZone",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func currencies<T>(selection: Selection<T, [Objects.Currency]>) throws -> T {
    let field = GraphQLField.composite(
      field: "currencies",
      parent: "Query",
      type: "Currency",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func fieldTypes<T>(selection: Selection<T, [Objects.FieldType]>) throws -> T {
    let field = GraphQLField.composite(
      field: "fieldTypes",
      parent: "Query",
      type: "FieldType",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalLog<T>(id: UUIDScalar, selection: Selection<T, Objects.ExternalLog>) throws -> T {
    let field = GraphQLField.composite(
      field: "externalLog",
      parent: "Query",
      type: "ExternalLog",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalLogsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalLog]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalLogsList",
      parent: "Query",
      type: "ExternalLog",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalLogsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalLogsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func locales<T>(selection: Selection<T, [Objects.Locale]>) throws -> T {
    let field = GraphQLField.composite(
      field: "locales",
      parent: "Query",
      type: "Locale",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalTable<T>(id: UUIDScalar, selection: Selection<T, Objects.ExternalTable>) throws -> T
  {
    let field = GraphQLField.composite(
      field: "externalTable",
      parent: "Query",
      type: "ExternalTable",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalTablesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalTable]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalTablesList",
      parent: "Query",
      type: "ExternalTable",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalTablesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalTablesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func searchExternalRecords(input: InputObjects.SearchExternalRecordsInput) throws -> [JSONScalar]
  {
    let field = GraphQLField.leaf(
      field: "searchExternalRecords",
      parent: "Query",
      arguments: [Argument(name: "input", type: "SearchExternalRecordsInput!", value: input)]
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func exportExternalRecords<T>(
    input: InputObjects.ExportExternalRecordsInput,
    selection: Selection<T, Objects.ExportExternalRecordsResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "exportExternalRecords",
      parent: "Query",
      type: "ExportExternalRecordsResponse",
      arguments: [Argument(name: "input", type: "ExportExternalRecordsInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func summarizeExternalRecords<T>(
    input: InputObjects.SummarizeExternalRecordsInput,
    selection: Selection<T, Objects.SummarizeExternalRecordsResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "summarizeExternalRecords",
      parent: "Query",
      type: "SummarizeExternalRecordsResponse",
      arguments: [Argument(name: "input", type: "SummarizeExternalRecordsInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalColumn<T>(id: UUIDScalar, selection: Selection<T, Objects.ExternalColumn>) throws
    -> T
  {
    let field = GraphQLField.composite(
      field: "externalColumn",
      parent: "Query",
      type: "ExternalColumn",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalColumnsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalColumn]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalColumnsList",
      parent: "Query",
      type: "ExternalColumn",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalColumnsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalColumnsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalAsset<T>(id: UUIDScalar, selection: Selection<T, Objects.ExternalAsset>) throws -> T
  {
    let field = GraphQLField.composite(
      field: "externalAsset",
      parent: "Query",
      type: "ExternalAsset",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalAssetsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalAsset]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalAssetsList",
      parent: "Query",
      type: "ExternalAsset",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalAssetsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalAssetsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func asset<T>(id: UUIDScalar, selection: Selection<T, Objects.Asset>) throws -> T {
    let field = GraphQLField.composite(
      field: "asset",
      parent: "Query",
      type: "Asset",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalRelationship<T>(
    id: UUIDScalar, selection: Selection<T, Objects.ExternalRelationship>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalRelationship",
      parent: "Query",
      type: "ExternalRelationship",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalRelationshipsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalRelationship]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalRelationshipsList",
      parent: "Query",
      type: "ExternalRelationship",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalRelationshipsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalRelationshipsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalPolymorphicView<T>(
    id: UUIDScalar, selection: Selection<T, Objects.ExternalPolymorphicView>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalPolymorphicView",
      parent: "Query",
      type: "ExternalPolymorphicView",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalPolymorphicViewsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalPolymorphicView]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalPolymorphicViewsList",
      parent: "Query",
      type: "ExternalPolymorphicView",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func externalPolymorphicViewsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "externalPolymorphicViewsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func eventType<T>(id: UUIDScalar, selection: Selection<T, Objects.EventType>) throws -> T {
    let field = GraphQLField.composite(
      field: "eventType",
      parent: "Query",
      type: "EventType",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func eventTypesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.EventType]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "eventTypesList",
      parent: "Query",
      type: "EventType",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func eventTypesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "eventTypesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func event<T>(id: UUIDScalar, selection: Selection<T, Objects.Event>) throws -> T {
    let field = GraphQLField.composite(
      field: "event",
      parent: "Query",
      type: "Event",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func eventsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Event]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "eventsList",
      parent: "Query",
      type: "Event",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func eventsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "eventsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func resourcesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Resource]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "resourcesList",
      parent: "Query",
      type: "Resource",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func resourcesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "resourcesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func resource<T>(id: UUIDScalar, selection: Selection<T, Objects.Resource>) throws -> T {
    let field = GraphQLField.composite(
      field: "resource",
      parent: "Query",
      type: "Resource",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func searchRecords(input: InputObjects.SearchRecordsInput) throws -> [JSONScalar] {
    let field = GraphQLField.leaf(
      field: "searchRecords",
      parent: "Query",
      arguments: [Argument(name: "input", type: "SearchRecordsInput!", value: input)]
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func operationsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Operation]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "operationsList",
      parent: "Query",
      type: "Operation",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func operationsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "operationsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func operation<T>(id: UUIDScalar, selection: Selection<T, Objects.Operation>) throws -> T {
    let field = GraphQLField.composite(
      field: "operation",
      parent: "Query",
      type: "Operation",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func attributesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "attributesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func attributesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Attribute]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "attributesList",
      parent: "Query",
      type: "Attribute",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func attribute<T>(id: UUIDScalar, selection: Selection<T, Objects.Attribute>) throws -> T {
    let field = GraphQLField.composite(
      field: "attribute",
      parent: "Query",
      type: "Attribute",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func parametersAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "parametersAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func parametersList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Parameter]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "parametersList",
      parent: "Query",
      type: "Parameter",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func parameter<T>(id: UUIDScalar, selection: Selection<T, Objects.Parameter>) throws -> T {
    let field = GraphQLField.composite(
      field: "parameter",
      parent: "Query",
      type: "Parameter",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func relationshipsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Relationship]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "relationshipsList",
      parent: "Query",
      type: "Relationship",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func relationshipsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "relationshipsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func relationship<T>(id: UUIDScalar, selection: Selection<T, Objects.Relationship>) throws -> T {
    let field = GraphQLField.composite(
      field: "relationship",
      parent: "Query",
      type: "Relationship",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flow<T>(id: UUIDScalar, selection: Selection<T, Objects.Flow>) throws -> T {
    let field = GraphQLField.composite(
      field: "flow",
      parent: "Query",
      type: "Flow",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Flow]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "flowsList",
      parent: "Query",
      type: "Flow",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "flowsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowVersion<T>(id: UUIDScalar, selection: Selection<T, Objects.FlowVersion>) throws -> T {
    let field = GraphQLField.composite(
      field: "flowVersion",
      parent: "Query",
      type: "FlowVersion",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowVersionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.FlowVersion]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "flowVersionsList",
      parent: "Query",
      type: "FlowVersion",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowVersionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "flowVersionsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowNode<T>(id: UUIDScalar, selection: Selection<T, Objects.FlowNode>) throws -> T {
    let field = GraphQLField.composite(
      field: "flowNode",
      parent: "Query",
      type: "FlowNode",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowNodesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.FlowNode]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "flowNodesList",
      parent: "Query",
      type: "FlowNode",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowNodesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "flowNodesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowExecution<T>(id: UUIDScalar, selection: Selection<T, Objects.FlowExecution>) throws -> T
  {
    let field = GraphQLField.composite(
      field: "flowExecution",
      parent: "Query",
      type: "FlowExecution",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowExecutionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.FlowExecution]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "flowExecutionsList",
      parent: "Query",
      type: "FlowExecution",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowExecutionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "flowExecutionsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowExecutionNode<T>(id: UUIDScalar, selection: Selection<T, Objects.FlowExecutionNode>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "flowExecutionNode",
      parent: "Query",
      type: "FlowExecutionNode",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowExecutionNodesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.FlowExecutionNode]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "flowExecutionNodesList",
      parent: "Query",
      type: "FlowExecutionNode",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func flowExecutionNodesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "flowExecutionNodesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func content<T>(id: UUIDScalar, selection: Selection<T, Objects.CustomContent>) throws -> T {
    let field = GraphQLField.composite(
      field: "content",
      parent: "Query",
      type: "CustomContent",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func contentsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.CustomContent]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "contentsList",
      parent: "Query",
      type: "CustomContent",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func contentsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "contentsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func searchContent(input: InputObjects.SearchContentInput) throws -> [JSONScalar] {
    let field = GraphQLField.leaf(
      field: "searchContent",
      parent: "Query",
      arguments: [Argument(name: "input", type: "SearchContentInput!", value: input)]
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func fetchContent(input: InputObjects.FetchContentInput) throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "fetchContent",
      parent: "Query",
      arguments: [Argument(name: "input", type: "FetchContentInput!", value: input)]
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func contentType<T>(id: UUIDScalar, selection: Selection<T, Objects.ContentType>) throws -> T {
    let field = GraphQLField.composite(
      field: "contentType",
      parent: "Query",
      type: "ContentType",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func contentTypesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ContentType]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "contentTypesList",
      parent: "Query",
      type: "ContentType",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func contentTypesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "contentTypesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func field<T>(id: UUIDScalar, selection: Selection<T, Objects.Field>) throws -> T {
    let field = GraphQLField.composite(
      field: "field",
      parent: "Query",
      type: "Field",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func fieldsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Field]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "fieldsList",
      parent: "Query",
      type: "Field",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func fieldsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "fieldsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func fieldRestrictionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.FieldRestriction]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "fieldRestrictionsList",
      parent: "Query",
      type: "FieldRestriction",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func fieldRestrictionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "fieldRestrictionsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func medium<T>(id: UUIDScalar, selection: Selection<T, Objects.Medium>) throws -> T {
    let field = GraphQLField.composite(
      field: "medium",
      parent: "Query",
      type: "Medium",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func mediaList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Medium]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "mediaList",
      parent: "Query",
      type: "Medium",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func mediaAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "mediaAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func prepareMedium<T>(selection: Selection<T, Objects.PrepareMediumResponse>) throws -> T {
    let field = GraphQLField.composite(
      field: "prepareMedium",
      parent: "Query",
      type: "PrepareMediumResponse",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func contentVersion<T>(id: UUIDScalar, selection: Selection<T, Objects.ContentVersion>) throws
    -> T
  {
    let field = GraphQLField.composite(
      field: "contentVersion",
      parent: "Query",
      type: "ContentVersion",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func contentVersionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "contentVersionsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func contentVersionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ContentVersion]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "contentVersionsList",
      parent: "Query",
      type: "ContentVersion",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func contentTypeFieldOrderingsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ContentTypeFieldOrdering]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "contentTypeFieldOrderingsList",
      parent: "Query",
      type: "ContentTypeFieldOrdering",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func delivery<T>(id: UUIDScalar, selection: Selection<T, Objects.Delivery>) throws -> T {
    let field = GraphQLField.composite(
      field: "delivery",
      parent: "Query",
      type: "Delivery",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func deliveriesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Delivery]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "deliveriesList",
      parent: "Query",
      type: "Delivery",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func deliveriesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "deliveriesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func recipient<T>(id: UUIDScalar, selection: Selection<T, Objects.Recipient>) throws -> T {
    let field = GraphQLField.composite(
      field: "recipient",
      parent: "Query",
      type: "Recipient",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func recipientsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Recipient]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "recipientsList",
      parent: "Query",
      type: "Recipient",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func recipientsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "recipientsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func notification<T>(id: UUIDScalar, selection: Selection<T, Objects.Notification>) throws -> T {
    let field = GraphQLField.composite(
      field: "notification",
      parent: "Query",
      type: "Notification",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func notificationsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Notification]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "notificationsList",
      parent: "Query",
      type: "Notification",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func notificationsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "notificationsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func notificationRecipient<T>(
    id: UUIDScalar, selection: Selection<T, Objects.NotificationRecipient>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "notificationRecipient",
      parent: "Query",
      type: "NotificationRecipient",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func notificationRecipientsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.NotificationRecipient]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "notificationRecipientsList",
      parent: "Query",
      type: "NotificationRecipient",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func notificationRecipientsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "notificationRecipientsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func preference<T>(id: UUIDScalar, selection: Selection<T, Objects.Preference>) throws -> T {
    let field = GraphQLField.composite(
      field: "preference",
      parent: "Query",
      type: "Preference",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func preferencesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Preference]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "preferencesList",
      parent: "Query",
      type: "Preference",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func preferencesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "preferencesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func storedPreference<T>(id: UUIDScalar, selection: Selection<T, Objects.StoredPreference>) throws
    -> T
  {
    let field = GraphQLField.composite(
      field: "storedPreference",
      parent: "Query",
      type: "StoredPreference",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func storedPreferencesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.StoredPreference]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "storedPreferencesList",
      parent: "Query",
      type: "StoredPreference",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func storedPreferencesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "storedPreferencesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func fetchStoredPreferences<T>(
    input: InputObjects.FetchStoredPreferencesInput,
    selection: Selection<T, Objects.FetchStoredPreferencesResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "fetchStoredPreferences",
      parent: "Query",
      type: "FetchStoredPreferencesResponse",
      arguments: [Argument(name: "input", type: "FetchStoredPreferencesInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func preferenceRestriction<T>(
    id: UUIDScalar, selection: Selection<T, Objects.PreferenceRestriction>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "preferenceRestriction",
      parent: "Query",
      type: "PreferenceRestriction",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func preferenceRestrictionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.PreferenceRestriction]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "preferenceRestrictionsList",
      parent: "Query",
      type: "PreferenceRestriction",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func preferenceRestrictionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "preferenceRestrictionsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func notificationLog<T>(id: UUIDScalar, selection: Selection<T, Objects.NotificationLog>) throws
    -> T
  {
    let field = GraphQLField.composite(
      field: "notificationLog",
      parent: "Query",
      type: "NotificationLog",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func notificationLogsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.NotificationLog]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "notificationLogsList",
      parent: "Query",
      type: "NotificationLog",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func notificationLogsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "notificationLogsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func item<T>(id: UUIDScalar, selection: Selection<T, Objects.Item>) throws -> T {
    let field = GraphQLField.composite(
      field: "item",
      parent: "Query",
      type: "Item",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func fetchItem<T>(input: InputObjects.FetchItemInput, selection: Selection<T, Objects.Item>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "fetchItem",
      parent: "Query",
      type: "Item",
      arguments: [Argument(name: "input", type: "FetchItemInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func itemsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Item]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "itemsList",
      parent: "Query",
      type: "Item",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func itemsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "itemsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func pricing<T>(id: UUIDScalar, selection: Selection<T, Objects.Pricing>) throws -> T {
    let field = GraphQLField.composite(
      field: "pricing",
      parent: "Query",
      type: "Pricing",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func pricingsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Pricing]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "pricingsList",
      parent: "Query",
      type: "Pricing",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func pricingsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "pricingsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func itemCategory<T>(id: UUIDScalar, selection: Selection<T, Objects.ItemCategory>) throws -> T {
    let field = GraphQLField.composite(
      field: "itemCategory",
      parent: "Query",
      type: "ItemCategory",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func itemCategoriesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ItemCategory]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "itemCategoriesList",
      parent: "Query",
      type: "ItemCategory",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func itemCategoriesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "itemCategoriesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func itemCategoryMembership<T>(
    id: UUIDScalar, selection: Selection<T, Objects.ItemCategoryMembership>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "itemCategoryMembership",
      parent: "Query",
      type: "ItemCategoryMembership",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func itemCategoryMembershipsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ItemCategoryMembership]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "itemCategoryMembershipsList",
      parent: "Query",
      type: "ItemCategoryMembership",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func itemCategoryMembershipsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "itemCategoryMembershipsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func coupon<T>(id: UUIDScalar, selection: Selection<T, Objects.Coupon>) throws -> T {
    let field = GraphQLField.composite(
      field: "coupon",
      parent: "Query",
      type: "Coupon",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Coupon]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "couponsList",
      parent: "Query",
      type: "Coupon",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "couponsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponCode<T>(id: UUIDScalar, selection: Selection<T, Objects.CouponCode>) throws -> T {
    let field = GraphQLField.composite(
      field: "couponCode",
      parent: "Query",
      type: "CouponCode",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponCodesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.CouponCode]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "couponCodesList",
      parent: "Query",
      type: "CouponCode",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponCodesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "couponCodesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponRestriction<T>(id: UUIDScalar, selection: Selection<T, Objects.CouponRestriction>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "couponRestriction",
      parent: "Query",
      type: "CouponRestriction",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponRestrictionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.CouponRestriction]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "couponRestrictionsList",
      parent: "Query",
      type: "CouponRestriction",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponRestrictionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "couponRestrictionsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponRedemption<T>(id: UUIDScalar, selection: Selection<T, Objects.CouponRedemption>) throws
    -> T
  {
    let field = GraphQLField.composite(
      field: "couponRedemption",
      parent: "Query",
      type: "CouponRedemption",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponRedemptionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.CouponRedemption]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "couponRedemptionsList",
      parent: "Query",
      type: "CouponRedemption",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func couponRedemptionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "couponRedemptionsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func order<T>(id: UUIDScalar, selection: Selection<T, Objects.Order>) throws -> T {
    let field = GraphQLField.composite(
      field: "order",
      parent: "Query",
      type: "Order",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func ordersList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Order]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "ordersList",
      parent: "Query",
      type: "Order",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func ordersAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "ordersAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func ordersListByItems<T>(
    input: InputObjects.OrdersListByItemsInput, selection: Selection<T, [Objects.Order]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "ordersListByItems",
      parent: "Query",
      type: "Order",
      arguments: [Argument(name: "input", type: "OrdersListByItemsInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func ordersAggregateByItems<T>(
    input: InputObjects.OrdersAggregateByItemsInput,
    selection: Selection<T, Objects.OrdersAggregateByItemsResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "ordersAggregateByItems",
      parent: "Query",
      type: "OrdersAggregateByItemsResponse",
      arguments: [Argument(name: "input", type: "OrdersAggregateByItemsInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func fetchCart<T>(input: InputObjects.FetchCartInput, selection: Selection<T, Objects.Order>)
    throws -> T
  {
    let field = GraphQLField.composite(
      field: "fetchCart",
      parent: "Query",
      type: "Order",
      arguments: [Argument(name: "input", type: "FetchCartInput!", value: input)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func orderItemsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.OrderItem]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "orderItemsList",
      parent: "Query",
      type: "OrderItem",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func transaction<T>(id: UUIDScalar, selection: Selection<T, Objects.Transaction>) throws -> T {
    let field = GraphQLField.composite(
      field: "transaction",
      parent: "Query",
      type: "Transaction",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func transactionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Transaction]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "transactionsList",
      parent: "Query",
      type: "Transaction",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func transactionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "transactionsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func role<T>(id: UUIDScalar, selection: Selection<T, Objects.Role>) throws -> T {
    let field = GraphQLField.composite(
      field: "role",
      parent: "Query",
      type: "Role",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func rolesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Role]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "rolesList",
      parent: "Query",
      type: "Role",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func rolesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "rolesAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func roleMembership<T>(id: UUIDScalar, selection: Selection<T, Objects.RoleMembership>) throws
    -> T
  {
    let field = GraphQLField.composite(
      field: "roleMembership",
      parent: "Query",
      type: "RoleMembership",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func roleMembershipsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.RoleMembership]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "roleMembershipsList",
      parent: "Query",
      type: "RoleMembership",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func roleMembershipsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "roleMembershipsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func segment<T>(id: UUIDScalar, selection: Selection<T, Objects.Segment>) throws -> T {
    let field = GraphQLField.composite(
      field: "segment",
      parent: "Query",
      type: "Segment",
      arguments: [Argument(name: "id", type: "UUID!", value: id)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func segmentsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Segment]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "segmentsList",
      parent: "Query",
      type: "Segment",
      arguments: [
        Argument(name: "filter", type: "JSON", value: filter),
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func segmentsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "segmentsAggregate",
      parent: "Query",
      type: "AggregateResponse",
      arguments: [Argument(name: "filter", type: "JSON", value: filter)],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Query<T> = Selection<T, Objects.Query>
}
extension Objects {
  struct Recipient {}
}

extension Fields where TypeLock == Objects.Recipient {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func deliveryId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "deliveryId",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func accountId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "accountId",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func groupId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "groupId",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func parentId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "parentId",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func data() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "data",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func target() throws -> Enums.RecipientTarget {
    let field = GraphQLField.leaf(
      field: "target",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.RecipientTarget(from: $0) }
    case .selecting:
      return Enums.RecipientTarget.mockValue
    }
  }

  func kind() throws -> Enums.RecipientKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.RecipientKind(from: $0) }
    case .selecting:
      return Enums.RecipientKind.mockValue
    }
  }

  func status() throws -> Enums.RecipientStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.RecipientStatus(from: $0) }
    case .selecting:
      return Enums.RecipientStatus.mockValue
    }
  }

  func statusReason() throws -> String? {
    let field = GraphQLField.leaf(
      field: "statusReason",
      parent: "Recipient",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func account<T>(selection: Selection<T, Objects.Account?>) throws -> T {
    let field = GraphQLField.composite(
      field: "account",
      parent: "Recipient",
      type: "Account",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func group<T>(selection: Selection<T, Objects.Group?>) throws -> T {
    let field = GraphQLField.composite(
      field: "group",
      parent: "Recipient",
      type: "Group",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Recipient<T> = Selection<T, Objects.Recipient>
}
extension Objects {
  struct RegisterWorkspaceResponse {}
}

extension Fields where TypeLock == Objects.RegisterWorkspaceResponse {

  func invitationUrl() throws -> String {
    let field = GraphQLField.leaf(
      field: "invitationUrl",
      parent: "RegisterWorkspaceResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias RegisterWorkspaceResponse<T> = Selection<T, Objects.RegisterWorkspaceResponse>
}
extension Objects {
  struct Relationship {}
}

extension Fields where TypeLock == Objects.Relationship {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Relationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Relationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Relationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func sourceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "sourceId",
      parent: "Relationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func sourceAttributeId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "sourceAttributeId",
      parent: "Relationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func targetId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "targetId",
      parent: "Relationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func targetAttributeId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "targetAttributeId",
      parent: "Relationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func kind() throws -> Enums.RelationshipKind {
    let field = GraphQLField.leaf(
      field: "kind",
      parent: "Relationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.RelationshipKind(from: $0) }
    case .selecting:
      return Enums.RelationshipKind.mockValue
    }
  }

  func filter() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "filter",
      parent: "Relationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Relationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Relationship",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func source<T>(selection: Selection<T, Objects.Resource>) throws -> T {
    let field = GraphQLField.composite(
      field: "source",
      parent: "Relationship",
      type: "Resource",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func sourceAttribute<T>(selection: Selection<T, Objects.Attribute>) throws -> T {
    let field = GraphQLField.composite(
      field: "sourceAttribute",
      parent: "Relationship",
      type: "Attribute",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func target<T>(selection: Selection<T, Objects.Resource>) throws -> T {
    let field = GraphQLField.composite(
      field: "target",
      parent: "Relationship",
      type: "Resource",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func targetAttribute<T>(selection: Selection<T, Objects.Attribute>) throws -> T {
    let field = GraphQLField.composite(
      field: "targetAttribute",
      parent: "Relationship",
      type: "Attribute",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Relationship<T> = Selection<T, Objects.Relationship>
}
extension Objects {
  struct Resource {}
}

extension Fields where TypeLock == Objects.Resource {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func originType() throws -> String? {
    let field = GraphQLField.leaf(
      field: "originType",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func originId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "originId",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func description() throws -> String? {
    let field = GraphQLField.leaf(
      field: "description",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func icon() throws -> String? {
    let field = GraphQLField.leaf(
      field: "icon",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func position() throws -> Int {
    let field = GraphQLField.leaf(
      field: "position",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int(from: $0) }
    case .selecting:
      return Int.mockValue
    }
  }

  func titleAttributeId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "titleAttributeId",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func subtitleAttributeId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "subtitleAttributeId",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func polymorphicAttributeId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "polymorphicAttributeId",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func orderStyle() throws -> Enums.OrderStyle? {
    let field = GraphQLField.leaf(
      field: "orderStyle",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.OrderStyle?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func orderAttributes() throws -> [JSONScalar] {
    let field = GraphQLField.leaf(
      field: "orderAttributes",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func validations() throws -> [JSONScalar] {
    let field = GraphQLField.leaf(
      field: "validations",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func appId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "appId",
      parent: "Resource",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func operations<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.Operation]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "operations",
      parent: "Resource",
      type: "Operation",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func attributes<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.Attribute]>
  ) throws -> T {
    let field = GraphQLField.composite(
      field: "attributes",
      parent: "Resource",
      type: "Attribute",
      arguments: [
        Argument(name: "order", type: "JSON", value: order),
        Argument(name: "limit", type: "Int", value: limit),
        Argument(name: "page", type: "Int", value: page),
      ],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Resource<T> = Selection<T, Objects.Resource>
}
extension Objects {
  struct Role {}
}

extension Fields where TypeLock == Objects.Role {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Role",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Role",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func appId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "appId",
      parent: "Role",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Role",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func policy() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "policy",
      parent: "Role",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Role",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Role",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Role<T> = Selection<T, Objects.Role>
}
extension Objects {
  struct RoleMembership {}
}

extension Fields where TypeLock == Objects.RoleMembership {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "RoleMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func roleId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "roleId",
      parent: "RoleMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func accountId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "accountId",
      parent: "RoleMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func environmentId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "environmentId",
      parent: "RoleMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func appId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "appId",
      parent: "RoleMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func installationId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "installationId",
      parent: "RoleMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "RoleMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "RoleMembership",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias RoleMembership<T> = Selection<T, Objects.RoleMembership>
}
extension Objects {
  struct SaveContactsResponse {}
}

extension Fields where TypeLock == Objects.SaveContactsResponse {

  func contacts<T>(selection: Selection<T, [Objects.Contact]>) throws -> T {
    let field = GraphQLField.composite(
      field: "contacts",
      parent: "SaveContactsResponse",
      type: "Contact",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias SaveContactsResponse<T> = Selection<T, Objects.SaveContactsResponse>
}
extension Objects {
  struct SaveStoredPreferencesResponse {}
}

extension Fields where TypeLock == Objects.SaveStoredPreferencesResponse {

  func success() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "success",
      parent: "SaveStoredPreferencesResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias SaveStoredPreferencesResponse<T> = Selection<T, Objects.SaveStoredPreferencesResponse>
}
extension Objects {
  struct Segment {}
}

extension Fields where TypeLock == Objects.Segment {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Segment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Segment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func resourceId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "resourceId",
      parent: "Segment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Segment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Segment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func filter() throws -> JSONScalar {
    let field = GraphQLField.leaf(
      field: "filter",
      parent: "Segment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar(from: $0) }
    case .selecting:
      return JSONScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Segment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Segment",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func resource<T>(selection: Selection<T, Objects.Resource>) throws -> T {
    let field = GraphQLField.composite(
      field: "resource",
      parent: "Segment",
      type: "Resource",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Segment<T> = Selection<T, Objects.Segment>
}
extension Objects {
  struct Session {}
}

extension Fields where TypeLock == Objects.Session {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Session",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func accountId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "accountId",
      parent: "Session",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func token() throws -> String {
    let field = GraphQLField.leaf(
      field: "token",
      parent: "Session",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func lastActiveAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "lastActiveAt",
      parent: "Session",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func expiresAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "expiresAt",
      parent: "Session",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Session",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Session",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Session<T> = Selection<T, Objects.Session>
}
extension Objects {
  struct StoredPreference {}
}

extension Fields where TypeLock == Objects.StoredPreference {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "StoredPreference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func accountId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "accountId",
      parent: "StoredPreference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func preferenceId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "preferenceId",
      parent: "StoredPreference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func isEnabled() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "isEnabled",
      parent: "StoredPreference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }

  func channels() throws -> [Enums.DeliveryChannel] {
    let field = GraphQLField.leaf(
      field: "channels",
      parent: "StoredPreference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [Enums.DeliveryChannel](from: $0) }
    case .selecting:
      return []
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "StoredPreference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "StoredPreference",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func preference<T>(selection: Selection<T, Objects.Preference?>) throws -> T {
    let field = GraphQLField.composite(
      field: "preference",
      parent: "StoredPreference",
      type: "Preference",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func account<T>(selection: Selection<T, Objects.Account>) throws -> T {
    let field = GraphQLField.composite(
      field: "account",
      parent: "StoredPreference",
      type: "Account",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias StoredPreference<T> = Selection<T, Objects.StoredPreference>
}
extension Objects {
  struct SummarizeExternalRecordsResponse {}
}

extension Fields where TypeLock == Objects.SummarizeExternalRecordsResponse {

  func count() throws -> Int? {
    let field = GraphQLField.leaf(
      field: "count",
      parent: "SummarizeExternalRecordsResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Int?(from: $0) }
    case .selecting:
      return nil
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias SummarizeExternalRecordsResponse<T> = Selection<
    T, Objects.SummarizeExternalRecordsResponse
  >
}
extension Objects {
  struct Theme {}
}

extension Fields where TypeLock == Objects.Theme {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Theme",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func workspaceId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "workspaceId",
      parent: "Theme",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Theme",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func palette<T>(selection: Selection<T, Objects.ThemePalette>) throws -> T {
    let field = GraphQLField.composite(
      field: "palette",
      parent: "Theme",
      type: "ThemePalette",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Theme",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Theme",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Theme<T> = Selection<T, Objects.Theme>
}
extension Objects {
  struct ThemePalette {}
}

extension Fields where TypeLock == Objects.ThemePalette {

  func primary() throws -> String {
    let field = GraphQLField.leaf(
      field: "primary",
      parent: "ThemePalette",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func secondary() throws -> String {
    let field = GraphQLField.leaf(
      field: "secondary",
      parent: "ThemePalette",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func accent() throws -> String {
    let field = GraphQLField.leaf(
      field: "accent",
      parent: "ThemePalette",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ThemePalette<T> = Selection<T, Objects.ThemePalette>
}
extension Objects {
  struct TimeZone {}
}

extension Fields where TypeLock == Objects.TimeZone {

  func label() throws -> String {
    let field = GraphQLField.leaf(
      field: "label",
      parent: "TimeZone",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func value() throws -> String {
    let field = GraphQLField.leaf(
      field: "value",
      parent: "TimeZone",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias TimeZone<T> = Selection<T, Objects.TimeZone>
}
extension Objects {
  struct TrackEventResponse {}
}

extension Fields where TypeLock == Objects.TrackEventResponse {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "TrackEventResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func success() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "success",
      parent: "TrackEventResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias TrackEventResponse<T> = Selection<T, Objects.TrackEventResponse>
}
extension Objects {
  struct TrackNotificationResponse {}
}

extension Fields where TypeLock == Objects.TrackNotificationResponse {

  func success() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "success",
      parent: "TrackNotificationResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias TrackNotificationResponse<T> = Selection<T, Objects.TrackNotificationResponse>
}
extension Objects {
  struct Transaction {}
}

extension Fields where TypeLock == Objects.Transaction {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Transaction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func orderId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "orderId",
      parent: "Transaction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func accountId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "accountId",
      parent: "Transaction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func amount() throws -> DecimalScalar {
    let field = GraphQLField.leaf(
      field: "amount",
      parent: "Transaction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DecimalScalar(from: $0) }
    case .selecting:
      return DecimalScalar.mockValue
    }
  }

  func status() throws -> Enums.TransactionStatus {
    let field = GraphQLField.leaf(
      field: "status",
      parent: "Transaction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.TransactionStatus(from: $0) }
    case .selecting:
      return Enums.TransactionStatus.mockValue
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Transaction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Transaction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func gatewayMeta() throws -> JSONScalar? {
    let field = GraphQLField.leaf(
      field: "gatewayMeta",
      parent: "Transaction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try JSONScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func currencyCode() throws -> String {
    let field = GraphQLField.leaf(
      field: "currencyCode",
      parent: "Transaction",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Transaction<T> = Selection<T, Objects.Transaction>
}
extension Objects {
  struct ValidateKeyPairResponse {}
}

extension Fields where TypeLock == Objects.ValidateKeyPairResponse {

  func success() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "success",
      parent: "ValidateKeyPairResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias ValidateKeyPairResponse<T> = Selection<T, Objects.ValidateKeyPairResponse>
}
extension Objects {
  struct VerifyInvitationResponse {}
}

extension Fields where TypeLock == Objects.VerifyInvitationResponse {

  func success() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "success",
      parent: "VerifyInvitationResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias VerifyInvitationResponse<T> = Selection<T, Objects.VerifyInvitationResponse>
}
extension Objects {
  struct VerifyResetPasswordTokenResponse {}
}

extension Fields where TypeLock == Objects.VerifyResetPasswordTokenResponse {

  func success() throws -> Bool {
    let field = GraphQLField.leaf(
      field: "success",
      parent: "VerifyResetPasswordTokenResponse",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Bool(from: $0) }
    case .selecting:
      return Bool.mockValue
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias VerifyResetPasswordTokenResponse<T> = Selection<
    T, Objects.VerifyResetPasswordTokenResponse
  >
}
extension Objects {
  struct View {}
}

extension Fields where TypeLock == Objects.View {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "View",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func dashboardId() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "dashboardId",
      parent: "View",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func installationId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "installationId",
      parent: "View",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "View",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func defaultStyle() throws -> Enums.ViewStyle {
    let field = GraphQLField.leaf(
      field: "defaultStyle",
      parent: "View",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try Enums.ViewStyle(from: $0) }
    case .selecting:
      return Enums.ViewStyle.mockValue
    }
  }

  func componentPath() throws -> String? {
    let field = GraphQLField.leaf(
      field: "componentPath",
      parent: "View",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func blocks() throws -> [JSONScalar] {
    let field = GraphQLField.leaf(
      field: "blocks",
      parent: "View",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func operations() throws -> [JSONScalar] {
    let field = GraphQLField.leaf(
      field: "operations",
      parent: "View",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "View",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "View",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func installation<T>(selection: Selection<T, Objects.Installation?>) throws -> T {
    let field = GraphQLField.composite(
      field: "installation",
      parent: "View",
      type: "Installation",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias View<T> = Selection<T, Objects.View>
}
extension Objects {
  struct Workspace {}
}

extension Fields where TypeLock == Objects.Workspace {

  func id() throws -> UUIDScalar {
    let field = GraphQLField.leaf(
      field: "id",
      parent: "Workspace",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar(from: $0) }
    case .selecting:
      return UUIDScalar.mockValue
    }
  }

  func name() throws -> String {
    let field = GraphQLField.leaf(
      field: "name",
      parent: "Workspace",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func identifier() throws -> String {
    let field = GraphQLField.leaf(
      field: "identifier",
      parent: "Workspace",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String(from: $0) }
    case .selecting:
      return String.mockValue
    }
  }

  func hostname() throws -> String? {
    let field = GraphQLField.leaf(
      field: "hostname",
      parent: "Workspace",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func logoSymbol() throws -> String? {
    let field = GraphQLField.leaf(
      field: "logoSymbol",
      parent: "Workspace",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func logoFull() throws -> String? {
    let field = GraphQLField.leaf(
      field: "logoFull",
      parent: "Workspace",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func wallpaper() throws -> String? {
    let field = GraphQLField.leaf(
      field: "wallpaper",
      parent: "Workspace",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try String?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func createdAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "createdAt",
      parent: "Workspace",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func updatedAt() throws -> DateTimeScalar {
    let field = GraphQLField.leaf(
      field: "updatedAt",
      parent: "Workspace",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try DateTimeScalar(from: $0) }
    case .selecting:
      return DateTimeScalar.mockValue
    }
  }

  func themeId() throws -> UUIDScalar? {
    let field = GraphQLField.leaf(
      field: "themeId",
      parent: "Workspace",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try UUIDScalar?(from: $0) }
    case .selecting:
      return nil
    }
  }

  func locales() throws -> [JSONScalar] {
    let field = GraphQLField.leaf(
      field: "locales",
      parent: "Workspace",
      arguments: []
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try [JSONScalar](from: $0) }
    case .selecting:
      return []
    }
  }

  func theme<T>(selection: Selection<T, Objects.Theme?>) throws -> T {
    let field = GraphQLField.composite(
      field: "theme",
      parent: "Workspace",
      type: "Theme",
      arguments: [],
      selection: selection.__selection()
    )
    self.__select(field)

    switch self.__state {
    case .decoding:
      return try self.__decode(field: field.alias!) { try selection.__decode(data: $0) }
    case .selecting:
      return try selection.__mock()
    }
  }
}
extension Selection where T == Never, TypeLock == Never {
  typealias Workspace<T> = Selection<T, Objects.Workspace>
}
extension Objects.Account {

  static func id() -> Selection<UUIDScalar, Objects.Account> {
    Selection<UUIDScalar, Objects.Account> {
      try $0.id()
    }
  }

  static func environmentId() -> Selection<UUIDScalar, Objects.Account> {
    Selection<UUIDScalar, Objects.Account> {
      try $0.environmentId()
    }
  }

  static func email() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.email()
    }
  }

  static func phone() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.phone()
    }
  }

  static func fullName() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.fullName()
    }
  }

  static func name() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.name()
    }
  }

  static func firstName() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.firstName()
    }
  }

  static func lastName() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.lastName()
    }
  }

  static func avatar() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.avatar()
    }
  }

  static func gender() -> Selection<Enums.AccountGender?, Objects.Account> {
    Selection<Enums.AccountGender?, Objects.Account> {
      try $0.gender()
    }
  }

  static func dateOfBirth() -> Selection<DateScalar?, Objects.Account> {
    Selection<DateScalar?, Objects.Account> {
      try $0.dateOfBirth()
    }
  }

  static func timeZone() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.timeZone()
    }
  }

  static func uid() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.uid()
    }
  }

  static func anonymousUid() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.anonymousUid()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Account> {
    Selection<DateTimeScalar, Objects.Account> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Account> {
    Selection<DateTimeScalar, Objects.Account> {
      try $0.updatedAt()
    }
  }

  static func hasApiAccess() -> Selection<Bool, Objects.Account> {
    Selection<Bool, Objects.Account> {
      try $0.hasApiAccess()
    }
  }

  static func hasGuiAccess() -> Selection<Bool, Objects.Account> {
    Selection<Bool, Objects.Account> {
      try $0.hasGuiAccess()
    }
  }

  static func custom() -> Selection<JSONScalar?, Objects.Account> {
    Selection<JSONScalar?, Objects.Account> {
      try $0.custom()
    }
  }

  static func status() -> Selection<Enums.AccountStatus, Objects.Account> {
    Selection<Enums.AccountStatus, Objects.Account> {
      try $0.status()
    }
  }

  static func invitationToken() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.invitationToken()
    }
  }

  static func unconfirmedEmail() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.unconfirmedEmail()
    }
  }

  static func confirmationDigest() -> Selection<String?, Objects.Account> {
    Selection<String?, Objects.Account> {
      try $0.confirmationDigest()
    }
  }

  static func confirmationExpiresAt() -> Selection<DateTimeScalar?, Objects.Account> {
    Selection<DateTimeScalar?, Objects.Account> {
      try $0.confirmationExpiresAt()
    }
  }

  static func regularAccountId() -> Selection<UUIDScalar?, Objects.Account> {
    Selection<UUIDScalar?, Objects.Account> {
      try $0.regularAccountId()
    }
  }

  static func scope() -> Selection<String, Objects.Account> {
    Selection<String, Objects.Account> {
      try $0.scope()
    }
  }

  static func kind() -> Selection<Enums.AccountKind, Objects.Account> {
    Selection<Enums.AccountKind, Objects.Account> {
      try $0.kind()
    }
  }
}
extension Objects.AggregateResponse {

  static func count() -> Selection<Int?, Objects.AggregateResponse> {
    Selection<Int?, Objects.AggregateResponse> {
      try $0.count()
    }
  }
}
extension Objects.App {

  static func id() -> Selection<UUIDScalar, Objects.App> {
    Selection<UUIDScalar, Objects.App> {
      try $0.id()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar?, Objects.App> {
    Selection<UUIDScalar?, Objects.App> {
      try $0.workspaceId()
    }
  }

  static func name() -> Selection<String, Objects.App> {
    Selection<String, Objects.App> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.App> {
    Selection<String, Objects.App> {
      try $0.identifier()
    }
  }

  static func summary() -> Selection<String?, Objects.App> {
    Selection<String?, Objects.App> {
      try $0.summary()
    }
  }

  static func fields() -> Selection<[JSONScalar], Objects.App> {
    Selection<[JSONScalar], Objects.App> {
      try $0.fields()
    }
  }

  static func isInstallable() -> Selection<Bool, Objects.App> {
    Selection<Bool, Objects.App> {
      try $0.isInstallable()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.App> {
    Selection<DateTimeScalar, Objects.App> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.App> {
    Selection<DateTimeScalar, Objects.App> {
      try $0.updatedAt()
    }
  }

  static func kind() -> Selection<Enums.AppKind, Objects.App> {
    Selection<Enums.AppKind, Objects.App> {
      try $0.kind()
    }
  }

  static func appCategoryId() -> Selection<UUIDScalar?, Objects.App> {
    Selection<UUIDScalar?, Objects.App> {
      try $0.appCategoryId()
    }
  }

  static func appCategory<T>(selection: Selection<T, Objects.AppCategory?>) -> Selection<
    T, Objects.App
  > {
    Selection<T, Objects.App> {
      try $0.appCategory(selection: selection)
    }
  }
}
extension Objects.AppCategory {

  static func id() -> Selection<UUIDScalar, Objects.AppCategory> {
    Selection<UUIDScalar, Objects.AppCategory> {
      try $0.id()
    }
  }

  static func name() -> Selection<String, Objects.AppCategory> {
    Selection<String, Objects.AppCategory> {
      try $0.name()
    }
  }

  static func description() -> Selection<String?, Objects.AppCategory> {
    Selection<String?, Objects.AppCategory> {
      try $0.description()
    }
  }

  static func position() -> Selection<Int, Objects.AppCategory> {
    Selection<Int, Objects.AppCategory> {
      try $0.position()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.AppCategory> {
    Selection<DateTimeScalar, Objects.AppCategory> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.AppCategory> {
    Selection<DateTimeScalar, Objects.AppCategory> {
      try $0.updatedAt()
    }
  }
}
extension Objects.Asset {

  static func id() -> Selection<UUIDScalar, Objects.Asset> {
    Selection<UUIDScalar, Objects.Asset> {
      try $0.id()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar, Objects.Asset> {
    Selection<UUIDScalar, Objects.Asset> {
      try $0.workspaceId()
    }
  }

  static func resourceId() -> Selection<UUIDScalar, Objects.Asset> {
    Selection<UUIDScalar, Objects.Asset> {
      try $0.resourceId()
    }
  }

  static func attributeId() -> Selection<UUIDScalar, Objects.Asset> {
    Selection<UUIDScalar, Objects.Asset> {
      try $0.attributeId()
    }
  }

  static func storageProviderId() -> Selection<UUIDScalar?, Objects.Asset> {
    Selection<UUIDScalar?, Objects.Asset> {
      try $0.storageProviderId()
    }
  }

  static func uploaderId() -> Selection<UUIDScalar?, Objects.Asset> {
    Selection<UUIDScalar?, Objects.Asset> {
      try $0.uploaderId()
    }
  }

  static func data() -> Selection<JSONScalar, Objects.Asset> {
    Selection<JSONScalar, Objects.Asset> {
      try $0.data()
    }
  }

  static func uploadStatus() -> Selection<Enums.AssetUploadStatus, Objects.Asset> {
    Selection<Enums.AssetUploadStatus, Objects.Asset> {
      try $0.uploadStatus()
    }
  }

  static func processingStatus() -> Selection<Enums.AssetProcessingStatus, Objects.Asset> {
    Selection<Enums.AssetProcessingStatus, Objects.Asset> {
      try $0.processingStatus()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Asset> {
    Selection<DateTimeScalar, Objects.Asset> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Asset> {
    Selection<DateTimeScalar, Objects.Asset> {
      try $0.updatedAt()
    }
  }
}
extension Objects.Attribute {

  static func id() -> Selection<UUIDScalar, Objects.Attribute> {
    Selection<UUIDScalar, Objects.Attribute> {
      try $0.id()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar?, Objects.Attribute> {
    Selection<UUIDScalar?, Objects.Attribute> {
      try $0.workspaceId()
    }
  }

  static func resourceId() -> Selection<UUIDScalar, Objects.Attribute> {
    Selection<UUIDScalar, Objects.Attribute> {
      try $0.resourceId()
    }
  }

  static func name() -> Selection<String, Objects.Attribute> {
    Selection<String, Objects.Attribute> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Attribute> {
    Selection<String, Objects.Attribute> {
      try $0.identifier()
    }
  }

  static func fieldType() -> Selection<String, Objects.Attribute> {
    Selection<String, Objects.Attribute> {
      try $0.fieldType()
    }
  }

  static func isNullable() -> Selection<Bool, Objects.Attribute> {
    Selection<Bool, Objects.Attribute> {
      try $0.isNullable()
    }
  }

  static func isRepeatable() -> Selection<Bool, Objects.Attribute> {
    Selection<Bool, Objects.Attribute> {
      try $0.isRepeatable()
    }
  }

  static func isTranslatable() -> Selection<Bool, Objects.Attribute> {
    Selection<Bool, Objects.Attribute> {
      try $0.isTranslatable()
    }
  }

  static func isFilterable() -> Selection<Bool, Objects.Attribute> {
    Selection<Bool, Objects.Attribute> {
      try $0.isFilterable()
    }
  }

  static func isOrderable() -> Selection<Bool, Objects.Attribute> {
    Selection<Bool, Objects.Attribute> {
      try $0.isOrderable()
    }
  }

  static func isSearchable() -> Selection<Bool, Objects.Attribute> {
    Selection<Bool, Objects.Attribute> {
      try $0.isSearchable()
    }
  }

  static func validations() -> Selection<[JSONScalar], Objects.Attribute> {
    Selection<[JSONScalar], Objects.Attribute> {
      try $0.validations()
    }
  }

  static func settings() -> Selection<JSONScalar, Objects.Attribute> {
    Selection<JSONScalar, Objects.Attribute> {
      try $0.settings()
    }
  }

  static func defaultValue() -> Selection<JSONScalar?, Objects.Attribute> {
    Selection<JSONScalar?, Objects.Attribute> {
      try $0.defaultValue()
    }
  }

  static func position() -> Selection<Int, Objects.Attribute> {
    Selection<Int, Objects.Attribute> {
      try $0.position()
    }
  }

  static func placeholder() -> Selection<String?, Objects.Attribute> {
    Selection<String?, Objects.Attribute> {
      try $0.placeholder()
    }
  }

  static func helpText() -> Selection<String?, Objects.Attribute> {
    Selection<String?, Objects.Attribute> {
      try $0.helpText()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Attribute> {
    Selection<DateTimeScalar, Objects.Attribute> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Attribute> {
    Selection<DateTimeScalar, Objects.Attribute> {
      try $0.updatedAt()
    }
  }

  static func dataType() -> Selection<String, Objects.Attribute> {
    Selection<String, Objects.Attribute> {
      try $0.dataType()
    }
  }

  static func dataFormat() -> Selection<String?, Objects.Attribute> {
    Selection<String?, Objects.Attribute> {
      try $0.dataFormat()
    }
  }

  static func resource<T>(selection: Selection<T, Objects.Resource>) -> Selection<
    T, Objects.Attribute
  > {
    Selection<T, Objects.Attribute> {
      try $0.resource(selection: selection)
    }
  }
}
extension Objects.ChangeEmailResponse {

  static func success() -> Selection<Bool, Objects.ChangeEmailResponse> {
    Selection<Bool, Objects.ChangeEmailResponse> {
      try $0.success()
    }
  }
}
extension Objects.Configuration {

  static func id() -> Selection<UUIDScalar, Objects.Configuration> {
    Selection<UUIDScalar, Objects.Configuration> {
      try $0.id()
    }
  }

  static func installationId() -> Selection<UUIDScalar, Objects.Configuration> {
    Selection<UUIDScalar, Objects.Configuration> {
      try $0.installationId()
    }
  }

  static func environmentId() -> Selection<UUIDScalar, Objects.Configuration> {
    Selection<UUIDScalar, Objects.Configuration> {
      try $0.environmentId()
    }
  }

  static func digest() -> Selection<String, Objects.Configuration> {
    Selection<String, Objects.Configuration> {
      try $0.digest()
    }
  }

  static func settings() -> Selection<JSONScalar, Objects.Configuration> {
    Selection<JSONScalar, Objects.Configuration> {
      try $0.settings()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Configuration> {
    Selection<DateTimeScalar, Objects.Configuration> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Configuration> {
    Selection<DateTimeScalar, Objects.Configuration> {
      try $0.updatedAt()
    }
  }

  static func status() -> Selection<Enums.ConfigurationStatus, Objects.Configuration> {
    Selection<Enums.ConfigurationStatus, Objects.Configuration> {
      try $0.status()
    }
  }

  static func statusMessage() -> Selection<String?, Objects.Configuration> {
    Selection<String?, Objects.Configuration> {
      try $0.statusMessage()
    }
  }

  static func installation<T>(selection: Selection<T, Objects.Installation>) -> Selection<
    T, Objects.Configuration
  > {
    Selection<T, Objects.Configuration> {
      try $0.installation(selection: selection)
    }
  }

  static func environment<T>(selection: Selection<T, Objects.Environment>) -> Selection<
    T, Objects.Configuration
  > {
    Selection<T, Objects.Configuration> {
      try $0.environment(selection: selection)
    }
  }
}
extension Objects.Contact {

  static func id() -> Selection<UUIDScalar, Objects.Contact> {
    Selection<UUIDScalar, Objects.Contact> {
      try $0.id()
    }
  }

  static func accountId() -> Selection<UUIDScalar, Objects.Contact> {
    Selection<UUIDScalar, Objects.Contact> {
      try $0.accountId()
    }
  }

  static func environmentId() -> Selection<UUIDScalar, Objects.Contact> {
    Selection<UUIDScalar, Objects.Contact> {
      try $0.environmentId()
    }
  }

  static func isAccountAnonymous() -> Selection<Bool, Objects.Contact> {
    Selection<Bool, Objects.Contact> {
      try $0.isAccountAnonymous()
    }
  }

  static func name() -> Selection<String?, Objects.Contact> {
    Selection<String?, Objects.Contact> {
      try $0.name()
    }
  }

  static func kind() -> Selection<Enums.ContactKind, Objects.Contact> {
    Selection<Enums.ContactKind, Objects.Contact> {
      try $0.kind()
    }
  }

  static func value() -> Selection<String, Objects.Contact> {
    Selection<String, Objects.Contact> {
      try $0.value()
    }
  }

  static func unverifiedValue() -> Selection<String?, Objects.Contact> {
    Selection<String?, Objects.Contact> {
      try $0.unverifiedValue()
    }
  }

  static func verifiedAt() -> Selection<DateTimeScalar?, Objects.Contact> {
    Selection<DateTimeScalar?, Objects.Contact> {
      try $0.verifiedAt()
    }
  }

  static func verificationDigest() -> Selection<String?, Objects.Contact> {
    Selection<String?, Objects.Contact> {
      try $0.verificationDigest()
    }
  }

  static func verificationExpiresAt() -> Selection<DateTimeScalar?, Objects.Contact> {
    Selection<DateTimeScalar?, Objects.Contact> {
      try $0.verificationExpiresAt()
    }
  }

  static func status() -> Selection<Enums.ContactStatus, Objects.Contact> {
    Selection<Enums.ContactStatus, Objects.Contact> {
      try $0.status()
    }
  }

  static func userAgent() -> Selection<String?, Objects.Contact> {
    Selection<String?, Objects.Contact> {
      try $0.userAgent()
    }
  }

  static func osName() -> Selection<String?, Objects.Contact> {
    Selection<String?, Objects.Contact> {
      try $0.osName()
    }
  }

  static func osVersion() -> Selection<String?, Objects.Contact> {
    Selection<String?, Objects.Contact> {
      try $0.osVersion()
    }
  }

  static func deviceModel() -> Selection<String?, Objects.Contact> {
    Selection<String?, Objects.Contact> {
      try $0.deviceModel()
    }
  }

  static func deviceManufacturer() -> Selection<String?, Objects.Contact> {
    Selection<String?, Objects.Contact> {
      try $0.deviceManufacturer()
    }
  }

  static func deviceUid() -> Selection<String?, Objects.Contact> {
    Selection<String?, Objects.Contact> {
      try $0.deviceUid()
    }
  }

  static func deviceAdvertisingUid() -> Selection<String?, Objects.Contact> {
    Selection<String?, Objects.Contact> {
      try $0.deviceAdvertisingUid()
    }
  }

  static func isDeviceAdTrackingEnabled() -> Selection<Bool, Objects.Contact> {
    Selection<Bool, Objects.Contact> {
      try $0.isDeviceAdTrackingEnabled()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Contact> {
    Selection<DateTimeScalar, Objects.Contact> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Contact> {
    Selection<DateTimeScalar, Objects.Contact> {
      try $0.updatedAt()
    }
  }

  static func tag() -> Selection<String?, Objects.Contact> {
    Selection<String?, Objects.Contact> {
      try $0.tag()
    }
  }

  static func accountScope() -> Selection<String, Objects.Contact> {
    Selection<String, Objects.Contact> {
      try $0.accountScope()
    }
  }

  static func accountKind() -> Selection<Enums.AccountKind, Objects.Contact> {
    Selection<Enums.AccountKind, Objects.Contact> {
      try $0.accountKind()
    }
  }
}
extension Objects.ContentType {

  static func id() -> Selection<UUIDScalar, Objects.ContentType> {
    Selection<UUIDScalar, Objects.ContentType> {
      try $0.id()
    }
  }

  static func kind() -> Selection<Enums.ContentTypeKind, Objects.ContentType> {
    Selection<Enums.ContentTypeKind, Objects.ContentType> {
      try $0.kind()
    }
  }

  static func name() -> Selection<String, Objects.ContentType> {
    Selection<String, Objects.ContentType> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.ContentType> {
    Selection<String, Objects.ContentType> {
      try $0.identifier()
    }
  }

  static func systemIdentifier() -> Selection<String?, Objects.ContentType> {
    Selection<String?, Objects.ContentType> {
      try $0.systemIdentifier()
    }
  }

  static func position() -> Selection<Int, Objects.ContentType> {
    Selection<Int, Objects.ContentType> {
      try $0.position()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.ContentType> {
    Selection<DateTimeScalar, Objects.ContentType> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.ContentType> {
    Selection<DateTimeScalar, Objects.ContentType> {
      try $0.updatedAt()
    }
  }

  static func titleFieldId() -> Selection<UUIDScalar?, Objects.ContentType> {
    Selection<UUIDScalar?, Objects.ContentType> {
      try $0.titleFieldId()
    }
  }

  static func category() -> Selection<Enums.ContentTypeCategory, Objects.ContentType> {
    Selection<Enums.ContentTypeCategory, Objects.ContentType> {
      try $0.category()
    }
  }

  static func orderingStyle() -> Selection<Enums.ContentTypeOrderingStyle, Objects.ContentType> {
    Selection<Enums.ContentTypeOrderingStyle, Objects.ContentType> {
      try $0.orderingStyle()
    }
  }

  static func fieldOrderings<T>(selection: Selection<T, [Objects.FieldOrderingInput]>) -> Selection<
    T, Objects.ContentType
  > {
    Selection<T, Objects.ContentType> {
      try $0.fieldOrderings(selection: selection)
    }
  }

  static func isPublishingEnabled() -> Selection<Bool, Objects.ContentType> {
    Selection<Bool, Objects.ContentType> {
      try $0.isPublishingEnabled()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar, Objects.ContentType> {
    Selection<UUIDScalar, Objects.ContentType> {
      try $0.workspaceId()
    }
  }

  static func contentTypeFieldOrderings<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ContentTypeFieldOrdering]>
  ) -> Selection<T, Objects.ContentType> {
    Selection<T, Objects.ContentType> {
      try $0.contentTypeFieldOrderings(order: order, limit: limit, page: page, selection: selection)
    }
  }
}
extension Objects.ContentTypeFieldOrdering {

  static func id() -> Selection<UUIDScalar, Objects.ContentTypeFieldOrdering> {
    Selection<UUIDScalar, Objects.ContentTypeFieldOrdering> {
      try $0.id()
    }
  }

  static func contentTypeId() -> Selection<UUIDScalar, Objects.ContentTypeFieldOrdering> {
    Selection<UUIDScalar, Objects.ContentTypeFieldOrdering> {
      try $0.contentTypeId()
    }
  }

  static func fieldId() -> Selection<UUIDScalar, Objects.ContentTypeFieldOrdering> {
    Selection<UUIDScalar, Objects.ContentTypeFieldOrdering> {
      try $0.fieldId()
    }
  }

  static func direction() -> Selection<Enums.SortDirection, Objects.ContentTypeFieldOrdering> {
    Selection<Enums.SortDirection, Objects.ContentTypeFieldOrdering> {
      try $0.direction()
    }
  }

  static func position() -> Selection<Int, Objects.ContentTypeFieldOrdering> {
    Selection<Int, Objects.ContentTypeFieldOrdering> {
      try $0.position()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.ContentTypeFieldOrdering> {
    Selection<DateTimeScalar, Objects.ContentTypeFieldOrdering> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.ContentTypeFieldOrdering> {
    Selection<DateTimeScalar, Objects.ContentTypeFieldOrdering> {
      try $0.updatedAt()
    }
  }

  static func contentType<T>(selection: Selection<T, Objects.ContentType>) -> Selection<
    T, Objects.ContentTypeFieldOrdering
  > {
    Selection<T, Objects.ContentTypeFieldOrdering> {
      try $0.contentType(selection: selection)
    }
  }
}
extension Objects.ContentVersion {

  static func id() -> Selection<UUIDScalar, Objects.ContentVersion> {
    Selection<UUIDScalar, Objects.ContentVersion> {
      try $0.id()
    }
  }

  static func contentId() -> Selection<UUIDScalar, Objects.ContentVersion> {
    Selection<UUIDScalar, Objects.ContentVersion> {
      try $0.contentId()
    }
  }

  static func version() -> Selection<DateTimeScalar, Objects.ContentVersion> {
    Selection<DateTimeScalar, Objects.ContentVersion> {
      try $0.version()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.ContentVersion> {
    Selection<DateTimeScalar, Objects.ContentVersion> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.ContentVersion> {
    Selection<DateTimeScalar, Objects.ContentVersion> {
      try $0.updatedAt()
    }
  }

  static func createdById() -> Selection<UUIDScalar, Objects.ContentVersion> {
    Selection<UUIDScalar, Objects.ContentVersion> {
      try $0.createdById()
    }
  }

  static func snapshot() -> Selection<JSONScalar, Objects.ContentVersion> {
    Selection<JSONScalar, Objects.ContentVersion> {
      try $0.snapshot()
    }
  }

  static func createdBy<T>(selection: Selection<T, Objects.Account>) -> Selection<
    T, Objects.ContentVersion
  > {
    Selection<T, Objects.ContentVersion> {
      try $0.createdBy(selection: selection)
    }
  }
}
extension Objects.Coupon {

  static func id() -> Selection<UUIDScalar, Objects.Coupon> {
    Selection<UUIDScalar, Objects.Coupon> {
      try $0.id()
    }
  }

  static func name() -> Selection<String, Objects.Coupon> {
    Selection<String, Objects.Coupon> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Coupon> {
    Selection<String, Objects.Coupon> {
      try $0.identifier()
    }
  }

  static func discountType() -> Selection<Enums.CouponDiscountType, Objects.Coupon> {
    Selection<Enums.CouponDiscountType, Objects.Coupon> {
      try $0.discountType()
    }
  }

  static func discountAmount() -> Selection<DecimalScalar, Objects.Coupon> {
    Selection<DecimalScalar, Objects.Coupon> {
      try $0.discountAmount()
    }
  }

  static func currencyCode() -> Selection<String?, Objects.Coupon> {
    Selection<String?, Objects.Coupon> {
      try $0.currencyCode()
    }
  }

  static func expiresAt() -> Selection<DateTimeScalar?, Objects.Coupon> {
    Selection<DateTimeScalar?, Objects.Coupon> {
      try $0.expiresAt()
    }
  }

  static func redemptionsLimit() -> Selection<Int?, Objects.Coupon> {
    Selection<Int?, Objects.Coupon> {
      try $0.redemptionsLimit()
    }
  }

  static func redemptionsCount() -> Selection<Int, Objects.Coupon> {
    Selection<Int, Objects.Coupon> {
      try $0.redemptionsCount()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Coupon> {
    Selection<DateTimeScalar, Objects.Coupon> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Coupon> {
    Selection<DateTimeScalar, Objects.Coupon> {
      try $0.updatedAt()
    }
  }

  static func environmentId() -> Selection<UUIDScalar, Objects.Coupon> {
    Selection<UUIDScalar, Objects.Coupon> {
      try $0.environmentId()
    }
  }
}
extension Objects.CouponCode {

  static func id() -> Selection<UUIDScalar, Objects.CouponCode> {
    Selection<UUIDScalar, Objects.CouponCode> {
      try $0.id()
    }
  }

  static func name() -> Selection<String, Objects.CouponCode> {
    Selection<String, Objects.CouponCode> {
      try $0.name()
    }
  }

  static func accountId() -> Selection<UUIDScalar?, Objects.CouponCode> {
    Selection<UUIDScalar?, Objects.CouponCode> {
      try $0.accountId()
    }
  }

  static func couponId() -> Selection<UUIDScalar, Objects.CouponCode> {
    Selection<UUIDScalar, Objects.CouponCode> {
      try $0.couponId()
    }
  }

  static func redemptionsLimit() -> Selection<Int?, Objects.CouponCode> {
    Selection<Int?, Objects.CouponCode> {
      try $0.redemptionsLimit()
    }
  }

  static func redemptionsCount() -> Selection<Int, Objects.CouponCode> {
    Selection<Int, Objects.CouponCode> {
      try $0.redemptionsCount()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.CouponCode> {
    Selection<DateTimeScalar, Objects.CouponCode> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.CouponCode> {
    Selection<DateTimeScalar, Objects.CouponCode> {
      try $0.updatedAt()
    }
  }
}
extension Objects.CouponRedemption {

  static func id() -> Selection<UUIDScalar, Objects.CouponRedemption> {
    Selection<UUIDScalar, Objects.CouponRedemption> {
      try $0.id()
    }
  }

  static func couponId() -> Selection<UUIDScalar, Objects.CouponRedemption> {
    Selection<UUIDScalar, Objects.CouponRedemption> {
      try $0.couponId()
    }
  }

  static func orderId() -> Selection<UUIDScalar, Objects.CouponRedemption> {
    Selection<UUIDScalar, Objects.CouponRedemption> {
      try $0.orderId()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.CouponRedemption> {
    Selection<DateTimeScalar, Objects.CouponRedemption> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.CouponRedemption> {
    Selection<DateTimeScalar, Objects.CouponRedemption> {
      try $0.updatedAt()
    }
  }

  static func coupon<T>(selection: Selection<T, Objects.Coupon>) -> Selection<
    T, Objects.CouponRedemption
  > {
    Selection<T, Objects.CouponRedemption> {
      try $0.coupon(selection: selection)
    }
  }

  static func order<T>(selection: Selection<T, Objects.Order>) -> Selection<
    T, Objects.CouponRedemption
  > {
    Selection<T, Objects.CouponRedemption> {
      try $0.order(selection: selection)
    }
  }
}
extension Objects.CouponRestriction {

  static func id() -> Selection<UUIDScalar, Objects.CouponRestriction> {
    Selection<UUIDScalar, Objects.CouponRestriction> {
      try $0.id()
    }
  }

  static func couponId() -> Selection<UUIDScalar, Objects.CouponRestriction> {
    Selection<UUIDScalar, Objects.CouponRestriction> {
      try $0.couponId()
    }
  }

  static func itemId() -> Selection<UUIDScalar?, Objects.CouponRestriction> {
    Selection<UUIDScalar?, Objects.CouponRestriction> {
      try $0.itemId()
    }
  }

  static func itemCategoryId() -> Selection<UUIDScalar?, Objects.CouponRestriction> {
    Selection<UUIDScalar?, Objects.CouponRestriction> {
      try $0.itemCategoryId()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.CouponRestriction> {
    Selection<DateTimeScalar, Objects.CouponRestriction> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.CouponRestriction> {
    Selection<DateTimeScalar, Objects.CouponRestriction> {
      try $0.updatedAt()
    }
  }

  static func item<T>(selection: Selection<T, Objects.Item?>) -> Selection<
    T, Objects.CouponRestriction
  > {
    Selection<T, Objects.CouponRestriction> {
      try $0.item(selection: selection)
    }
  }

  static func itemCategory<T>(selection: Selection<T, Objects.ItemCategory?>) -> Selection<
    T, Objects.CouponRestriction
  > {
    Selection<T, Objects.CouponRestriction> {
      try $0.itemCategory(selection: selection)
    }
  }
}
extension Objects.Currency {

  static func code() -> Selection<String, Objects.Currency> {
    Selection<String, Objects.Currency> {
      try $0.code()
    }
  }

  static func name() -> Selection<String, Objects.Currency> {
    Selection<String, Objects.Currency> {
      try $0.name()
    }
  }

  static func symbol() -> Selection<String, Objects.Currency> {
    Selection<String, Objects.Currency> {
      try $0.symbol()
    }
  }
}
extension Objects.CustomContent {

  static func id() -> Selection<UUIDScalar, Objects.CustomContent> {
    Selection<UUIDScalar, Objects.CustomContent> {
      try $0.id()
    }
  }

  static func identifier() -> Selection<String, Objects.CustomContent> {
    Selection<String, Objects.CustomContent> {
      try $0.identifier()
    }
  }

  static func contentTypeId() -> Selection<UUIDScalar, Objects.CustomContent> {
    Selection<UUIDScalar, Objects.CustomContent> {
      try $0.contentTypeId()
    }
  }

  static func data() -> Selection<JSONScalar, Objects.CustomContent> {
    Selection<JSONScalar, Objects.CustomContent> {
      try $0.data()
    }
  }

  static func position() -> Selection<Int, Objects.CustomContent> {
    Selection<Int, Objects.CustomContent> {
      try $0.position()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.CustomContent> {
    Selection<DateTimeScalar, Objects.CustomContent> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.CustomContent> {
    Selection<DateTimeScalar, Objects.CustomContent> {
      try $0.updatedAt()
    }
  }

  static func publishedContentVersionId() -> Selection<UUIDScalar?, Objects.CustomContent> {
    Selection<UUIDScalar?, Objects.CustomContent> {
      try $0.publishedContentVersionId()
    }
  }

  static func currentContentVersionId() -> Selection<UUIDScalar?, Objects.CustomContent> {
    Selection<UUIDScalar?, Objects.CustomContent> {
      try $0.currentContentVersionId()
    }
  }

  static func contentType<T>(selection: Selection<T, Objects.ContentType>) -> Selection<
    T, Objects.CustomContent
  > {
    Selection<T, Objects.CustomContent> {
      try $0.contentType(selection: selection)
    }
  }
}
extension Objects.Dashboard {

  static func id() -> Selection<UUIDScalar, Objects.Dashboard> {
    Selection<UUIDScalar, Objects.Dashboard> {
      try $0.id()
    }
  }

  static func dashboardableType() -> Selection<String, Objects.Dashboard> {
    Selection<String, Objects.Dashboard> {
      try $0.dashboardableType()
    }
  }

  static func dashboardableId() -> Selection<UUIDScalar, Objects.Dashboard> {
    Selection<UUIDScalar, Objects.Dashboard> {
      try $0.dashboardableId()
    }
  }

  static func name() -> Selection<String, Objects.Dashboard> {
    Selection<String, Objects.Dashboard> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Dashboard> {
    Selection<String, Objects.Dashboard> {
      try $0.identifier()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Dashboard> {
    Selection<DateTimeScalar, Objects.Dashboard> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Dashboard> {
    Selection<DateTimeScalar, Objects.Dashboard> {
      try $0.updatedAt()
    }
  }

  static func menuElements<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.MenuElement]>
  ) -> Selection<T, Objects.Dashboard> {
    Selection<T, Objects.Dashboard> {
      try $0.menuElements(order: order, limit: limit, page: page, selection: selection)
    }
  }
}
extension Objects.Delivery {

  static func id() -> Selection<UUIDScalar, Objects.Delivery> {
    Selection<UUIDScalar, Objects.Delivery> {
      try $0.id()
    }
  }

  static func contentId() -> Selection<UUIDScalar?, Objects.Delivery> {
    Selection<UUIDScalar?, Objects.Delivery> {
      try $0.contentId()
    }
  }

  static func content() -> Selection<JSONScalar?, Objects.Delivery> {
    Selection<JSONScalar?, Objects.Delivery> {
      try $0.content()
    }
  }

  static func data() -> Selection<JSONScalar?, Objects.Delivery> {
    Selection<JSONScalar?, Objects.Delivery> {
      try $0.data()
    }
  }

  static func status() -> Selection<Enums.DeliveryStatus, Objects.Delivery> {
    Selection<Enums.DeliveryStatus, Objects.Delivery> {
      try $0.status()
    }
  }

  static func sentNotificationsCount() -> Selection<Int, Objects.Delivery> {
    Selection<Int, Objects.Delivery> {
      try $0.sentNotificationsCount()
    }
  }

  static func deliveredNotificationsCount() -> Selection<Int, Objects.Delivery> {
    Selection<Int, Objects.Delivery> {
      try $0.deliveredNotificationsCount()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Delivery> {
    Selection<DateTimeScalar, Objects.Delivery> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Delivery> {
    Selection<DateTimeScalar, Objects.Delivery> {
      try $0.updatedAt()
    }
  }

  static func name() -> Selection<String?, Objects.Delivery> {
    Selection<String?, Objects.Delivery> {
      try $0.name()
    }
  }

  static func contentTypeSystemIdentifier() -> Selection<String, Objects.Delivery> {
    Selection<String, Objects.Delivery> {
      try $0.contentTypeSystemIdentifier()
    }
  }

  static func failureReason() -> Selection<String?, Objects.Delivery> {
    Selection<String?, Objects.Delivery> {
      try $0.failureReason()
    }
  }

  static func isTest() -> Selection<Bool, Objects.Delivery> {
    Selection<Bool, Objects.Delivery> {
      try $0.isTest()
    }
  }

  static func scheduledAt() -> Selection<DateTimeScalar?, Objects.Delivery> {
    Selection<DateTimeScalar?, Objects.Delivery> {
      try $0.scheduledAt()
    }
  }

  static func environmentId() -> Selection<UUIDScalar, Objects.Delivery> {
    Selection<UUIDScalar, Objects.Delivery> {
      try $0.environmentId()
    }
  }

  static func environment<T>(selection: Selection<T, Objects.Environment>) -> Selection<
    T, Objects.Delivery
  > {
    Selection<T, Objects.Delivery> {
      try $0.environment(selection: selection)
    }
  }

  static func recipients<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.Recipient]>
  ) -> Selection<T, Objects.Delivery> {
    Selection<T, Objects.Delivery> {
      try $0.recipients(order: order, limit: limit, page: page, selection: selection)
    }
  }
}
extension Objects.DestroyOtherSessionsResponse {

  static func success() -> Selection<Bool, Objects.DestroyOtherSessionsResponse> {
    Selection<Bool, Objects.DestroyOtherSessionsResponse> {
      try $0.success()
    }
  }
}
extension Objects.Environment {

  static func id() -> Selection<UUIDScalar, Objects.Environment> {
    Selection<UUIDScalar, Objects.Environment> {
      try $0.id()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar, Objects.Environment> {
    Selection<UUIDScalar, Objects.Environment> {
      try $0.workspaceId()
    }
  }

  static func name() -> Selection<String, Objects.Environment> {
    Selection<String, Objects.Environment> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Environment> {
    Selection<String, Objects.Environment> {
      try $0.identifier()
    }
  }

  static func isLive() -> Selection<Bool, Objects.Environment> {
    Selection<Bool, Objects.Environment> {
      try $0.isLive()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Environment> {
    Selection<DateTimeScalar, Objects.Environment> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Environment> {
    Selection<DateTimeScalar, Objects.Environment> {
      try $0.updatedAt()
    }
  }
}
extension Objects.Event {

  static func id() -> Selection<UUIDScalar, Objects.Event> {
    Selection<UUIDScalar, Objects.Event> {
      try $0.id()
    }
  }

  static func eventTypeId() -> Selection<UUIDScalar, Objects.Event> {
    Selection<UUIDScalar, Objects.Event> {
      try $0.eventTypeId()
    }
  }

  static func accountId() -> Selection<UUIDScalar, Objects.Event> {
    Selection<UUIDScalar, Objects.Event> {
      try $0.accountId()
    }
  }

  static func data() -> Selection<JSONScalar, Objects.Event> {
    Selection<JSONScalar, Objects.Event> {
      try $0.data()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Event> {
    Selection<DateTimeScalar, Objects.Event> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Event> {
    Selection<DateTimeScalar, Objects.Event> {
      try $0.updatedAt()
    }
  }

  static func timestamp() -> Selection<DateTimeScalar, Objects.Event> {
    Selection<DateTimeScalar, Objects.Event> {
      try $0.timestamp()
    }
  }

  static func environmentId() -> Selection<UUIDScalar, Objects.Event> {
    Selection<UUIDScalar, Objects.Event> {
      try $0.environmentId()
    }
  }

  static func eventType<T>(selection: Selection<T, Objects.EventType>) -> Selection<
    T, Objects.Event
  > {
    Selection<T, Objects.Event> {
      try $0.eventType(selection: selection)
    }
  }

  static func account<T>(selection: Selection<T, Objects.Account>) -> Selection<T, Objects.Event> {
    Selection<T, Objects.Event> {
      try $0.account(selection: selection)
    }
  }
}
extension Objects.EventType {

  static func id() -> Selection<UUIDScalar, Objects.EventType> {
    Selection<UUIDScalar, Objects.EventType> {
      try $0.id()
    }
  }

  static func name() -> Selection<String, Objects.EventType> {
    Selection<String, Objects.EventType> {
      try $0.name()
    }
  }

  static func lastReceivedAt() -> Selection<DateTimeScalar?, Objects.EventType> {
    Selection<DateTimeScalar?, Objects.EventType> {
      try $0.lastReceivedAt()
    }
  }

  static func archivedAt() -> Selection<DateTimeScalar?, Objects.EventType> {
    Selection<DateTimeScalar?, Objects.EventType> {
      try $0.archivedAt()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.EventType> {
    Selection<DateTimeScalar, Objects.EventType> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.EventType> {
    Selection<DateTimeScalar, Objects.EventType> {
      try $0.updatedAt()
    }
  }

  static func operationId() -> Selection<UUIDScalar?, Objects.EventType> {
    Selection<UUIDScalar?, Objects.EventType> {
      try $0.operationId()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar, Objects.EventType> {
    Selection<UUIDScalar, Objects.EventType> {
      try $0.workspaceId()
    }
  }
}
extension Objects.ExportExternalRecordsResponse {

  static func success() -> Selection<Bool, Objects.ExportExternalRecordsResponse> {
    Selection<Bool, Objects.ExportExternalRecordsResponse> {
      try $0.success()
    }
  }
}
extension Objects.ExternalAsset {

  static func id() -> Selection<UUIDScalar, Objects.ExternalAsset> {
    Selection<UUIDScalar, Objects.ExternalAsset> {
      try $0.id()
    }
  }

  static func installationId() -> Selection<UUIDScalar, Objects.ExternalAsset> {
    Selection<UUIDScalar, Objects.ExternalAsset> {
      try $0.installationId()
    }
  }

  static func externalColumnId() -> Selection<UUIDScalar, Objects.ExternalAsset> {
    Selection<UUIDScalar, Objects.ExternalAsset> {
      try $0.externalColumnId()
    }
  }

  static func storageProviderId() -> Selection<UUIDScalar?, Objects.ExternalAsset> {
    Selection<UUIDScalar?, Objects.ExternalAsset> {
      try $0.storageProviderId()
    }
  }

  static func status() -> Selection<String?, Objects.ExternalAsset> {
    Selection<String?, Objects.ExternalAsset> {
      try $0.status()
    }
  }

  static func data() -> Selection<JSONScalar?, Objects.ExternalAsset> {
    Selection<JSONScalar?, Objects.ExternalAsset> {
      try $0.data()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.ExternalAsset> {
    Selection<DateTimeScalar, Objects.ExternalAsset> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.ExternalAsset> {
    Selection<DateTimeScalar, Objects.ExternalAsset> {
      try $0.updatedAt()
    }
  }
}
extension Objects.ExternalColumn {

  static func id() -> Selection<UUIDScalar, Objects.ExternalColumn> {
    Selection<UUIDScalar, Objects.ExternalColumn> {
      try $0.id()
    }
  }

  static func externalTableId() -> Selection<UUIDScalar, Objects.ExternalColumn> {
    Selection<UUIDScalar, Objects.ExternalColumn> {
      try $0.externalTableId()
    }
  }

  static func name() -> Selection<String, Objects.ExternalColumn> {
    Selection<String, Objects.ExternalColumn> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.ExternalColumn> {
    Selection<String, Objects.ExternalColumn> {
      try $0.identifier()
    }
  }

  static func fieldType() -> Selection<String, Objects.ExternalColumn> {
    Selection<String, Objects.ExternalColumn> {
      try $0.fieldType()
    }
  }

  static func settings() -> Selection<JSONScalar?, Objects.ExternalColumn> {
    Selection<JSONScalar?, Objects.ExternalColumn> {
      try $0.settings()
    }
  }

  static func position() -> Selection<Int, Objects.ExternalColumn> {
    Selection<Int, Objects.ExternalColumn> {
      try $0.position()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.ExternalColumn> {
    Selection<DateTimeScalar, Objects.ExternalColumn> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.ExternalColumn> {
    Selection<DateTimeScalar, Objects.ExternalColumn> {
      try $0.updatedAt()
    }
  }

  static func isRepeated() -> Selection<Bool, Objects.ExternalColumn> {
    Selection<Bool, Objects.ExternalColumn> {
      try $0.isRepeated()
    }
  }

  static func dbMeta() -> Selection<JSONScalar, Objects.ExternalColumn> {
    Selection<JSONScalar, Objects.ExternalColumn> {
      try $0.dbMeta()
    }
  }

  static func uiMeta() -> Selection<JSONScalar, Objects.ExternalColumn> {
    Selection<JSONScalar, Objects.ExternalColumn> {
      try $0.uiMeta()
    }
  }
}
extension Objects.ExternalLog {

  static func id() -> Selection<UUIDScalar, Objects.ExternalLog> {
    Selection<UUIDScalar, Objects.ExternalLog> {
      try $0.id()
    }
  }

  static func installationId() -> Selection<UUIDScalar, Objects.ExternalLog> {
    Selection<UUIDScalar, Objects.ExternalLog> {
      try $0.installationId()
    }
  }

  static func kind() -> Selection<Enums.ExternalLogKind, Objects.ExternalLog> {
    Selection<Enums.ExternalLogKind, Objects.ExternalLog> {
      try $0.kind()
    }
  }

  static func timeTaken() -> Selection<Int?, Objects.ExternalLog> {
    Selection<Int?, Objects.ExternalLog> {
      try $0.timeTaken()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.ExternalLog> {
    Selection<DateTimeScalar, Objects.ExternalLog> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.ExternalLog> {
    Selection<DateTimeScalar, Objects.ExternalLog> {
      try $0.updatedAt()
    }
  }

  static func requestUid() -> Selection<String?, Objects.ExternalLog> {
    Selection<String?, Objects.ExternalLog> {
      try $0.requestUid()
    }
  }

  static func requestParts() -> Selection<JSONScalar?, Objects.ExternalLog> {
    Selection<JSONScalar?, Objects.ExternalLog> {
      try $0.requestParts()
    }
  }

  static func requestBody() -> Selection<[Int]?, Objects.ExternalLog> {
    Selection<[Int]?, Objects.ExternalLog> {
      try $0.requestBody()
    }
  }

  static func responseParts() -> Selection<JSONScalar?, Objects.ExternalLog> {
    Selection<JSONScalar?, Objects.ExternalLog> {
      try $0.responseParts()
    }
  }

  static func responseBody() -> Selection<[Int]?, Objects.ExternalLog> {
    Selection<[Int]?, Objects.ExternalLog> {
      try $0.responseBody()
    }
  }

  static func status() -> Selection<Enums.ExternalLogStatus, Objects.ExternalLog> {
    Selection<Enums.ExternalLogStatus, Objects.ExternalLog> {
      try $0.status()
    }
  }

  static func statusReason() -> Selection<String?, Objects.ExternalLog> {
    Selection<String?, Objects.ExternalLog> {
      try $0.statusReason()
    }
  }

  static func environmentId() -> Selection<UUIDScalar, Objects.ExternalLog> {
    Selection<UUIDScalar, Objects.ExternalLog> {
      try $0.environmentId()
    }
  }
}
extension Objects.ExternalPolymorphicView {

  static func id() -> Selection<UUIDScalar, Objects.ExternalPolymorphicView> {
    Selection<UUIDScalar, Objects.ExternalPolymorphicView> {
      try $0.id()
    }
  }

  static func externalTableId() -> Selection<UUIDScalar, Objects.ExternalPolymorphicView> {
    Selection<UUIDScalar, Objects.ExternalPolymorphicView> {
      try $0.externalTableId()
    }
  }

  static func name() -> Selection<String, Objects.ExternalPolymorphicView> {
    Selection<String, Objects.ExternalPolymorphicView> {
      try $0.name()
    }
  }

  static func value() -> Selection<String, Objects.ExternalPolymorphicView> {
    Selection<String, Objects.ExternalPolymorphicView> {
      try $0.value()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.ExternalPolymorphicView> {
    Selection<DateTimeScalar, Objects.ExternalPolymorphicView> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.ExternalPolymorphicView> {
    Selection<DateTimeScalar, Objects.ExternalPolymorphicView> {
      try $0.updatedAt()
    }
  }
}
extension Objects.ExternalRelationship {

  static func id() -> Selection<UUIDScalar, Objects.ExternalRelationship> {
    Selection<UUIDScalar, Objects.ExternalRelationship> {
      try $0.id()
    }
  }

  static func installationId() -> Selection<UUIDScalar, Objects.ExternalRelationship> {
    Selection<UUIDScalar, Objects.ExternalRelationship> {
      try $0.installationId()
    }
  }

  static func sourceExternalTableId() -> Selection<UUIDScalar, Objects.ExternalRelationship> {
    Selection<UUIDScalar, Objects.ExternalRelationship> {
      try $0.sourceExternalTableId()
    }
  }

  static func sourceExternalColumnId() -> Selection<UUIDScalar, Objects.ExternalRelationship> {
    Selection<UUIDScalar, Objects.ExternalRelationship> {
      try $0.sourceExternalColumnId()
    }
  }

  static func destinationExternalTableId() -> Selection<UUIDScalar, Objects.ExternalRelationship> {
    Selection<UUIDScalar, Objects.ExternalRelationship> {
      try $0.destinationExternalTableId()
    }
  }

  static func destinationExternalColumnId() -> Selection<UUIDScalar, Objects.ExternalRelationship> {
    Selection<UUIDScalar, Objects.ExternalRelationship> {
      try $0.destinationExternalColumnId()
    }
  }

  static func kind() -> Selection<Enums.ExternalRelationshipKind, Objects.ExternalRelationship> {
    Selection<Enums.ExternalRelationshipKind, Objects.ExternalRelationship> {
      try $0.kind()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.ExternalRelationship> {
    Selection<DateTimeScalar, Objects.ExternalRelationship> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.ExternalRelationship> {
    Selection<DateTimeScalar, Objects.ExternalRelationship> {
      try $0.updatedAt()
    }
  }

  static func sourceExternalTable<T>(selection: Selection<T, Objects.ExternalTable>) -> Selection<
    T, Objects.ExternalRelationship
  > {
    Selection<T, Objects.ExternalRelationship> {
      try $0.sourceExternalTable(selection: selection)
    }
  }

  static func sourceExternalColumn<T>(selection: Selection<T, Objects.ExternalColumn>) -> Selection<
    T, Objects.ExternalRelationship
  > {
    Selection<T, Objects.ExternalRelationship> {
      try $0.sourceExternalColumn(selection: selection)
    }
  }

  static func destinationExternalTable<T>(selection: Selection<T, Objects.ExternalTable>)
    -> Selection<T, Objects.ExternalRelationship>
  {
    Selection<T, Objects.ExternalRelationship> {
      try $0.destinationExternalTable(selection: selection)
    }
  }

  static func destinationExternalColumn<T>(selection: Selection<T, Objects.ExternalColumn>)
    -> Selection<T, Objects.ExternalRelationship>
  {
    Selection<T, Objects.ExternalRelationship> {
      try $0.destinationExternalColumn(selection: selection)
    }
  }
}
extension Objects.ExternalTable {

  static func id() -> Selection<UUIDScalar, Objects.ExternalTable> {
    Selection<UUIDScalar, Objects.ExternalTable> {
      try $0.id()
    }
  }

  static func installationId() -> Selection<UUIDScalar, Objects.ExternalTable> {
    Selection<UUIDScalar, Objects.ExternalTable> {
      try $0.installationId()
    }
  }

  static func name() -> Selection<String, Objects.ExternalTable> {
    Selection<String, Objects.ExternalTable> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.ExternalTable> {
    Selection<String, Objects.ExternalTable> {
      try $0.identifier()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.ExternalTable> {
    Selection<DateTimeScalar, Objects.ExternalTable> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.ExternalTable> {
    Selection<DateTimeScalar, Objects.ExternalTable> {
      try $0.updatedAt()
    }
  }

  static func titleColumnId() -> Selection<UUIDScalar?, Objects.ExternalTable> {
    Selection<UUIDScalar?, Objects.ExternalTable> {
      try $0.titleColumnId()
    }
  }

  static func polymorphicColumnId() -> Selection<UUIDScalar?, Objects.ExternalTable> {
    Selection<UUIDScalar?, Objects.ExternalTable> {
      try $0.polymorphicColumnId()
    }
  }

  static func dbMeta() -> Selection<JSONScalar, Objects.ExternalTable> {
    Selection<JSONScalar, Objects.ExternalTable> {
      try $0.dbMeta()
    }
  }

  static func uiMeta() -> Selection<JSONScalar, Objects.ExternalTable> {
    Selection<JSONScalar, Objects.ExternalTable> {
      try $0.uiMeta()
    }
  }

  static func externalPolymorphicViews<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalPolymorphicView]>
  ) -> Selection<T, Objects.ExternalTable> {
    Selection<T, Objects.ExternalTable> {
      try $0.externalPolymorphicViews(order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func titleColumn<T>(selection: Selection<T, Objects.ExternalColumn?>) -> Selection<
    T, Objects.ExternalTable
  > {
    Selection<T, Objects.ExternalTable> {
      try $0.titleColumn(selection: selection)
    }
  }

  static func polymorphicColumn<T>(selection: Selection<T, Objects.ExternalColumn?>) -> Selection<
    T, Objects.ExternalTable
  > {
    Selection<T, Objects.ExternalTable> {
      try $0.polymorphicColumn(selection: selection)
    }
  }
}
extension Objects.FetchContactsResponse {

  static func contacts<T>(selection: Selection<T, [Objects.Contact]>) -> Selection<
    T, Objects.FetchContactsResponse
  > {
    Selection<T, Objects.FetchContactsResponse> {
      try $0.contacts(selection: selection)
    }
  }
}
extension Objects.FetchStoredPreferencesResponse {

  static func preferenceData() -> Selection<JSONScalar, Objects.FetchStoredPreferencesResponse> {
    Selection<JSONScalar, Objects.FetchStoredPreferencesResponse> {
      try $0.preferenceData()
    }
  }
}
extension Objects.Field {

  static func id() -> Selection<UUIDScalar, Objects.Field> {
    Selection<UUIDScalar, Objects.Field> {
      try $0.id()
    }
  }

  static func contentTypeId() -> Selection<UUIDScalar, Objects.Field> {
    Selection<UUIDScalar, Objects.Field> {
      try $0.contentTypeId()
    }
  }

  static func fieldType() -> Selection<String, Objects.Field> {
    Selection<String, Objects.Field> {
      try $0.fieldType()
    }
  }

  static func name() -> Selection<String, Objects.Field> {
    Selection<String, Objects.Field> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Field> {
    Selection<String, Objects.Field> {
      try $0.identifier()
    }
  }

  static func position() -> Selection<Int, Objects.Field> {
    Selection<Int, Objects.Field> {
      try $0.position()
    }
  }

  static func isRepeated() -> Selection<Bool, Objects.Field> {
    Selection<Bool, Objects.Field> {
      try $0.isRepeated()
    }
  }

  static func defaultValue() -> Selection<String?, Objects.Field> {
    Selection<String?, Objects.Field> {
      try $0.defaultValue()
    }
  }

  static func placeholder() -> Selection<String?, Objects.Field> {
    Selection<String?, Objects.Field> {
      try $0.placeholder()
    }
  }

  static func helpText() -> Selection<String?, Objects.Field> {
    Selection<String?, Objects.Field> {
      try $0.helpText()
    }
  }

  static func settings() -> Selection<JSONScalar, Objects.Field> {
    Selection<JSONScalar, Objects.Field> {
      try $0.settings()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Field> {
    Selection<DateTimeScalar, Objects.Field> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Field> {
    Selection<DateTimeScalar, Objects.Field> {
      try $0.updatedAt()
    }
  }

  static func restrictions() -> Selection<[UUIDScalar], Objects.Field> {
    Selection<[UUIDScalar], Objects.Field> {
      try $0.restrictions()
    }
  }

  static func isTranslatable() -> Selection<Bool, Objects.Field> {
    Selection<Bool, Objects.Field> {
      try $0.isTranslatable()
    }
  }

  static func fieldRestrictions<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.FieldRestriction]>
  ) -> Selection<T, Objects.Field> {
    Selection<T, Objects.Field> {
      try $0.fieldRestrictions(order: order, limit: limit, page: page, selection: selection)
    }
  }
}
extension Objects.FieldOrderingInput {

  static func id() -> Selection<UUIDScalar, Objects.FieldOrderingInput> {
    Selection<UUIDScalar, Objects.FieldOrderingInput> {
      try $0.id()
    }
  }

  static func direction() -> Selection<Enums.SortDirection, Objects.FieldOrderingInput> {
    Selection<Enums.SortDirection, Objects.FieldOrderingInput> {
      try $0.direction()
    }
  }
}
extension Objects.FieldRestriction {

  static func id() -> Selection<UUIDScalar, Objects.FieldRestriction> {
    Selection<UUIDScalar, Objects.FieldRestriction> {
      try $0.id()
    }
  }

  static func fieldId() -> Selection<UUIDScalar, Objects.FieldRestriction> {
    Selection<UUIDScalar, Objects.FieldRestriction> {
      try $0.fieldId()
    }
  }

  static func contentTypeId() -> Selection<UUIDScalar, Objects.FieldRestriction> {
    Selection<UUIDScalar, Objects.FieldRestriction> {
      try $0.contentTypeId()
    }
  }

  static func position() -> Selection<Int, Objects.FieldRestriction> {
    Selection<Int, Objects.FieldRestriction> {
      try $0.position()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.FieldRestriction> {
    Selection<DateTimeScalar, Objects.FieldRestriction> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.FieldRestriction> {
    Selection<DateTimeScalar, Objects.FieldRestriction> {
      try $0.updatedAt()
    }
  }

  static func contentType<T>(selection: Selection<T, Objects.ContentType>) -> Selection<
    T, Objects.FieldRestriction
  > {
    Selection<T, Objects.FieldRestriction> {
      try $0.contentType(selection: selection)
    }
  }
}
extension Objects.FieldType {

  static func name() -> Selection<String, Objects.FieldType> {
    Selection<String, Objects.FieldType> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.FieldType> {
    Selection<String, Objects.FieldType> {
      try $0.identifier()
    }
  }

  static func icon() -> Selection<String, Objects.FieldType> {
    Selection<String, Objects.FieldType> {
      try $0.icon()
    }
  }

  static func position() -> Selection<Int, Objects.FieldType> {
    Selection<Int, Objects.FieldType> {
      try $0.position()
    }
  }

  static func category() -> Selection<Enums.FieldTypeCategory, Objects.FieldType> {
    Selection<Enums.FieldTypeCategory, Objects.FieldType> {
      try $0.category()
    }
  }

  static func dataType() -> Selection<Enums.FieldTypeDataType, Objects.FieldType> {
    Selection<Enums.FieldTypeDataType, Objects.FieldType> {
      try $0.dataType()
    }
  }

  static func defaultValue() -> Selection<String?, Objects.FieldType> {
    Selection<String?, Objects.FieldType> {
      try $0.defaultValue()
    }
  }

  static func placeholder() -> Selection<String?, Objects.FieldType> {
    Selection<String?, Objects.FieldType> {
      try $0.placeholder()
    }
  }

  static func helpText() -> Selection<String?, Objects.FieldType> {
    Selection<String?, Objects.FieldType> {
      try $0.helpText()
    }
  }

  static func configuration() -> Selection<JSONScalar, Objects.FieldType> {
    Selection<JSONScalar, Objects.FieldType> {
      try $0.configuration()
    }
  }

  static func settings() -> Selection<JSONScalar, Objects.FieldType> {
    Selection<JSONScalar, Objects.FieldType> {
      try $0.settings()
    }
  }
}
extension Objects.Flow {

  static func id() -> Selection<UUIDScalar, Objects.Flow> {
    Selection<UUIDScalar, Objects.Flow> {
      try $0.id()
    }
  }

  static func name() -> Selection<String, Objects.Flow> {
    Selection<String, Objects.Flow> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Flow> {
    Selection<String, Objects.Flow> {
      try $0.identifier()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Flow> {
    Selection<DateTimeScalar, Objects.Flow> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Flow> {
    Selection<DateTimeScalar, Objects.Flow> {
      try $0.updatedAt()
    }
  }

  static func status() -> Selection<Enums.FlowVersionStatus, Objects.Flow> {
    Selection<Enums.FlowVersionStatus, Objects.Flow> {
      try $0.status()
    }
  }

  static func runCount() -> Selection<Int, Objects.Flow> {
    Selection<Int, Objects.Flow> {
      try $0.runCount()
    }
  }

  static func lastRunAt() -> Selection<DateTimeScalar?, Objects.Flow> {
    Selection<DateTimeScalar?, Objects.Flow> {
      try $0.lastRunAt()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar, Objects.Flow> {
    Selection<UUIDScalar, Objects.Flow> {
      try $0.workspaceId()
    }
  }

  static func flowVersions<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.FlowVersion]>
  ) -> Selection<T, Objects.Flow> {
    Selection<T, Objects.Flow> {
      try $0.flowVersions(order: order, limit: limit, page: page, selection: selection)
    }
  }
}
extension Objects.FlowExecution {

  static func id() -> Selection<UUIDScalar, Objects.FlowExecution> {
    Selection<UUIDScalar, Objects.FlowExecution> {
      try $0.id()
    }
  }

  static func flowVersionId() -> Selection<UUIDScalar, Objects.FlowExecution> {
    Selection<UUIDScalar, Objects.FlowExecution> {
      try $0.flowVersionId()
    }
  }

  static func failureReason() -> Selection<String?, Objects.FlowExecution> {
    Selection<String?, Objects.FlowExecution> {
      try $0.failureReason()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.FlowExecution> {
    Selection<DateTimeScalar, Objects.FlowExecution> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.FlowExecution> {
    Selection<DateTimeScalar, Objects.FlowExecution> {
      try $0.updatedAt()
    }
  }

  static func enteredAt() -> Selection<DateTimeScalar?, Objects.FlowExecution> {
    Selection<DateTimeScalar?, Objects.FlowExecution> {
      try $0.enteredAt()
    }
  }

  static func exitedAt() -> Selection<DateTimeScalar?, Objects.FlowExecution> {
    Selection<DateTimeScalar?, Objects.FlowExecution> {
      try $0.exitedAt()
    }
  }

  static func accountId() -> Selection<UUIDScalar?, Objects.FlowExecution> {
    Selection<UUIDScalar?, Objects.FlowExecution> {
      try $0.accountId()
    }
  }

  static func status() -> Selection<Enums.FlowExecutionStatus, Objects.FlowExecution> {
    Selection<Enums.FlowExecutionStatus, Objects.FlowExecution> {
      try $0.status()
    }
  }

  static func environmentId() -> Selection<UUIDScalar, Objects.FlowExecution> {
    Selection<UUIDScalar, Objects.FlowExecution> {
      try $0.environmentId()
    }
  }

  static func flowVersion<T>(selection: Selection<T, Objects.FlowVersion>) -> Selection<
    T, Objects.FlowExecution
  > {
    Selection<T, Objects.FlowExecution> {
      try $0.flowVersion(selection: selection)
    }
  }

  static func environment<T>(selection: Selection<T, Objects.Environment>) -> Selection<
    T, Objects.FlowExecution
  > {
    Selection<T, Objects.FlowExecution> {
      try $0.environment(selection: selection)
    }
  }
}
extension Objects.FlowExecutionNode {

  static func id() -> Selection<UUIDScalar, Objects.FlowExecutionNode> {
    Selection<UUIDScalar, Objects.FlowExecutionNode> {
      try $0.id()
    }
  }

  static func flowExecutionId() -> Selection<UUIDScalar, Objects.FlowExecutionNode> {
    Selection<UUIDScalar, Objects.FlowExecutionNode> {
      try $0.flowExecutionId()
    }
  }

  static func flowNodeId() -> Selection<UUIDScalar, Objects.FlowExecutionNode> {
    Selection<UUIDScalar, Objects.FlowExecutionNode> {
      try $0.flowNodeId()
    }
  }

  static func data() -> Selection<JSONScalar, Objects.FlowExecutionNode> {
    Selection<JSONScalar, Objects.FlowExecutionNode> {
      try $0.data()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.FlowExecutionNode> {
    Selection<DateTimeScalar, Objects.FlowExecutionNode> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.FlowExecutionNode> {
    Selection<DateTimeScalar, Objects.FlowExecutionNode> {
      try $0.updatedAt()
    }
  }

  static func status() -> Selection<Enums.FlowExecutionNodeStatus, Objects.FlowExecutionNode> {
    Selection<Enums.FlowExecutionNodeStatus, Objects.FlowExecutionNode> {
      try $0.status()
    }
  }

  static func enteredAt() -> Selection<DateTimeScalar?, Objects.FlowExecutionNode> {
    Selection<DateTimeScalar?, Objects.FlowExecutionNode> {
      try $0.enteredAt()
    }
  }

  static func exitedAt() -> Selection<DateTimeScalar?, Objects.FlowExecutionNode> {
    Selection<DateTimeScalar?, Objects.FlowExecutionNode> {
      try $0.exitedAt()
    }
  }

  static func failureReason() -> Selection<String?, Objects.FlowExecutionNode> {
    Selection<String?, Objects.FlowExecutionNode> {
      try $0.failureReason()
    }
  }

  static func scheduledAt() -> Selection<DateTimeScalar?, Objects.FlowExecutionNode> {
    Selection<DateTimeScalar?, Objects.FlowExecutionNode> {
      try $0.scheduledAt()
    }
  }

  static func timeoutAt() -> Selection<DateTimeScalar?, Objects.FlowExecutionNode> {
    Selection<DateTimeScalar?, Objects.FlowExecutionNode> {
      try $0.timeoutAt()
    }
  }

  static func flowExecution<T>(selection: Selection<T, Objects.FlowExecution>) -> Selection<
    T, Objects.FlowExecutionNode
  > {
    Selection<T, Objects.FlowExecutionNode> {
      try $0.flowExecution(selection: selection)
    }
  }

  static func flowNode<T>(selection: Selection<T, Objects.FlowNode>) -> Selection<
    T, Objects.FlowExecutionNode
  > {
    Selection<T, Objects.FlowExecutionNode> {
      try $0.flowNode(selection: selection)
    }
  }
}
extension Objects.FlowNode {

  static func id() -> Selection<UUIDScalar, Objects.FlowNode> {
    Selection<UUIDScalar, Objects.FlowNode> {
      try $0.id()
    }
  }

  static func flowVersionId() -> Selection<UUIDScalar, Objects.FlowNode> {
    Selection<UUIDScalar, Objects.FlowNode> {
      try $0.flowVersionId()
    }
  }

  static func identifier() -> Selection<String, Objects.FlowNode> {
    Selection<String, Objects.FlowNode> {
      try $0.identifier()
    }
  }

  static func kind() -> Selection<Enums.FlowNodeKind, Objects.FlowNode> {
    Selection<Enums.FlowNodeKind, Objects.FlowNode> {
      try $0.kind()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.FlowNode> {
    Selection<DateTimeScalar, Objects.FlowNode> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.FlowNode> {
    Selection<DateTimeScalar, Objects.FlowNode> {
      try $0.updatedAt()
    }
  }

  static func eventTypeId() -> Selection<UUIDScalar?, Objects.FlowNode> {
    Selection<UUIDScalar?, Objects.FlowNode> {
      try $0.eventTypeId()
    }
  }

  static func settings() -> Selection<JSONScalar, Objects.FlowNode> {
    Selection<JSONScalar, Objects.FlowNode> {
      try $0.settings()
    }
  }

  static func description() -> Selection<String?, Objects.FlowNode> {
    Selection<String?, Objects.FlowNode> {
      try $0.description()
    }
  }

  static func summary() -> Selection<String?, Objects.FlowNode> {
    Selection<String?, Objects.FlowNode> {
      try $0.summary()
    }
  }

  static func occurrenceKind() -> Selection<Enums.FlowNodeOccurrenceKind, Objects.FlowNode> {
    Selection<Enums.FlowNodeOccurrenceKind, Objects.FlowNode> {
      try $0.occurrenceKind()
    }
  }

  static func occurrenceCount() -> Selection<Int, Objects.FlowNode> {
    Selection<Int, Objects.FlowNode> {
      try $0.occurrenceCount()
    }
  }

  static func occurrenceWindowPeriod() -> Selection<
    Enums.FlowNodeOccurrenceWindowPeriod, Objects.FlowNode
  > {
    Selection<Enums.FlowNodeOccurrenceWindowPeriod, Objects.FlowNode> {
      try $0.occurrenceWindowPeriod()
    }
  }

  static func occurrenceWindowAmount() -> Selection<Int, Objects.FlowNode> {
    Selection<Int, Objects.FlowNode> {
      try $0.occurrenceWindowAmount()
    }
  }

  static func waitBehavior() -> Selection<Enums.FlowNodeWaitBehavior, Objects.FlowNode> {
    Selection<Enums.FlowNodeWaitBehavior, Objects.FlowNode> {
      try $0.waitBehavior()
    }
  }

  static func waitForPeriod() -> Selection<Enums.FlowNodeWaitForPeriod, Objects.FlowNode> {
    Selection<Enums.FlowNodeWaitForPeriod, Objects.FlowNode> {
      try $0.waitForPeriod()
    }
  }

  static func waitForAmount() -> Selection<Int, Objects.FlowNode> {
    Selection<Int, Objects.FlowNode> {
      try $0.waitForAmount()
    }
  }

  static func waitUntilPeriod() -> Selection<Enums.FlowNodeWaitUntilPeriod, Objects.FlowNode> {
    Selection<Enums.FlowNodeWaitUntilPeriod, Objects.FlowNode> {
      try $0.waitUntilPeriod()
    }
  }

  static func waitUntilMinute() -> Selection<Int?, Objects.FlowNode> {
    Selection<Int?, Objects.FlowNode> {
      try $0.waitUntilMinute()
    }
  }

  static func waitUntilHour() -> Selection<Int?, Objects.FlowNode> {
    Selection<Int?, Objects.FlowNode> {
      try $0.waitUntilHour()
    }
  }

  static func waitUntilDay() -> Selection<Int?, Objects.FlowNode> {
    Selection<Int?, Objects.FlowNode> {
      try $0.waitUntilDay()
    }
  }

  static func operationId() -> Selection<UUIDScalar?, Objects.FlowNode> {
    Selection<UUIDScalar?, Objects.FlowNode> {
      try $0.operationId()
    }
  }

  static func occurrenceScope() -> Selection<Enums.FlowNodeOccurrenceScope, Objects.FlowNode> {
    Selection<Enums.FlowNodeOccurrenceScope, Objects.FlowNode> {
      try $0.occurrenceScope()
    }
  }

  static func repeatability() -> Selection<Enums.FlowNodeRepeatability, Objects.FlowNode> {
    Selection<Enums.FlowNodeRepeatability, Objects.FlowNode> {
      try $0.repeatability()
    }
  }

  static func waitUntilWeekday() -> Selection<Enums.FlowNodeWaitUntilWeekday?, Objects.FlowNode> {
    Selection<Enums.FlowNodeWaitUntilWeekday?, Objects.FlowNode> {
      try $0.waitUntilWeekday()
    }
  }

  static func occurrenceBehavior() -> Selection<Enums.FlowNodeOccurrenceBehavior, Objects.FlowNode>
  {
    Selection<Enums.FlowNodeOccurrenceBehavior, Objects.FlowNode> {
      try $0.occurrenceBehavior()
    }
  }

  static func arguments() -> Selection<JSONScalar?, Objects.FlowNode> {
    Selection<JSONScalar?, Objects.FlowNode> {
      try $0.arguments()
    }
  }

  static func dataFilter() -> Selection<JSONScalar?, Objects.FlowNode> {
    Selection<JSONScalar?, Objects.FlowNode> {
      try $0.dataFilter()
    }
  }

  static func isConcurrent() -> Selection<Bool, Objects.FlowNode> {
    Selection<Bool, Objects.FlowNode> {
      try $0.isConcurrent()
    }
  }
}
extension Objects.FlowVersion {

  static func id() -> Selection<UUIDScalar, Objects.FlowVersion> {
    Selection<UUIDScalar, Objects.FlowVersion> {
      try $0.id()
    }
  }

  static func flowId() -> Selection<UUIDScalar, Objects.FlowVersion> {
    Selection<UUIDScalar, Objects.FlowVersion> {
      try $0.flowId()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.FlowVersion> {
    Selection<DateTimeScalar, Objects.FlowVersion> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.FlowVersion> {
    Selection<DateTimeScalar, Objects.FlowVersion> {
      try $0.updatedAt()
    }
  }

  static func status() -> Selection<Enums.FlowVersionStatus, Objects.FlowVersion> {
    Selection<Enums.FlowVersionStatus, Objects.FlowVersion> {
      try $0.status()
    }
  }

  static func version() -> Selection<DateTimeScalar, Objects.FlowVersion> {
    Selection<DateTimeScalar, Objects.FlowVersion> {
      try $0.version()
    }
  }

  static func snapshot() -> Selection<JSONScalar, Objects.FlowVersion> {
    Selection<JSONScalar, Objects.FlowVersion> {
      try $0.snapshot()
    }
  }

  static func runCount() -> Selection<Int, Objects.FlowVersion> {
    Selection<Int, Objects.FlowVersion> {
      try $0.runCount()
    }
  }

  static func lastRunAt() -> Selection<DateTimeScalar?, Objects.FlowVersion> {
    Selection<DateTimeScalar?, Objects.FlowVersion> {
      try $0.lastRunAt()
    }
  }

  static func flow<T>(selection: Selection<T, Objects.Flow>) -> Selection<T, Objects.FlowVersion> {
    Selection<T, Objects.FlowVersion> {
      try $0.flow(selection: selection)
    }
  }
}
extension Objects.ForgotPasswordResponse {

  static func success() -> Selection<Bool, Objects.ForgotPasswordResponse> {
    Selection<Bool, Objects.ForgotPasswordResponse> {
      try $0.success()
    }
  }
}
extension Objects.GenerateIdentityTokenResponse {

  static func token() -> Selection<String, Objects.GenerateIdentityTokenResponse> {
    Selection<String, Objects.GenerateIdentityTokenResponse> {
      try $0.token()
    }
  }
}
extension Objects.Group {

  static func id() -> Selection<UUIDScalar, Objects.Group> {
    Selection<UUIDScalar, Objects.Group> {
      try $0.id()
    }
  }

  static func environmentId() -> Selection<UUIDScalar, Objects.Group> {
    Selection<UUIDScalar, Objects.Group> {
      try $0.environmentId()
    }
  }

  static func parentId() -> Selection<UUIDScalar?, Objects.Group> {
    Selection<UUIDScalar?, Objects.Group> {
      try $0.parentId()
    }
  }

  static func name() -> Selection<String, Objects.Group> {
    Selection<String, Objects.Group> {
      try $0.name()
    }
  }

  static func position() -> Selection<Int, Objects.Group> {
    Selection<Int, Objects.Group> {
      try $0.position()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Group> {
    Selection<DateTimeScalar, Objects.Group> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Group> {
    Selection<DateTimeScalar, Objects.Group> {
      try $0.updatedAt()
    }
  }

  static func accountKind() -> Selection<Enums.AccountKind, Objects.Group> {
    Selection<Enums.AccountKind, Objects.Group> {
      try $0.accountKind()
    }
  }
}
extension Objects.IdentifyProspectResponse {

  static func success() -> Selection<Bool, Objects.IdentifyProspectResponse> {
    Selection<Bool, Objects.IdentifyProspectResponse> {
      try $0.success()
    }
  }
}
extension Objects.Installation {

  static func id() -> Selection<UUIDScalar, Objects.Installation> {
    Selection<UUIDScalar, Objects.Installation> {
      try $0.id()
    }
  }

  static func appId() -> Selection<UUIDScalar, Objects.Installation> {
    Selection<UUIDScalar, Objects.Installation> {
      try $0.appId()
    }
  }

  static func name() -> Selection<String, Objects.Installation> {
    Selection<String, Objects.Installation> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Installation> {
    Selection<String, Objects.Installation> {
      try $0.identifier()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Installation> {
    Selection<DateTimeScalar, Objects.Installation> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Installation> {
    Selection<DateTimeScalar, Objects.Installation> {
      try $0.updatedAt()
    }
  }

  static func archivedAt() -> Selection<DateTimeScalar?, Objects.Installation> {
    Selection<DateTimeScalar?, Objects.Installation> {
      try $0.archivedAt()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar, Objects.Installation> {
    Selection<UUIDScalar, Objects.Installation> {
      try $0.workspaceId()
    }
  }

  static func appKind() -> Selection<Enums.AppKind, Objects.Installation> {
    Selection<Enums.AppKind, Objects.Installation> {
      try $0.appKind()
    }
  }

  static func app<T>(selection: Selection<T, Objects.App>) -> Selection<T, Objects.Installation> {
    Selection<T, Objects.Installation> {
      try $0.app(selection: selection)
    }
  }
}
extension Objects.Item {

  static func id() -> Selection<UUIDScalar, Objects.Item> {
    Selection<UUIDScalar, Objects.Item> {
      try $0.id()
    }
  }

  static func kind() -> Selection<Enums.ItemKind, Objects.Item> {
    Selection<Enums.ItemKind, Objects.Item> {
      try $0.kind()
    }
  }

  static func name() -> Selection<String, Objects.Item> {
    Selection<String, Objects.Item> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Item> {
    Selection<String, Objects.Item> {
      try $0.identifier()
    }
  }

  static func description() -> Selection<String?, Objects.Item> {
    Selection<String?, Objects.Item> {
      try $0.description()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Item> {
    Selection<DateTimeScalar, Objects.Item> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Item> {
    Selection<DateTimeScalar, Objects.Item> {
      try $0.updatedAt()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar, Objects.Item> {
    Selection<UUIDScalar, Objects.Item> {
      try $0.workspaceId()
    }
  }

  static func itemCategoryMemberships<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.ItemCategoryMembership]>
  ) -> Selection<T, Objects.Item> {
    Selection<T, Objects.Item> {
      try $0.itemCategoryMemberships(order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func pricings<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.Pricing]>
  ) -> Selection<T, Objects.Item> {
    Selection<T, Objects.Item> {
      try $0.pricings(order: order, limit: limit, page: page, selection: selection)
    }
  }
}
extension Objects.ItemCategory {

  static func id() -> Selection<UUIDScalar, Objects.ItemCategory> {
    Selection<UUIDScalar, Objects.ItemCategory> {
      try $0.id()
    }
  }

  static func name() -> Selection<String, Objects.ItemCategory> {
    Selection<String, Objects.ItemCategory> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.ItemCategory> {
    Selection<String, Objects.ItemCategory> {
      try $0.identifier()
    }
  }

  static func description() -> Selection<String?, Objects.ItemCategory> {
    Selection<String?, Objects.ItemCategory> {
      try $0.description()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.ItemCategory> {
    Selection<DateTimeScalar, Objects.ItemCategory> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.ItemCategory> {
    Selection<DateTimeScalar, Objects.ItemCategory> {
      try $0.updatedAt()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar, Objects.ItemCategory> {
    Selection<UUIDScalar, Objects.ItemCategory> {
      try $0.workspaceId()
    }
  }
}
extension Objects.ItemCategoryMembership {

  static func id() -> Selection<UUIDScalar, Objects.ItemCategoryMembership> {
    Selection<UUIDScalar, Objects.ItemCategoryMembership> {
      try $0.id()
    }
  }

  static func itemId() -> Selection<UUIDScalar, Objects.ItemCategoryMembership> {
    Selection<UUIDScalar, Objects.ItemCategoryMembership> {
      try $0.itemId()
    }
  }

  static func itemCategoryId() -> Selection<UUIDScalar, Objects.ItemCategoryMembership> {
    Selection<UUIDScalar, Objects.ItemCategoryMembership> {
      try $0.itemCategoryId()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.ItemCategoryMembership> {
    Selection<DateTimeScalar, Objects.ItemCategoryMembership> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.ItemCategoryMembership> {
    Selection<DateTimeScalar, Objects.ItemCategoryMembership> {
      try $0.updatedAt()
    }
  }

  static func item<T>(selection: Selection<T, Objects.Item>) -> Selection<
    T, Objects.ItemCategoryMembership
  > {
    Selection<T, Objects.ItemCategoryMembership> {
      try $0.item(selection: selection)
    }
  }

  static func itemCategory<T>(selection: Selection<T, Objects.ItemCategory>) -> Selection<
    T, Objects.ItemCategoryMembership
  > {
    Selection<T, Objects.ItemCategoryMembership> {
      try $0.itemCategory(selection: selection)
    }
  }
}
extension Objects.KeyPair {

  static func id() -> Selection<UUIDScalar, Objects.KeyPair> {
    Selection<UUIDScalar, Objects.KeyPair> {
      try $0.id()
    }
  }

  static func accountId() -> Selection<UUIDScalar, Objects.KeyPair> {
    Selection<UUIDScalar, Objects.KeyPair> {
      try $0.accountId()
    }
  }

  static func publicKey() -> Selection<String, Objects.KeyPair> {
    Selection<String, Objects.KeyPair> {
      try $0.publicKey()
    }
  }

  static func privateKey() -> Selection<String, Objects.KeyPair> {
    Selection<String, Objects.KeyPair> {
      try $0.privateKey()
    }
  }

  static func expiresAt() -> Selection<DateTimeScalar?, Objects.KeyPair> {
    Selection<DateTimeScalar?, Objects.KeyPair> {
      try $0.expiresAt()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.KeyPair> {
    Selection<DateTimeScalar, Objects.KeyPair> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.KeyPair> {
    Selection<DateTimeScalar, Objects.KeyPair> {
      try $0.updatedAt()
    }
  }
}
extension Objects.Locale {

  static func name() -> Selection<String, Objects.Locale> {
    Selection<String, Objects.Locale> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Locale> {
    Selection<String, Objects.Locale> {
      try $0.identifier()
    }
  }
}
extension Objects.Medium {

  static func id() -> Selection<UUIDScalar, Objects.Medium> {
    Selection<UUIDScalar, Objects.Medium> {
      try $0.id()
    }
  }

  static func fileUrl() -> Selection<String?, Objects.Medium> {
    Selection<String?, Objects.Medium> {
      try $0.fileUrl()
    }
  }

  static func metadata() -> Selection<JSONScalar?, Objects.Medium> {
    Selection<JSONScalar?, Objects.Medium> {
      try $0.metadata()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Medium> {
    Selection<DateTimeScalar, Objects.Medium> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Medium> {
    Selection<DateTimeScalar, Objects.Medium> {
      try $0.updatedAt()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar, Objects.Medium> {
    Selection<UUIDScalar, Objects.Medium> {
      try $0.workspaceId()
    }
  }
}
extension Objects.MenuElement {

  static func id() -> Selection<UUIDScalar, Objects.MenuElement> {
    Selection<UUIDScalar, Objects.MenuElement> {
      try $0.id()
    }
  }

  static func dashboardId() -> Selection<UUIDScalar, Objects.MenuElement> {
    Selection<UUIDScalar, Objects.MenuElement> {
      try $0.dashboardId()
    }
  }

  static func installationId() -> Selection<UUIDScalar?, Objects.MenuElement> {
    Selection<UUIDScalar?, Objects.MenuElement> {
      try $0.installationId()
    }
  }

  static func parentId() -> Selection<UUIDScalar?, Objects.MenuElement> {
    Selection<UUIDScalar?, Objects.MenuElement> {
      try $0.parentId()
    }
  }

  static func systemIdentifier() -> Selection<String?, Objects.MenuElement> {
    Selection<String?, Objects.MenuElement> {
      try $0.systemIdentifier()
    }
  }

  static func viewId() -> Selection<UUIDScalar?, Objects.MenuElement> {
    Selection<UUIDScalar?, Objects.MenuElement> {
      try $0.viewId()
    }
  }

  static func viewStyle() -> Selection<Enums.ViewStyle?, Objects.MenuElement> {
    Selection<Enums.ViewStyle?, Objects.MenuElement> {
      try $0.viewStyle()
    }
  }

  static func name() -> Selection<String?, Objects.MenuElement> {
    Selection<String?, Objects.MenuElement> {
      try $0.name()
    }
  }

  static func path() -> Selection<String?, Objects.MenuElement> {
    Selection<String?, Objects.MenuElement> {
      try $0.path()
    }
  }

  static func icon() -> Selection<String?, Objects.MenuElement> {
    Selection<String?, Objects.MenuElement> {
      try $0.icon()
    }
  }

  static func kind() -> Selection<Enums.MenuElementKind, Objects.MenuElement> {
    Selection<Enums.MenuElementKind, Objects.MenuElement> {
      try $0.kind()
    }
  }

  static func separatorStyle() -> Selection<Enums.MenuElementSeparatorStyle?, Objects.MenuElement> {
    Selection<Enums.MenuElementSeparatorStyle?, Objects.MenuElement> {
      try $0.separatorStyle()
    }
  }

  static func placement() -> Selection<Enums.MenuElementPlacement, Objects.MenuElement> {
    Selection<Enums.MenuElementPlacement, Objects.MenuElement> {
      try $0.placement()
    }
  }

  static func target() -> Selection<Enums.MenuElementTarget?, Objects.MenuElement> {
    Selection<Enums.MenuElementTarget?, Objects.MenuElement> {
      try $0.target()
    }
  }

  static func url() -> Selection<String?, Objects.MenuElement> {
    Selection<String?, Objects.MenuElement> {
      try $0.url()
    }
  }

  static func position() -> Selection<Int, Objects.MenuElement> {
    Selection<Int, Objects.MenuElement> {
      try $0.position()
    }
  }

  static func query() -> Selection<String?, Objects.MenuElement> {
    Selection<String?, Objects.MenuElement> {
      try $0.query()
    }
  }

  static func actions<T>(selection: Selection<T, [Objects.MenuElementAction]>) -> Selection<
    T, Objects.MenuElement
  > {
    Selection<T, Objects.MenuElement> {
      try $0.actions(selection: selection)
    }
  }

  static func isLocked() -> Selection<Bool, Objects.MenuElement> {
    Selection<Bool, Objects.MenuElement> {
      try $0.isLocked()
    }
  }

  static func isRepeated() -> Selection<Bool, Objects.MenuElement> {
    Selection<Bool, Objects.MenuElement> {
      try $0.isRepeated()
    }
  }

  static func isSticky() -> Selection<Bool, Objects.MenuElement> {
    Selection<Bool, Objects.MenuElement> {
      try $0.isSticky()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.MenuElement> {
    Selection<DateTimeScalar, Objects.MenuElement> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.MenuElement> {
    Selection<DateTimeScalar, Objects.MenuElement> {
      try $0.updatedAt()
    }
  }

  static func view<T>(selection: Selection<T, Objects.View?>) -> Selection<T, Objects.MenuElement> {
    Selection<T, Objects.MenuElement> {
      try $0.view(selection: selection)
    }
  }
}
extension Objects.MenuElementAction {

  static func icon() -> Selection<String, Objects.MenuElementAction> {
    Selection<String, Objects.MenuElementAction> {
      try $0.icon()
    }
  }

  static func name() -> Selection<String, Objects.MenuElementAction> {
    Selection<String, Objects.MenuElementAction> {
      try $0.name()
    }
  }

  static func action() -> Selection<String, Objects.MenuElementAction> {
    Selection<String, Objects.MenuElementAction> {
      try $0.action()
    }
  }
}
extension Objects.Mutation {

  static func identifyProspect<T>(
    input: InputObjects.IdentifyProspectInput,
    selection: Selection<T, Objects.IdentifyProspectResponse>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.identifyProspect(input: input, selection: selection)
    }
  }

  static func verifyProspect<T>(
    input: InputObjects.VerifyProspectInput, selection: Selection<T, Objects.Prospect>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.verifyProspect(input: input, selection: selection)
    }
  }

  static func registerWorkspace<T>(
    input: InputObjects.RegisterWorkspaceInput,
    selection: Selection<T, Objects.RegisterWorkspaceResponse>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.registerWorkspace(input: input, selection: selection)
    }
  }

  static func updateWorkspaceTheme<T>(
    input: InputObjects.UpdateWorkspaceThemeInput, selection: Selection<T, Objects.Workspace>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateWorkspaceTheme(input: input, selection: selection)
    }
  }

  static func updateWorkspaceBranding<T>(
    input: InputObjects.UpdateWorkspaceBrandingInput, selection: Selection<T, Objects.Workspace>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateWorkspaceBranding(input: input, selection: selection)
    }
  }

  static func updateWorkspaceDomain<T>(
    input: InputObjects.UpdateWorkspaceDomainInput, selection: Selection<T, Objects.Workspace>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateWorkspaceDomain(input: input, selection: selection)
    }
  }

  static func saveWorkspaceLocale<T>(
    input: InputObjects.SaveWorkspaceLocaleInput, selection: Selection<T, Objects.Workspace>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.saveWorkspaceLocale(input: input, selection: selection)
    }
  }

  static func removeWorkspaceLocale<T>(
    input: InputObjects.RemoveWorkspaceLocaleInput, selection: Selection<T, Objects.Workspace>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.removeWorkspaceLocale(input: input, selection: selection)
    }
  }

  static func createApp<T>(input: InputObjects.CreateAppInput, selection: Selection<T, Objects.App>)
    -> Selection<T, Objects.Mutation>
  {
    Selection<T, Objects.Mutation> {
      try $0.createApp(input: input, selection: selection)
    }
  }

  static func createEnvironment<T>(
    input: InputObjects.CreateEnvironmentInput, selection: Selection<T, Objects.Environment>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createEnvironment(input: input, selection: selection)
    }
  }

  static func updateEnvironment<T>(
    input: InputObjects.UpdateEnvironmentInput, selection: Selection<T, Objects.Environment>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateEnvironment(input: input, selection: selection)
    }
  }

  static func createInstallation<T>(
    input: InputObjects.CreateInstallationInput, selection: Selection<T, Objects.Installation>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createInstallation(input: input, selection: selection)
    }
  }

  static func updateInstallation<T>(
    input: InputObjects.UpdateInstallationInput, selection: Selection<T, Objects.Installation>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateInstallation(input: input, selection: selection)
    }
  }

  static func archiveInstallation<T>(
    input: InputObjects.ArchiveInstallationInput, selection: Selection<T, Objects.Installation>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.archiveInstallation(input: input, selection: selection)
    }
  }

  static func unarchiveInstallation<T>(
    input: InputObjects.UnarchiveInstallationInput, selection: Selection<T, Objects.Installation>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.unarchiveInstallation(input: input, selection: selection)
    }
  }

  static func createConfiguration<T>(
    input: InputObjects.CreateConfigurationInput, selection: Selection<T, Objects.Configuration>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createConfiguration(input: input, selection: selection)
    }
  }

  static func updateConfiguration<T>(
    input: InputObjects.UpdateConfigurationInput, selection: Selection<T, Objects.Configuration>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateConfiguration(input: input, selection: selection)
    }
  }

  static func destroyConfiguration<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Configuration>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyConfiguration(input: input, selection: selection)
    }
  }

  static func configureInstallation<T>(
    input: InputObjects.ConfigureInstallationInput, selection: Selection<T, Objects.Configuration>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.configureInstallation(input: input, selection: selection)
    }
  }

  static func createDashboard<T>(
    input: InputObjects.CreateDashboardInput, selection: Selection<T, Objects.Dashboard>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createDashboard(input: input, selection: selection)
    }
  }

  static func updateDashboard<T>(
    input: InputObjects.UpdateDashboardInput, selection: Selection<T, Objects.Dashboard>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateDashboard(input: input, selection: selection)
    }
  }

  static func addToDashboard<T>(
    input: InputObjects.AddToDashboardInput, selection: Selection<T, Objects.Dashboard>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.addToDashboard(input: input, selection: selection)
    }
  }

  static func destroyDashboard<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Dashboard>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyDashboard(input: input, selection: selection)
    }
  }

  static func updateView<T>(
    input: InputObjects.UpdateViewInput, selection: Selection<T, Objects.View>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateView(input: input, selection: selection)
    }
  }

  static func createMenuElement<T>(
    input: InputObjects.CreateMenuElementInput, selection: Selection<T, Objects.MenuElement>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createMenuElement(input: input, selection: selection)
    }
  }

  static func updateMenuElement<T>(
    input: InputObjects.UpdateMenuElementInput, selection: Selection<T, Objects.MenuElement>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateMenuElement(input: input, selection: selection)
    }
  }

  static func destroyMenuElement<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.MenuElement>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyMenuElement(input: input, selection: selection)
    }
  }

  static func createTheme<T>(
    input: InputObjects.CreateThemeInput, selection: Selection<T, Objects.Theme>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createTheme(input: input, selection: selection)
    }
  }

  static func updateTheme<T>(
    input: InputObjects.UpdateThemeInput, selection: Selection<T, Objects.Theme>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateTheme(input: input, selection: selection)
    }
  }

  static func destroyTheme<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Theme>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyTheme(input: input, selection: selection)
    }
  }

  static func createGroup<T>(
    input: InputObjects.CreateGroupInput, selection: Selection<T, Objects.Group>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createGroup(input: input, selection: selection)
    }
  }

  static func updateGroup<T>(
    input: InputObjects.UpdateGroupInput, selection: Selection<T, Objects.Group>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateGroup(input: input, selection: selection)
    }
  }

  static func destroyGroup<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Group>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyGroup(input: input, selection: selection)
    }
  }

  static func forgotPassword<T>(
    input: InputObjects.ForgotPasswordInput, selection: Selection<T, Objects.ForgotPasswordResponse>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.forgotPassword(input: input, selection: selection)
    }
  }

  static func updateAccount<T>(
    input: InputObjects.UpdateAccountInput, selection: Selection<T, Objects.Account>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateAccount(input: input, selection: selection)
    }
  }

  static func identifyAccount<T>(
    input: InputObjects.IdentifyAccountInput, selection: Selection<T, Objects.Account>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.identifyAccount(input: input, selection: selection)
    }
  }

  static func changePassword<T>(
    input: InputObjects.ChangePasswordInput, selection: Selection<T, Objects.Account>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.changePassword(input: input, selection: selection)
    }
  }

  static func changeEmail<T>(
    input: InputObjects.ChangeEmailInput, selection: Selection<T, Objects.ChangeEmailResponse>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.changeEmail(input: input, selection: selection)
    }
  }

  static func verifyEmailChange<T>(
    input: InputObjects.VerifyEmailChangeInput, selection: Selection<T, Objects.Account>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.verifyEmailChange(input: input, selection: selection)
    }
  }

  static func createAccount<T>(
    input: InputObjects.CreateAccountInput, selection: Selection<T, Objects.Account>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createAccount(input: input, selection: selection)
    }
  }

  static func completeOnboarding<T>(
    input: InputObjects.CompleteOnboardingInput, selection: Selection<T, Objects.Account>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.completeOnboarding(input: input, selection: selection)
    }
  }

  static func updateAccountAvatar<T>(
    input: InputObjects.UpdateAccountAvatarInput, selection: Selection<T, Objects.Account>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateAccountAvatar(input: input, selection: selection)
    }
  }

  static func createSession<T>(
    input: InputObjects.CreateSessionInput, selection: Selection<T, Objects.Session>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createSession(input: input, selection: selection)
    }
  }

  static func destroyOtherSessions<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.DestroyOtherSessionsResponse>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyOtherSessions(input: input, selection: selection)
    }
  }

  static func destroySession<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Session>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroySession(input: input, selection: selection)
    }
  }

  static func resetPassword<T>(
    input: InputObjects.ResetPasswordInput, selection: Selection<T, Objects.Session>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.resetPassword(input: input, selection: selection)
    }
  }

  static func startOnboarding<T>(
    input: InputObjects.StartOnboardingInput, selection: Selection<T, Objects.Session>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.startOnboarding(input: input, selection: selection)
    }
  }

  static func updateSession<T>(
    input: InputObjects.UpdateSessionInput, selection: Selection<T, Objects.Session>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateSession(input: input, selection: selection)
    }
  }

  static func createKeyPair<T>(
    input: InputObjects.CreateKeyPairInput, selection: Selection<T, Objects.KeyPair>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createKeyPair(input: input, selection: selection)
    }
  }

  static func revokeKeyPair<T>(
    input: InputObjects.RevokeKeyPairInput, selection: Selection<T, Objects.KeyPair>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.revokeKeyPair(input: input, selection: selection)
    }
  }

  static func createContact<T>(
    input: InputObjects.CreateContactInput, selection: Selection<T, Objects.Contact>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createContact(input: input, selection: selection)
    }
  }

  static func updateContact<T>(
    input: InputObjects.UpdateContactInput, selection: Selection<T, Objects.Contact>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateContact(input: input, selection: selection)
    }
  }

  static func destroyContact<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Contact>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyContact(input: input, selection: selection)
    }
  }

  static func saveContacts<T>(
    input: InputObjects.SaveContactsInput, selection: Selection<T, Objects.SaveContactsResponse>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.saveContacts(input: input, selection: selection)
    }
  }

  static func subscribeContact<T>(
    input: InputObjects.SubscribeContactInput, selection: Selection<T, Objects.Contact>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.subscribeContact(input: input, selection: selection)
    }
  }

  static func createExternalTable<T>(
    input: InputObjects.CreateExternalTableInput, selection: Selection<T, Objects.ExternalTable>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createExternalTable(input: input, selection: selection)
    }
  }

  static func updateExternalTable<T>(
    input: InputObjects.UpdateExternalTableInput, selection: Selection<T, Objects.ExternalTable>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateExternalTable(input: input, selection: selection)
    }
  }

  static func destroyExternalTable<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ExternalTable>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyExternalTable(input: input, selection: selection)
    }
  }

  static func generateExternalTableMenu<T>(
    input: InputObjects.GenerateExternalTableMenuInput,
    selection: Selection<T, Objects.ExternalTable>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.generateExternalTableMenu(input: input, selection: selection)
    }
  }

  static func addExternalRecord(input: InputObjects.AddExternalRecordInput) -> Selection<
    JSONScalar, Objects.Mutation
  > {
    Selection<JSONScalar, Objects.Mutation> {
      try $0.addExternalRecord(input: input)
    }
  }

  static func editExternalRecord(input: InputObjects.EditExternalRecordInput) -> Selection<
    JSONScalar, Objects.Mutation
  > {
    Selection<JSONScalar, Objects.Mutation> {
      try $0.editExternalRecord(input: input)
    }
  }

  static func deleteExternalRecord(input: InputObjects.DeleteExternalRecordInput) -> Selection<
    JSONScalar, Objects.Mutation
  > {
    Selection<JSONScalar, Objects.Mutation> {
      try $0.deleteExternalRecord(input: input)
    }
  }

  static func createExternalColumn<T>(
    input: InputObjects.CreateExternalColumnInput, selection: Selection<T, Objects.ExternalColumn>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createExternalColumn(input: input, selection: selection)
    }
  }

  static func updateExternalColumn<T>(
    input: InputObjects.UpdateExternalColumnInput, selection: Selection<T, Objects.ExternalColumn>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateExternalColumn(input: input, selection: selection)
    }
  }

  static func destroyExternalColumn<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ExternalColumn>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyExternalColumn(input: input, selection: selection)
    }
  }

  static func prepareExternalAsset<T>(
    input: InputObjects.PrepareExternalAssetInput, selection: Selection<T, Objects.ExternalAsset>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.prepareExternalAsset(input: input, selection: selection)
    }
  }

  static func prepareAsset<T>(
    input: InputObjects.PrepareAssetInput, selection: Selection<T, Objects.Asset>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.prepareAsset(input: input, selection: selection)
    }
  }

  static func createExternalRelationship<T>(
    input: InputObjects.CreateExternalRelationshipInput,
    selection: Selection<T, Objects.ExternalRelationship>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createExternalRelationship(input: input, selection: selection)
    }
  }

  static func updateExternalRelationship<T>(
    input: InputObjects.UpdateExternalRelationshipInput,
    selection: Selection<T, Objects.ExternalRelationship>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateExternalRelationship(input: input, selection: selection)
    }
  }

  static func destroyExternalRelationship<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ExternalRelationship>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyExternalRelationship(input: input, selection: selection)
    }
  }

  static func createExternalPolymorphicView<T>(
    input: InputObjects.CreateExternalPolymorphicViewInput,
    selection: Selection<T, Objects.ExternalPolymorphicView>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createExternalPolymorphicView(input: input, selection: selection)
    }
  }

  static func updateExternalPolymorphicView<T>(
    input: InputObjects.UpdateExternalPolymorphicViewInput,
    selection: Selection<T, Objects.ExternalPolymorphicView>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateExternalPolymorphicView(input: input, selection: selection)
    }
  }

  static func destroyExternalPolymorphicView<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ExternalPolymorphicView>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyExternalPolymorphicView(input: input, selection: selection)
    }
  }

  static func updateEventType<T>(
    input: InputObjects.UpdateEventTypeInput, selection: Selection<T, Objects.EventType>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateEventType(input: input, selection: selection)
    }
  }

  static func createEventType<T>(
    input: InputObjects.CreateEventTypeInput, selection: Selection<T, Objects.EventType>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createEventType(input: input, selection: selection)
    }
  }

  static func trackEvent<T>(
    input: InputObjects.TrackEventInput, selection: Selection<T, Objects.TrackEventResponse>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.trackEvent(input: input, selection: selection)
    }
  }

  static func createResource<T>(
    input: InputObjects.CreateResourceInput, selection: Selection<T, Objects.Resource>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createResource(input: input, selection: selection)
    }
  }

  static func updateResource<T>(
    input: InputObjects.UpdateResourceInput, selection: Selection<T, Objects.Resource>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateResource(input: input, selection: selection)
    }
  }

  static func destroyResource<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Resource>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyResource(input: input, selection: selection)
    }
  }

  static func addRecord(input: InputObjects.AddRecordInput) -> Selection<
    JSONScalar, Objects.Mutation
  > {
    Selection<JSONScalar, Objects.Mutation> {
      try $0.addRecord(input: input)
    }
  }

  static func editRecord(input: InputObjects.EditRecordInput) -> Selection<
    JSONScalar, Objects.Mutation
  > {
    Selection<JSONScalar, Objects.Mutation> {
      try $0.editRecord(input: input)
    }
  }

  static func deleteRecord(input: InputObjects.DeleteRecordInput) -> Selection<
    JSONScalar, Objects.Mutation
  > {
    Selection<JSONScalar, Objects.Mutation> {
      try $0.deleteRecord(input: input)
    }
  }

  static func createOperation<T>(
    input: InputObjects.CreateOperationInput, selection: Selection<T, Objects.Operation>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createOperation(input: input, selection: selection)
    }
  }

  static func updateOperation<T>(
    input: InputObjects.UpdateOperationInput, selection: Selection<T, Objects.Operation>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateOperation(input: input, selection: selection)
    }
  }

  static func createAttribute<T>(
    input: InputObjects.CreateAttributeInput, selection: Selection<T, Objects.Attribute>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createAttribute(input: input, selection: selection)
    }
  }

  static func updateAttribute<T>(
    input: InputObjects.UpdateAttributeInput, selection: Selection<T, Objects.Attribute>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateAttribute(input: input, selection: selection)
    }
  }

  static func destroyAttribute<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Attribute>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyAttribute(input: input, selection: selection)
    }
  }

  static func createParameter<T>(
    input: InputObjects.CreateParameterInput, selection: Selection<T, Objects.Parameter>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createParameter(input: input, selection: selection)
    }
  }

  static func updateParameter<T>(
    input: InputObjects.UpdateParameterInput, selection: Selection<T, Objects.Parameter>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateParameter(input: input, selection: selection)
    }
  }

  static func destroyParameter<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Parameter>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyParameter(input: input, selection: selection)
    }
  }

  static func createRelationship<T>(
    input: InputObjects.CreateRelationshipInput, selection: Selection<T, Objects.Relationship>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createRelationship(input: input, selection: selection)
    }
  }

  static func updateRelationship<T>(
    input: InputObjects.UpdateRelationshipInput, selection: Selection<T, Objects.Relationship>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateRelationship(input: input, selection: selection)
    }
  }

  static func destroyRelationship<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Relationship>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyRelationship(input: input, selection: selection)
    }
  }

  static func updateFlow<T>(
    input: InputObjects.UpdateFlowInput, selection: Selection<T, Objects.Flow>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateFlow(input: input, selection: selection)
    }
  }

  static func createFlow<T>(
    input: InputObjects.CreateFlowInput, selection: Selection<T, Objects.Flow>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createFlow(input: input, selection: selection)
    }
  }

  static func createFlowVersion<T>(
    input: InputObjects.CreateFlowVersionInput, selection: Selection<T, Objects.FlowVersion>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createFlowVersion(input: input, selection: selection)
    }
  }

  static func updateFlowVersion<T>(
    input: InputObjects.UpdateFlowVersionInput, selection: Selection<T, Objects.FlowVersion>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateFlowVersion(input: input, selection: selection)
    }
  }

  static func publishFlowVersion<T>(
    input: InputObjects.PublishFlowVersionInput, selection: Selection<T, Objects.FlowVersion>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.publishFlowVersion(input: input, selection: selection)
    }
  }

  static func unpublishFlowVersion<T>(
    input: InputObjects.UnpublishFlowVersionInput, selection: Selection<T, Objects.FlowVersion>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.unpublishFlowVersion(input: input, selection: selection)
    }
  }

  static func duplicateFlowVersion<T>(
    input: InputObjects.DuplicateFlowVersionInput, selection: Selection<T, Objects.FlowVersion>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.duplicateFlowVersion(input: input, selection: selection)
    }
  }

  static func createContent<T>(
    input: InputObjects.CreateContentInput, selection: Selection<T, Objects.CustomContent>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createContent(input: input, selection: selection)
    }
  }

  static func updateContent<T>(
    input: InputObjects.UpdateContentInput, selection: Selection<T, Objects.CustomContent>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateContent(input: input, selection: selection)
    }
  }

  static func destroyContent<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.CustomContent>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyContent(input: input, selection: selection)
    }
  }

  static func addContent<T>(
    input: InputObjects.AddContentInput, selection: Selection<T, Objects.CustomContent>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.addContent(input: input, selection: selection)
    }
  }

  static func editContent<T>(
    input: InputObjects.EditContentInput, selection: Selection<T, Objects.CustomContent>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.editContent(input: input, selection: selection)
    }
  }

  static func publishContentVersion<T>(
    input: InputObjects.PublishContentVersionInput, selection: Selection<T, Objects.CustomContent>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.publishContentVersion(input: input, selection: selection)
    }
  }

  static func unpublishContentVersion<T>(
    input: InputObjects.UnpublishContentVersionInput, selection: Selection<T, Objects.CustomContent>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.unpublishContentVersion(input: input, selection: selection)
    }
  }

  static func createContentType<T>(
    input: InputObjects.CreateContentTypeInput, selection: Selection<T, Objects.ContentType>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createContentType(input: input, selection: selection)
    }
  }

  static func updateContentType<T>(
    input: InputObjects.UpdateContentTypeInput, selection: Selection<T, Objects.ContentType>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateContentType(input: input, selection: selection)
    }
  }

  static func destroyContentType<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ContentType>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyContentType(input: input, selection: selection)
    }
  }

  static func createField<T>(
    input: InputObjects.CreateFieldInput, selection: Selection<T, Objects.Field>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createField(input: input, selection: selection)
    }
  }

  static func updateField<T>(
    input: InputObjects.UpdateFieldInput, selection: Selection<T, Objects.Field>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateField(input: input, selection: selection)
    }
  }

  static func destroyField<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Field>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyField(input: input, selection: selection)
    }
  }

  static func destroyMedium<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Medium>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyMedium(input: input, selection: selection)
    }
  }

  static func createMedium<T>(
    input: InputObjects.CreateMediumInput, selection: Selection<T, Objects.Medium>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createMedium(input: input, selection: selection)
    }
  }

  static func updateMedium<T>(
    input: InputObjects.UpdateMediumInput, selection: Selection<T, Objects.Medium>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateMedium(input: input, selection: selection)
    }
  }

  static func restoreContentVersion<T>(
    input: InputObjects.RestoreContentVersionInput, selection: Selection<T, Objects.CustomContent>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.restoreContentVersion(input: input, selection: selection)
    }
  }

  static func createDelivery<T>(
    input: InputObjects.CreateDeliveryInput, selection: Selection<T, Objects.Delivery>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createDelivery(input: input, selection: selection)
    }
  }

  static func updateDelivery<T>(
    input: InputObjects.UpdateDeliveryInput, selection: Selection<T, Objects.Delivery>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateDelivery(input: input, selection: selection)
    }
  }

  static func startDelivery<T>(
    input: InputObjects.StartDeliveryInput, selection: Selection<T, Objects.Delivery>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.startDelivery(input: input, selection: selection)
    }
  }

  static func destroyDelivery<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Delivery>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyDelivery(input: input, selection: selection)
    }
  }

  static func createRecipient<T>(
    input: InputObjects.CreateRecipientInput, selection: Selection<T, Objects.Recipient>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createRecipient(input: input, selection: selection)
    }
  }

  static func updateRecipient<T>(
    input: InputObjects.UpdateRecipientInput, selection: Selection<T, Objects.Recipient>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateRecipient(input: input, selection: selection)
    }
  }

  static func destroyRecipient<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Recipient>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyRecipient(input: input, selection: selection)
    }
  }

  static func trackNotification<T>(
    input: InputObjects.TrackNotificationInput,
    selection: Selection<T, Objects.TrackNotificationResponse>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.trackNotification(input: input, selection: selection)
    }
  }

  static func updatePreference<T>(
    input: InputObjects.UpdatePreferenceInput, selection: Selection<T, Objects.Preference>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updatePreference(input: input, selection: selection)
    }
  }

  static func createPreference<T>(
    input: InputObjects.CreatePreferenceInput, selection: Selection<T, Objects.Preference>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createPreference(input: input, selection: selection)
    }
  }

  static func destroyPreference<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Preference>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyPreference(input: input, selection: selection)
    }
  }

  static func updateStoredPreference<T>(
    input: InputObjects.UpdateStoredPreferenceInput,
    selection: Selection<T, Objects.StoredPreference>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateStoredPreference(input: input, selection: selection)
    }
  }

  static func createStoredPreference<T>(
    input: InputObjects.CreateStoredPreferenceInput,
    selection: Selection<T, Objects.StoredPreference>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createStoredPreference(input: input, selection: selection)
    }
  }

  static func destroyStoredPreference<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.StoredPreference>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyStoredPreference(input: input, selection: selection)
    }
  }

  static func saveStoredPreferences<T>(
    input: InputObjects.SaveStoredPreferencesInput,
    selection: Selection<T, Objects.SaveStoredPreferencesResponse>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.saveStoredPreferences(input: input, selection: selection)
    }
  }

  static func createItem<T>(
    input: InputObjects.CreateItemInput, selection: Selection<T, Objects.Item>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createItem(input: input, selection: selection)
    }
  }

  static func updateItem<T>(
    input: InputObjects.UpdateItemInput, selection: Selection<T, Objects.Item>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateItem(input: input, selection: selection)
    }
  }

  static func destroyItem<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Item>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyItem(input: input, selection: selection)
    }
  }

  static func createPricing<T>(
    input: InputObjects.CreatePricingInput, selection: Selection<T, Objects.Pricing>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createPricing(input: input, selection: selection)
    }
  }

  static func updatePricing<T>(
    input: InputObjects.UpdatePricingInput, selection: Selection<T, Objects.Pricing>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updatePricing(input: input, selection: selection)
    }
  }

  static func destroyPricing<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Pricing>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyPricing(input: input, selection: selection)
    }
  }

  static func createItemCategory<T>(
    input: InputObjects.CreateItemCategoryInput, selection: Selection<T, Objects.ItemCategory>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createItemCategory(input: input, selection: selection)
    }
  }

  static func updateItemCategory<T>(
    input: InputObjects.UpdateItemCategoryInput, selection: Selection<T, Objects.ItemCategory>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateItemCategory(input: input, selection: selection)
    }
  }

  static func destroyItemCategory<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ItemCategory>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyItemCategory(input: input, selection: selection)
    }
  }

  static func createItemCategoryMembership<T>(
    input: InputObjects.CreateItemCategoryMembershipInput,
    selection: Selection<T, Objects.ItemCategoryMembership>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createItemCategoryMembership(input: input, selection: selection)
    }
  }

  static func updateItemCategoryMembership<T>(
    input: InputObjects.UpdateItemCategoryMembershipInput,
    selection: Selection<T, Objects.ItemCategoryMembership>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateItemCategoryMembership(input: input, selection: selection)
    }
  }

  static func destroyItemCategoryMembership<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.ItemCategoryMembership>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyItemCategoryMembership(input: input, selection: selection)
    }
  }

  static func createCoupon<T>(
    input: InputObjects.CreateCouponInput, selection: Selection<T, Objects.Coupon>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createCoupon(input: input, selection: selection)
    }
  }

  static func updateCoupon<T>(
    input: InputObjects.UpdateCouponInput, selection: Selection<T, Objects.Coupon>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateCoupon(input: input, selection: selection)
    }
  }

  static func destroyCoupon<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Coupon>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyCoupon(input: input, selection: selection)
    }
  }

  static func createCouponCode<T>(
    input: InputObjects.CreateCouponCodeInput, selection: Selection<T, Objects.CouponCode>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createCouponCode(input: input, selection: selection)
    }
  }

  static func updateCouponCode<T>(
    input: InputObjects.UpdateCouponCodeInput, selection: Selection<T, Objects.CouponCode>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateCouponCode(input: input, selection: selection)
    }
  }

  static func destroyCouponCode<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.CouponCode>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyCouponCode(input: input, selection: selection)
    }
  }

  static func createCouponRestriction<T>(
    input: InputObjects.CreateCouponRestrictionInput,
    selection: Selection<T, Objects.CouponRestriction>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createCouponRestriction(input: input, selection: selection)
    }
  }

  static func updateCouponRestriction<T>(
    input: InputObjects.UpdateCouponRestrictionInput,
    selection: Selection<T, Objects.CouponRestriction>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateCouponRestriction(input: input, selection: selection)
    }
  }

  static func destroyCouponRestriction<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.CouponRestriction>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyCouponRestriction(input: input, selection: selection)
    }
  }

  static func createCouponRedemption<T>(
    input: InputObjects.CreateCouponRedemptionInput,
    selection: Selection<T, Objects.CouponRedemption>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createCouponRedemption(input: input, selection: selection)
    }
  }

  static func updateCouponRedemption<T>(
    input: InputObjects.UpdateCouponRedemptionInput,
    selection: Selection<T, Objects.CouponRedemption>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateCouponRedemption(input: input, selection: selection)
    }
  }

  static func destroyCouponRedemption<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.CouponRedemption>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyCouponRedemption(input: input, selection: selection)
    }
  }

  static func createOrder<T>(
    input: InputObjects.CreateOrderInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createOrder(input: input, selection: selection)
    }
  }

  static func updateOrder<T>(
    input: InputObjects.UpdateOrderInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateOrder(input: input, selection: selection)
    }
  }

  static func destroyOrder<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyOrder(input: input, selection: selection)
    }
  }

  static func transferCart<T>(
    input: InputObjects.TransferCartInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.transferCart(input: input, selection: selection)
    }
  }

  static func addItemToCart<T>(
    input: InputObjects.AddItemToCartInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.addItemToCart(input: input, selection: selection)
    }
  }

  static func editItemInCart<T>(
    input: InputObjects.EditItemInCartInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.editItemInCart(input: input, selection: selection)
    }
  }

  static func removeItemFromCart<T>(
    input: InputObjects.RemoveItemFromCartInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.removeItemFromCart(input: input, selection: selection)
    }
  }

  static func applyCouponToCart<T>(
    input: InputObjects.ApplyCouponToCartInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.applyCouponToCart(input: input, selection: selection)
    }
  }

  static func removeCouponFromCart<T>(
    input: InputObjects.RemoveCouponFromCartInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.removeCouponFromCart(input: input, selection: selection)
    }
  }

  static func checkoutCart<T>(
    input: InputObjects.CheckoutCartInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.checkoutCart(input: input, selection: selection)
    }
  }

  static func capturePayment<T>(
    input: InputObjects.CapturePaymentInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.capturePayment(input: input, selection: selection)
    }
  }

  static func createOrderItem<T>(
    input: InputObjects.CreateOrderItemInput, selection: Selection<T, Objects.OrderItem>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createOrderItem(input: input, selection: selection)
    }
  }

  static func updateOrderItem<T>(
    input: InputObjects.UpdateOrderItemInput, selection: Selection<T, Objects.OrderItem>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateOrderItem(input: input, selection: selection)
    }
  }

  static func destroyOrderItem<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.OrderItem>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyOrderItem(input: input, selection: selection)
    }
  }

  static func createTransaction<T>(
    input: InputObjects.CreateTransactionInput, selection: Selection<T, Objects.Transaction>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createTransaction(input: input, selection: selection)
    }
  }

  static func updateTransaction<T>(
    input: InputObjects.UpdateTransactionInput, selection: Selection<T, Objects.Transaction>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateTransaction(input: input, selection: selection)
    }
  }

  static func destroyTransaction<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Transaction>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyTransaction(input: input, selection: selection)
    }
  }

  static func createRole<T>(
    input: InputObjects.CreateRoleInput, selection: Selection<T, Objects.Role>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createRole(input: input, selection: selection)
    }
  }

  static func updateRole<T>(
    input: InputObjects.UpdateRoleInput, selection: Selection<T, Objects.Role>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateRole(input: input, selection: selection)
    }
  }

  static func destroyRole<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Role>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyRole(input: input, selection: selection)
    }
  }

  static func createRoleMembership<T>(
    input: InputObjects.CreateRoleMembershipInput, selection: Selection<T, Objects.RoleMembership>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createRoleMembership(input: input, selection: selection)
    }
  }

  static func destroyRoleMembership<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.RoleMembership>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroyRoleMembership(input: input, selection: selection)
    }
  }

  static func createSegment<T>(
    input: InputObjects.CreateSegmentInput, selection: Selection<T, Objects.Segment>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.createSegment(input: input, selection: selection)
    }
  }

  static func updateSegment<T>(
    input: InputObjects.UpdateSegmentInput, selection: Selection<T, Objects.Segment>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.updateSegment(input: input, selection: selection)
    }
  }

  static func destroySegment<T>(
    input: InputObjects.GenericInput, selection: Selection<T, Objects.Segment>
  ) -> Selection<T, Objects.Mutation> {
    Selection<T, Objects.Mutation> {
      try $0.destroySegment(input: input, selection: selection)
    }
  }
}
extension Objects.Notification {

  static func id() -> Selection<UUIDScalar, Objects.Notification> {
    Selection<UUIDScalar, Objects.Notification> {
      try $0.id()
    }
  }

  static func deliveryId() -> Selection<UUIDScalar, Objects.Notification> {
    Selection<UUIDScalar, Objects.Notification> {
      try $0.deliveryId()
    }
  }

  static func integrationId() -> Selection<UUIDScalar, Objects.Notification> {
    Selection<UUIDScalar, Objects.Notification> {
      try $0.integrationId()
    }
  }

  static func data() -> Selection<JSONScalar?, Objects.Notification> {
    Selection<JSONScalar?, Objects.Notification> {
      try $0.data()
    }
  }

  static func renderedContent() -> Selection<JSONScalar, Objects.Notification> {
    Selection<JSONScalar, Objects.Notification> {
      try $0.renderedContent()
    }
  }

  static func report() -> Selection<JSONScalar?, Objects.Notification> {
    Selection<JSONScalar?, Objects.Notification> {
      try $0.report()
    }
  }

  static func failedSendAttempts() -> Selection<Int, Objects.Notification> {
    Selection<Int, Objects.Notification> {
      try $0.failedSendAttempts()
    }
  }

  static func lastSendFailureAt() -> Selection<DateTimeScalar?, Objects.Notification> {
    Selection<DateTimeScalar?, Objects.Notification> {
      try $0.lastSendFailureAt()
    }
  }

  static func sentAt() -> Selection<DateTimeScalar?, Objects.Notification> {
    Selection<DateTimeScalar?, Objects.Notification> {
      try $0.sentAt()
    }
  }

  static func deliveredAt() -> Selection<DateTimeScalar?, Objects.Notification> {
    Selection<DateTimeScalar?, Objects.Notification> {
      try $0.deliveredAt()
    }
  }

  static func firstOpenedAt() -> Selection<DateTimeScalar?, Objects.Notification> {
    Selection<DateTimeScalar?, Objects.Notification> {
      try $0.firstOpenedAt()
    }
  }

  static func externalUid() -> Selection<String?, Objects.Notification> {
    Selection<String?, Objects.Notification> {
      try $0.externalUid()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Notification> {
    Selection<DateTimeScalar, Objects.Notification> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Notification> {
    Selection<DateTimeScalar, Objects.Notification> {
      try $0.updatedAt()
    }
  }

  static func queuedAt() -> Selection<DateTimeScalar?, Objects.Notification> {
    Selection<DateTimeScalar?, Objects.Notification> {
      try $0.queuedAt()
    }
  }

  static func lastDeliveryFailureAt() -> Selection<DateTimeScalar?, Objects.Notification> {
    Selection<DateTimeScalar?, Objects.Notification> {
      try $0.lastDeliveryFailureAt()
    }
  }

  static func failedDeliveryAttempts() -> Selection<Int?, Objects.Notification> {
    Selection<Int?, Objects.Notification> {
      try $0.failedDeliveryAttempts()
    }
  }

  static func failedAt() -> Selection<DateTimeScalar?, Objects.Notification> {
    Selection<DateTimeScalar?, Objects.Notification> {
      try $0.failedAt()
    }
  }

  static func failureReason() -> Selection<String?, Objects.Notification> {
    Selection<String?, Objects.Notification> {
      try $0.failureReason()
    }
  }

  static func firstClickedAt() -> Selection<DateTimeScalar?, Objects.Notification> {
    Selection<DateTimeScalar?, Objects.Notification> {
      try $0.firstClickedAt()
    }
  }

  static func complainedAt() -> Selection<DateTimeScalar?, Objects.Notification> {
    Selection<DateTimeScalar?, Objects.Notification> {
      try $0.complainedAt()
    }
  }

  static func unsubscribedAt() -> Selection<DateTimeScalar?, Objects.Notification> {
    Selection<DateTimeScalar?, Objects.Notification> {
      try $0.unsubscribedAt()
    }
  }

  static func delivery<T>(selection: Selection<T, Objects.Delivery>) -> Selection<
    T, Objects.Notification
  > {
    Selection<T, Objects.Notification> {
      try $0.delivery(selection: selection)
    }
  }

  static func notificationRecipients<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.NotificationRecipient]>
  ) -> Selection<T, Objects.Notification> {
    Selection<T, Objects.Notification> {
      try $0.notificationRecipients(order: order, limit: limit, page: page, selection: selection)
    }
  }
}
extension Objects.NotificationLog {

  static func id() -> Selection<UUIDScalar, Objects.NotificationLog> {
    Selection<UUIDScalar, Objects.NotificationLog> {
      try $0.id()
    }
  }

  static func notificationId() -> Selection<UUIDScalar, Objects.NotificationLog> {
    Selection<UUIDScalar, Objects.NotificationLog> {
      try $0.notificationId()
    }
  }

  static func integrationId() -> Selection<UUIDScalar, Objects.NotificationLog> {
    Selection<UUIDScalar, Objects.NotificationLog> {
      try $0.integrationId()
    }
  }

  static func category() -> Selection<Enums.NotificationLogCategory, Objects.NotificationLog> {
    Selection<Enums.NotificationLogCategory, Objects.NotificationLog> {
      try $0.category()
    }
  }

  static func subcategory() -> Selection<Enums.NotificationLogSubcategory?, Objects.NotificationLog>
  {
    Selection<Enums.NotificationLogSubcategory?, Objects.NotificationLog> {
      try $0.subcategory()
    }
  }

  static func data() -> Selection<JSONScalar, Objects.NotificationLog> {
    Selection<JSONScalar, Objects.NotificationLog> {
      try $0.data()
    }
  }

  static func timestamp() -> Selection<DateTimeScalar, Objects.NotificationLog> {
    Selection<DateTimeScalar, Objects.NotificationLog> {
      try $0.timestamp()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.NotificationLog> {
    Selection<DateTimeScalar, Objects.NotificationLog> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.NotificationLog> {
    Selection<DateTimeScalar, Objects.NotificationLog> {
      try $0.updatedAt()
    }
  }

  static func notification<T>(selection: Selection<T, Objects.Notification>) -> Selection<
    T, Objects.NotificationLog
  > {
    Selection<T, Objects.NotificationLog> {
      try $0.notification(selection: selection)
    }
  }

  static func integration<T>(selection: Selection<T, Objects.Installation>) -> Selection<
    T, Objects.NotificationLog
  > {
    Selection<T, Objects.NotificationLog> {
      try $0.integration(selection: selection)
    }
  }
}
extension Objects.NotificationRecipient {

  static func id() -> Selection<UUIDScalar, Objects.NotificationRecipient> {
    Selection<UUIDScalar, Objects.NotificationRecipient> {
      try $0.id()
    }
  }

  static func notificationId() -> Selection<UUIDScalar, Objects.NotificationRecipient> {
    Selection<UUIDScalar, Objects.NotificationRecipient> {
      try $0.notificationId()
    }
  }

  static func recipientId() -> Selection<UUIDScalar, Objects.NotificationRecipient> {
    Selection<UUIDScalar, Objects.NotificationRecipient> {
      try $0.recipientId()
    }
  }

  static func contactId() -> Selection<UUIDScalar?, Objects.NotificationRecipient> {
    Selection<UUIDScalar?, Objects.NotificationRecipient> {
      try $0.contactId()
    }
  }

  static func contact() -> Selection<String, Objects.NotificationRecipient> {
    Selection<String, Objects.NotificationRecipient> {
      try $0.contact()
    }
  }

  static func readAt() -> Selection<DateTimeScalar?, Objects.NotificationRecipient> {
    Selection<DateTimeScalar?, Objects.NotificationRecipient> {
      try $0.readAt()
    }
  }

  static func externalUid() -> Selection<String?, Objects.NotificationRecipient> {
    Selection<String?, Objects.NotificationRecipient> {
      try $0.externalUid()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.NotificationRecipient> {
    Selection<DateTimeScalar, Objects.NotificationRecipient> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.NotificationRecipient> {
    Selection<DateTimeScalar, Objects.NotificationRecipient> {
      try $0.updatedAt()
    }
  }

  static func recipient<T>(selection: Selection<T, Objects.Recipient>) -> Selection<
    T, Objects.NotificationRecipient
  > {
    Selection<T, Objects.NotificationRecipient> {
      try $0.recipient(selection: selection)
    }
  }
}
extension Objects.Operation {

  static func id() -> Selection<UUIDScalar, Objects.Operation> {
    Selection<UUIDScalar, Objects.Operation> {
      try $0.id()
    }
  }

  static func resourceId() -> Selection<UUIDScalar?, Objects.Operation> {
    Selection<UUIDScalar?, Objects.Operation> {
      try $0.resourceId()
    }
  }

  static func name() -> Selection<String, Objects.Operation> {
    Selection<String, Objects.Operation> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Operation> {
    Selection<String, Objects.Operation> {
      try $0.identifier()
    }
  }

  static func description() -> Selection<String?, Objects.Operation> {
    Selection<String?, Objects.Operation> {
      try $0.description()
    }
  }

  static func icon() -> Selection<String?, Objects.Operation> {
    Selection<String?, Objects.Operation> {
      try $0.icon()
    }
  }

  static func position() -> Selection<Int, Objects.Operation> {
    Selection<Int, Objects.Operation> {
      try $0.position()
    }
  }

  static func behavior() -> Selection<Enums.OperationBehavior, Objects.Operation> {
    Selection<Enums.OperationBehavior, Objects.Operation> {
      try $0.behavior()
    }
  }

  static func kind() -> Selection<Enums.OperationKind, Objects.Operation> {
    Selection<Enums.OperationKind, Objects.Operation> {
      try $0.kind()
    }
  }

  static func actsOn() -> Selection<Enums.OperationActsOn?, Objects.Operation> {
    Selection<Enums.OperationActsOn?, Objects.Operation> {
      try $0.actsOn()
    }
  }

  static func parameters() -> Selection<[JSONScalar], Objects.Operation> {
    Selection<[JSONScalar], Objects.Operation> {
      try $0.parameters()
    }
  }

  static func behaviorInstallationId() -> Selection<UUIDScalar?, Objects.Operation> {
    Selection<UUIDScalar?, Objects.Operation> {
      try $0.behaviorInstallationId()
    }
  }

  static func behaviorOperationId() -> Selection<UUIDScalar?, Objects.Operation> {
    Selection<UUIDScalar?, Objects.Operation> {
      try $0.behaviorOperationId()
    }
  }

  static func behaviorArguments() -> Selection<JSONScalar?, Objects.Operation> {
    Selection<JSONScalar?, Objects.Operation> {
      try $0.behaviorArguments()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Operation> {
    Selection<DateTimeScalar, Objects.Operation> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Operation> {
    Selection<DateTimeScalar, Objects.Operation> {
      try $0.updatedAt()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar?, Objects.Operation> {
    Selection<UUIDScalar?, Objects.Operation> {
      try $0.workspaceId()
    }
  }

  static func appId() -> Selection<UUIDScalar?, Objects.Operation> {
    Selection<UUIDScalar?, Objects.Operation> {
      try $0.appId()
    }
  }

  static func resource<T>(selection: Selection<T, Objects.Resource?>) -> Selection<
    T, Objects.Operation
  > {
    Selection<T, Objects.Operation> {
      try $0.resource(selection: selection)
    }
  }

  static func app<T>(selection: Selection<T, Objects.App?>) -> Selection<T, Objects.Operation> {
    Selection<T, Objects.Operation> {
      try $0.app(selection: selection)
    }
  }
}
extension Objects.Order {

  static func id() -> Selection<UUIDScalar, Objects.Order> {
    Selection<UUIDScalar, Objects.Order> {
      try $0.id()
    }
  }

  static func accountId() -> Selection<UUIDScalar?, Objects.Order> {
    Selection<UUIDScalar?, Objects.Order> {
      try $0.accountId()
    }
  }

  static func gatewayId() -> Selection<UUIDScalar?, Objects.Order> {
    Selection<UUIDScalar?, Objects.Order> {
      try $0.gatewayId()
    }
  }

  static func gatewayMeta() -> Selection<JSONScalar?, Objects.Order> {
    Selection<JSONScalar?, Objects.Order> {
      try $0.gatewayMeta()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Order> {
    Selection<DateTimeScalar, Objects.Order> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Order> {
    Selection<DateTimeScalar, Objects.Order> {
      try $0.updatedAt()
    }
  }

  static func subtotal() -> Selection<DecimalScalar, Objects.Order> {
    Selection<DecimalScalar, Objects.Order> {
      try $0.subtotal()
    }
  }

  static func discount() -> Selection<DecimalScalar, Objects.Order> {
    Selection<DecimalScalar, Objects.Order> {
      try $0.discount()
    }
  }

  static func tax() -> Selection<DecimalScalar, Objects.Order> {
    Selection<DecimalScalar, Objects.Order> {
      try $0.tax()
    }
  }

  static func total() -> Selection<DecimalScalar, Objects.Order> {
    Selection<DecimalScalar, Objects.Order> {
      try $0.total()
    }
  }

  static func status() -> Selection<Enums.OrderStatus, Objects.Order> {
    Selection<Enums.OrderStatus, Objects.Order> {
      try $0.status()
    }
  }

  static func paidAt() -> Selection<DateTimeScalar?, Objects.Order> {
    Selection<DateTimeScalar?, Objects.Order> {
      try $0.paidAt()
    }
  }

  static func checkedOutAt() -> Selection<DateTimeScalar?, Objects.Order> {
    Selection<DateTimeScalar?, Objects.Order> {
      try $0.checkedOutAt()
    }
  }

  static func currencyCode() -> Selection<String, Objects.Order> {
    Selection<String, Objects.Order> {
      try $0.currencyCode()
    }
  }

  static func createdById() -> Selection<UUIDScalar?, Objects.Order> {
    Selection<UUIDScalar?, Objects.Order> {
      try $0.createdById()
    }
  }

  static func environmentId() -> Selection<UUIDScalar, Objects.Order> {
    Selection<UUIDScalar, Objects.Order> {
      try $0.environmentId()
    }
  }

  static func orderItems<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.OrderItem]>
  ) -> Selection<T, Objects.Order> {
    Selection<T, Objects.Order> {
      try $0.orderItems(order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func couponRedemptions<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.CouponRedemption]>
  ) -> Selection<T, Objects.Order> {
    Selection<T, Objects.Order> {
      try $0.couponRedemptions(order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func account<T>(selection: Selection<T, Objects.Account?>) -> Selection<T, Objects.Order> {
    Selection<T, Objects.Order> {
      try $0.account(selection: selection)
    }
  }

  static func createdBy<T>(selection: Selection<T, Objects.Account?>) -> Selection<T, Objects.Order>
  {
    Selection<T, Objects.Order> {
      try $0.createdBy(selection: selection)
    }
  }
}
extension Objects.OrderItem {

  static func id() -> Selection<UUIDScalar, Objects.OrderItem> {
    Selection<UUIDScalar, Objects.OrderItem> {
      try $0.id()
    }
  }

  static func orderId() -> Selection<UUIDScalar, Objects.OrderItem> {
    Selection<UUIDScalar, Objects.OrderItem> {
      try $0.orderId()
    }
  }

  static func itemId() -> Selection<UUIDScalar, Objects.OrderItem> {
    Selection<UUIDScalar, Objects.OrderItem> {
      try $0.itemId()
    }
  }

  static func pricingId() -> Selection<UUIDScalar, Objects.OrderItem> {
    Selection<UUIDScalar, Objects.OrderItem> {
      try $0.pricingId()
    }
  }

  static func quantity() -> Selection<DecimalScalar, Objects.OrderItem> {
    Selection<DecimalScalar, Objects.OrderItem> {
      try $0.quantity()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.OrderItem> {
    Selection<DateTimeScalar, Objects.OrderItem> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.OrderItem> {
    Selection<DateTimeScalar, Objects.OrderItem> {
      try $0.updatedAt()
    }
  }

  static func unitPrice() -> Selection<DecimalScalar, Objects.OrderItem> {
    Selection<DecimalScalar, Objects.OrderItem> {
      try $0.unitPrice()
    }
  }

  static func subtotal() -> Selection<DecimalScalar, Objects.OrderItem> {
    Selection<DecimalScalar, Objects.OrderItem> {
      try $0.subtotal()
    }
  }

  static func discount() -> Selection<DecimalScalar, Objects.OrderItem> {
    Selection<DecimalScalar, Objects.OrderItem> {
      try $0.discount()
    }
  }

  static func tax() -> Selection<DecimalScalar, Objects.OrderItem> {
    Selection<DecimalScalar, Objects.OrderItem> {
      try $0.tax()
    }
  }

  static func total() -> Selection<DecimalScalar, Objects.OrderItem> {
    Selection<DecimalScalar, Objects.OrderItem> {
      try $0.total()
    }
  }

  static func custom() -> Selection<JSONScalar, Objects.OrderItem> {
    Selection<JSONScalar, Objects.OrderItem> {
      try $0.custom()
    }
  }

  static func currencyCode() -> Selection<String, Objects.OrderItem> {
    Selection<String, Objects.OrderItem> {
      try $0.currencyCode()
    }
  }

  static func order<T>(selection: Selection<T, Objects.Order>) -> Selection<T, Objects.OrderItem> {
    Selection<T, Objects.OrderItem> {
      try $0.order(selection: selection)
    }
  }

  static func item<T>(selection: Selection<T, Objects.Item>) -> Selection<T, Objects.OrderItem> {
    Selection<T, Objects.OrderItem> {
      try $0.item(selection: selection)
    }
  }

  static func pricing<T>(selection: Selection<T, Objects.Pricing>) -> Selection<
    T, Objects.OrderItem
  > {
    Selection<T, Objects.OrderItem> {
      try $0.pricing(selection: selection)
    }
  }
}
extension Objects.OrdersAggregateByItemsResponse {

  static func count() -> Selection<Int?, Objects.OrdersAggregateByItemsResponse> {
    Selection<Int?, Objects.OrdersAggregateByItemsResponse> {
      try $0.count()
    }
  }
}
extension Objects.Parameter {

  static func id() -> Selection<UUIDScalar, Objects.Parameter> {
    Selection<UUIDScalar, Objects.Parameter> {
      try $0.id()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar?, Objects.Parameter> {
    Selection<UUIDScalar?, Objects.Parameter> {
      try $0.workspaceId()
    }
  }

  static func operationId() -> Selection<UUIDScalar, Objects.Parameter> {
    Selection<UUIDScalar, Objects.Parameter> {
      try $0.operationId()
    }
  }

  static func attributeId() -> Selection<UUIDScalar?, Objects.Parameter> {
    Selection<UUIDScalar?, Objects.Parameter> {
      try $0.attributeId()
    }
  }

  static func name() -> Selection<String, Objects.Parameter> {
    Selection<String, Objects.Parameter> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Parameter> {
    Selection<String, Objects.Parameter> {
      try $0.identifier()
    }
  }

  static func fieldType() -> Selection<String?, Objects.Parameter> {
    Selection<String?, Objects.Parameter> {
      try $0.fieldType()
    }
  }

  static func isNullable() -> Selection<Bool?, Objects.Parameter> {
    Selection<Bool?, Objects.Parameter> {
      try $0.isNullable()
    }
  }

  static func isRepeatable() -> Selection<Bool?, Objects.Parameter> {
    Selection<Bool?, Objects.Parameter> {
      try $0.isRepeatable()
    }
  }

  static func validations() -> Selection<[JSONScalar], Objects.Parameter> {
    Selection<[JSONScalar], Objects.Parameter> {
      try $0.validations()
    }
  }

  static func defaultValue() -> Selection<JSONScalar?, Objects.Parameter> {
    Selection<JSONScalar?, Objects.Parameter> {
      try $0.defaultValue()
    }
  }

  static func position() -> Selection<Int?, Objects.Parameter> {
    Selection<Int?, Objects.Parameter> {
      try $0.position()
    }
  }

  static func placeholder() -> Selection<String?, Objects.Parameter> {
    Selection<String?, Objects.Parameter> {
      try $0.placeholder()
    }
  }

  static func helpText() -> Selection<String?, Objects.Parameter> {
    Selection<String?, Objects.Parameter> {
      try $0.helpText()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Parameter> {
    Selection<DateTimeScalar, Objects.Parameter> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Parameter> {
    Selection<DateTimeScalar, Objects.Parameter> {
      try $0.updatedAt()
    }
  }

  static func operation<T>(selection: Selection<T, Objects.Operation>) -> Selection<
    T, Objects.Parameter
  > {
    Selection<T, Objects.Parameter> {
      try $0.operation(selection: selection)
    }
  }

  static func attribute<T>(selection: Selection<T, Objects.Attribute?>) -> Selection<
    T, Objects.Parameter
  > {
    Selection<T, Objects.Parameter> {
      try $0.attribute(selection: selection)
    }
  }
}
extension Objects.ParseIdentityTokenResponse {

  static func kind() -> Selection<String, Objects.ParseIdentityTokenResponse> {
    Selection<String, Objects.ParseIdentityTokenResponse> {
      try $0.kind()
    }
  }

  static func uid() -> Selection<String, Objects.ParseIdentityTokenResponse> {
    Selection<String, Objects.ParseIdentityTokenResponse> {
      try $0.uid()
    }
  }
}
extension Objects.Preference {

  static func id() -> Selection<UUIDScalar, Objects.Preference> {
    Selection<UUIDScalar, Objects.Preference> {
      try $0.id()
    }
  }

  static func name() -> Selection<String, Objects.Preference> {
    Selection<String, Objects.Preference> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Preference> {
    Selection<String, Objects.Preference> {
      try $0.identifier()
    }
  }

  static func restrictions() -> Selection<[UUIDScalar], Objects.Preference> {
    Selection<[UUIDScalar], Objects.Preference> {
      try $0.restrictions()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Preference> {
    Selection<DateTimeScalar, Objects.Preference> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Preference> {
    Selection<DateTimeScalar, Objects.Preference> {
      try $0.updatedAt()
    }
  }

  static func isEnabledByDefault() -> Selection<Bool, Objects.Preference> {
    Selection<Bool, Objects.Preference> {
      try $0.isEnabledByDefault()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar, Objects.Preference> {
    Selection<UUIDScalar, Objects.Preference> {
      try $0.workspaceId()
    }
  }

  static func preferenceRestrictions<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.PreferenceRestriction]>
  ) -> Selection<T, Objects.Preference> {
    Selection<T, Objects.Preference> {
      try $0.preferenceRestrictions(order: order, limit: limit, page: page, selection: selection)
    }
  }
}
extension Objects.PreferenceRestriction {

  static func id() -> Selection<UUIDScalar, Objects.PreferenceRestriction> {
    Selection<UUIDScalar, Objects.PreferenceRestriction> {
      try $0.id()
    }
  }

  static func preferenceId() -> Selection<UUIDScalar, Objects.PreferenceRestriction> {
    Selection<UUIDScalar, Objects.PreferenceRestriction> {
      try $0.preferenceId()
    }
  }

  static func contentId() -> Selection<UUIDScalar, Objects.PreferenceRestriction> {
    Selection<UUIDScalar, Objects.PreferenceRestriction> {
      try $0.contentId()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.PreferenceRestriction> {
    Selection<DateTimeScalar, Objects.PreferenceRestriction> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.PreferenceRestriction> {
    Selection<DateTimeScalar, Objects.PreferenceRestriction> {
      try $0.updatedAt()
    }
  }

  static func content<T>(selection: Selection<T, Objects.CustomContent>) -> Selection<
    T, Objects.PreferenceRestriction
  > {
    Selection<T, Objects.PreferenceRestriction> {
      try $0.content(selection: selection)
    }
  }
}
extension Objects.PrepareMediumResponse {

  static func presignedUrl() -> Selection<String, Objects.PrepareMediumResponse> {
    Selection<String, Objects.PrepareMediumResponse> {
      try $0.presignedUrl()
    }
  }
}
extension Objects.Pricing {

  static func id() -> Selection<UUIDScalar, Objects.Pricing> {
    Selection<UUIDScalar, Objects.Pricing> {
      try $0.id()
    }
  }

  static func itemId() -> Selection<UUIDScalar, Objects.Pricing> {
    Selection<UUIDScalar, Objects.Pricing> {
      try $0.itemId()
    }
  }

  static func amount() -> Selection<DecimalScalar, Objects.Pricing> {
    Selection<DecimalScalar, Objects.Pricing> {
      try $0.amount()
    }
  }

  static func currencyCode() -> Selection<String, Objects.Pricing> {
    Selection<String, Objects.Pricing> {
      try $0.currencyCode()
    }
  }

  static func isRecurring() -> Selection<Bool, Objects.Pricing> {
    Selection<Bool, Objects.Pricing> {
      try $0.isRecurring()
    }
  }

  static func recurringInterval() -> Selection<Int, Objects.Pricing> {
    Selection<Int, Objects.Pricing> {
      try $0.recurringInterval()
    }
  }

  static func recurringIntervalUnit() -> Selection<
    Enums.PricingRecurringIntervalUnit, Objects.Pricing
  > {
    Selection<Enums.PricingRecurringIntervalUnit, Objects.Pricing> {
      try $0.recurringIntervalUnit()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Pricing> {
    Selection<DateTimeScalar, Objects.Pricing> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Pricing> {
    Selection<DateTimeScalar, Objects.Pricing> {
      try $0.updatedAt()
    }
  }

  static func originalAmount() -> Selection<DecimalScalar?, Objects.Pricing> {
    Selection<DecimalScalar?, Objects.Pricing> {
      try $0.originalAmount()
    }
  }

  static func kind() -> Selection<Enums.PricingKind, Objects.Pricing> {
    Selection<Enums.PricingKind, Objects.Pricing> {
      try $0.kind()
    }
  }

  static func appleProductIdentifier() -> Selection<String?, Objects.Pricing> {
    Selection<String?, Objects.Pricing> {
      try $0.appleProductIdentifier()
    }
  }

  static func googleProductIdentifier() -> Selection<String?, Objects.Pricing> {
    Selection<String?, Objects.Pricing> {
      try $0.googleProductIdentifier()
    }
  }

  static func item<T>(selection: Selection<T, Objects.Item>) -> Selection<T, Objects.Pricing> {
    Selection<T, Objects.Pricing> {
      try $0.item(selection: selection)
    }
  }
}
extension Objects.Prospect {

  static func id() -> Selection<UUIDScalar, Objects.Prospect> {
    Selection<UUIDScalar, Objects.Prospect> {
      try $0.id()
    }
  }

  static func email() -> Selection<String, Objects.Prospect> {
    Selection<String, Objects.Prospect> {
      try $0.email()
    }
  }

  static func code() -> Selection<String?, Objects.Prospect> {
    Selection<String?, Objects.Prospect> {
      try $0.code()
    }
  }

  static func codeExpiresAt() -> Selection<DateTimeScalar?, Objects.Prospect> {
    Selection<DateTimeScalar?, Objects.Prospect> {
      try $0.codeExpiresAt()
    }
  }

  static func token() -> Selection<String?, Objects.Prospect> {
    Selection<String?, Objects.Prospect> {
      try $0.token()
    }
  }

  static func expiresAt() -> Selection<DateTimeScalar?, Objects.Prospect> {
    Selection<DateTimeScalar?, Objects.Prospect> {
      try $0.expiresAt()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Prospect> {
    Selection<DateTimeScalar, Objects.Prospect> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Prospect> {
    Selection<DateTimeScalar, Objects.Prospect> {
      try $0.updatedAt()
    }
  }
}
extension Objects.Query {

  static func workspace<T>(hostname: String, selection: Selection<T, Objects.Workspace>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.workspace(hostname: hostname, selection: selection)
    }
  }

  static func workspacesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Workspace]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.workspacesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func workspacesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.workspacesAggregate(filter: filter, selection: selection)
    }
  }

  static func generateIdentityToken<T>(
    input: InputObjects.GenerateIdentityTokenInput,
    selection: Selection<T, Objects.GenerateIdentityTokenResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.generateIdentityToken(input: input, selection: selection)
    }
  }

  static func parseIdentityToken<T>(
    input: InputObjects.ParseIdentityTokenInput,
    selection: Selection<T, Objects.ParseIdentityTokenResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.parseIdentityToken(input: input, selection: selection)
    }
  }

  static func validateKeyPair<T>(
    input: InputObjects.ValidateKeyPairInput,
    selection: Selection<T, Objects.ValidateKeyPairResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.validateKeyPair(input: input, selection: selection)
    }
  }

  static func app<T>(id: UUIDScalar, selection: Selection<T, Objects.App>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.app(id: id, selection: selection)
    }
  }

  static func appsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.App]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.appsList(filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func appsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.appsAggregate(filter: filter, selection: selection)
    }
  }

  static func appCategoriesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.AppCategory]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.appCategoriesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func appCategoriesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.appCategoriesAggregate(filter: filter, selection: selection)
    }
  }

  static func appCategory<T>(id: UUIDScalar, selection: Selection<T, Objects.AppCategory>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.appCategory(id: id, selection: selection)
    }
  }

  static func environment<T>(id: UUIDScalar, selection: Selection<T, Objects.Environment>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.environment(id: id, selection: selection)
    }
  }

  static func environmentsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Environment]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.environmentsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func environmentsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.environmentsAggregate(filter: filter, selection: selection)
    }
  }

  static func installation<T>(id: UUIDScalar, selection: Selection<T, Objects.Installation>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.installation(id: id, selection: selection)
    }
  }

  static func resolveInstallation<T>(
    input: InputObjects.ResolveInstallationInput, selection: Selection<T, Objects.Installation>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.resolveInstallation(input: input, selection: selection)
    }
  }

  static func installationsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Installation]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.installationsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func installationsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.installationsAggregate(filter: filter, selection: selection)
    }
  }

  static func configuration<T>(id: UUIDScalar, selection: Selection<T, Objects.Configuration>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.configuration(id: id, selection: selection)
    }
  }

  static func configurationsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Configuration]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.configurationsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func configurationsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.configurationsAggregate(filter: filter, selection: selection)
    }
  }

  static func dashboard<T>(id: UUIDScalar, selection: Selection<T, Objects.Dashboard>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.dashboard(id: id, selection: selection)
    }
  }

  static func dashboardsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Dashboard]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.dashboardsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func dashboardsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.dashboardsAggregate(filter: filter, selection: selection)
    }
  }

  static func view<T>(id: UUIDScalar, selection: Selection<T, Objects.View>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.view(id: id, selection: selection)
    }
  }

  static func viewsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.View]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.viewsList(filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func viewsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.viewsAggregate(filter: filter, selection: selection)
    }
  }

  static func menuElement<T>(id: UUIDScalar, selection: Selection<T, Objects.MenuElement>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.menuElement(id: id, selection: selection)
    }
  }

  static func menuElementsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.MenuElement]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.menuElementsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func menuElementsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.menuElementsAggregate(filter: filter, selection: selection)
    }
  }

  static func theme<T>(id: UUIDScalar, selection: Selection<T, Objects.Theme>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.theme(id: id, selection: selection)
    }
  }

  static func themesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Theme]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.themesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func themesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.themesAggregate(filter: filter, selection: selection)
    }
  }

  static func group<T>(id: UUIDScalar, selection: Selection<T, Objects.Group>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.group(id: id, selection: selection)
    }
  }

  static func groupsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Group]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.groupsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func groupsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.groupsAggregate(filter: filter, selection: selection)
    }
  }

  static func verifyResetPasswordToken<T>(
    input: InputObjects.VerifyResetPasswordTokenInput,
    selection: Selection<T, Objects.VerifyResetPasswordTokenResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.verifyResetPasswordToken(input: input, selection: selection)
    }
  }

  static func account<T>(id: UUIDScalar, selection: Selection<T, Objects.Account>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.account(id: id, selection: selection)
    }
  }

  static func currentAccount<T>(selection: Selection<T, Objects.Account>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.currentAccount(selection: selection)
    }
  }

  static func accountsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Account]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.accountsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func accountsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.accountsAggregate(filter: filter, selection: selection)
    }
  }

  static func verifyInvitation<T>(
    input: InputObjects.VerifyInvitationInput,
    selection: Selection<T, Objects.VerifyInvitationResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.verifyInvitation(input: input, selection: selection)
    }
  }

  static func sessionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Session]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.sessionsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func sessionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.sessionsAggregate(filter: filter, selection: selection)
    }
  }

  static func keyPairsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.KeyPair]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.keyPairsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func keyPairsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.keyPairsAggregate(filter: filter, selection: selection)
    }
  }

  static func keyPair<T>(id: UUIDScalar, selection: Selection<T, Objects.KeyPair>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.keyPair(id: id, selection: selection)
    }
  }

  static func contact<T>(id: UUIDScalar, selection: Selection<T, Objects.Contact>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.contact(id: id, selection: selection)
    }
  }

  static func contactsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Contact]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.contactsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func contactsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.contactsAggregate(filter: filter, selection: selection)
    }
  }

  static func fetchContacts<T>(
    input: InputObjects.FetchContactsInput, selection: Selection<T, Objects.FetchContactsResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.fetchContacts(input: input, selection: selection)
    }
  }

  static func timeZones<T>(selection: Selection<T, [Objects.TimeZone]>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.timeZones(selection: selection)
    }
  }

  static func currencies<T>(selection: Selection<T, [Objects.Currency]>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.currencies(selection: selection)
    }
  }

  static func fieldTypes<T>(selection: Selection<T, [Objects.FieldType]>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.fieldTypes(selection: selection)
    }
  }

  static func externalLog<T>(id: UUIDScalar, selection: Selection<T, Objects.ExternalLog>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.externalLog(id: id, selection: selection)
    }
  }

  static func externalLogsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalLog]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalLogsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func externalLogsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalLogsAggregate(filter: filter, selection: selection)
    }
  }

  static func locales<T>(selection: Selection<T, [Objects.Locale]>) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.locales(selection: selection)
    }
  }

  static func externalTable<T>(id: UUIDScalar, selection: Selection<T, Objects.ExternalTable>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.externalTable(id: id, selection: selection)
    }
  }

  static func externalTablesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalTable]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalTablesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func externalTablesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalTablesAggregate(filter: filter, selection: selection)
    }
  }

  static func searchExternalRecords(input: InputObjects.SearchExternalRecordsInput) -> Selection<
    [JSONScalar], Objects.Query
  > {
    Selection<[JSONScalar], Objects.Query> {
      try $0.searchExternalRecords(input: input)
    }
  }

  static func exportExternalRecords<T>(
    input: InputObjects.ExportExternalRecordsInput,
    selection: Selection<T, Objects.ExportExternalRecordsResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.exportExternalRecords(input: input, selection: selection)
    }
  }

  static func summarizeExternalRecords<T>(
    input: InputObjects.SummarizeExternalRecordsInput,
    selection: Selection<T, Objects.SummarizeExternalRecordsResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.summarizeExternalRecords(input: input, selection: selection)
    }
  }

  static func externalColumn<T>(id: UUIDScalar, selection: Selection<T, Objects.ExternalColumn>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.externalColumn(id: id, selection: selection)
    }
  }

  static func externalColumnsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalColumn]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalColumnsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func externalColumnsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalColumnsAggregate(filter: filter, selection: selection)
    }
  }

  static func externalAsset<T>(id: UUIDScalar, selection: Selection<T, Objects.ExternalAsset>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.externalAsset(id: id, selection: selection)
    }
  }

  static func externalAssetsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalAsset]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalAssetsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func externalAssetsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalAssetsAggregate(filter: filter, selection: selection)
    }
  }

  static func asset<T>(id: UUIDScalar, selection: Selection<T, Objects.Asset>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.asset(id: id, selection: selection)
    }
  }

  static func externalRelationship<T>(
    id: UUIDScalar, selection: Selection<T, Objects.ExternalRelationship>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalRelationship(id: id, selection: selection)
    }
  }

  static func externalRelationshipsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalRelationship]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalRelationshipsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func externalRelationshipsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalRelationshipsAggregate(filter: filter, selection: selection)
    }
  }

  static func externalPolymorphicView<T>(
    id: UUIDScalar, selection: Selection<T, Objects.ExternalPolymorphicView>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalPolymorphicView(id: id, selection: selection)
    }
  }

  static func externalPolymorphicViewsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ExternalPolymorphicView]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalPolymorphicViewsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func externalPolymorphicViewsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.externalPolymorphicViewsAggregate(filter: filter, selection: selection)
    }
  }

  static func eventType<T>(id: UUIDScalar, selection: Selection<T, Objects.EventType>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.eventType(id: id, selection: selection)
    }
  }

  static func eventTypesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.EventType]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.eventTypesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func eventTypesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.eventTypesAggregate(filter: filter, selection: selection)
    }
  }

  static func event<T>(id: UUIDScalar, selection: Selection<T, Objects.Event>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.event(id: id, selection: selection)
    }
  }

  static func eventsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Event]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.eventsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func eventsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.eventsAggregate(filter: filter, selection: selection)
    }
  }

  static func resourcesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Resource]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.resourcesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func resourcesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.resourcesAggregate(filter: filter, selection: selection)
    }
  }

  static func resource<T>(id: UUIDScalar, selection: Selection<T, Objects.Resource>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.resource(id: id, selection: selection)
    }
  }

  static func searchRecords(input: InputObjects.SearchRecordsInput) -> Selection<
    [JSONScalar], Objects.Query
  > {
    Selection<[JSONScalar], Objects.Query> {
      try $0.searchRecords(input: input)
    }
  }

  static func operationsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Operation]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.operationsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func operationsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.operationsAggregate(filter: filter, selection: selection)
    }
  }

  static func operation<T>(id: UUIDScalar, selection: Selection<T, Objects.Operation>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.operation(id: id, selection: selection)
    }
  }

  static func attributesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.attributesAggregate(filter: filter, selection: selection)
    }
  }

  static func attributesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Attribute]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.attributesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func attribute<T>(id: UUIDScalar, selection: Selection<T, Objects.Attribute>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.attribute(id: id, selection: selection)
    }
  }

  static func parametersAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.parametersAggregate(filter: filter, selection: selection)
    }
  }

  static func parametersList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Parameter]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.parametersList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func parameter<T>(id: UUIDScalar, selection: Selection<T, Objects.Parameter>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.parameter(id: id, selection: selection)
    }
  }

  static func relationshipsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Relationship]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.relationshipsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func relationshipsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.relationshipsAggregate(filter: filter, selection: selection)
    }
  }

  static func relationship<T>(id: UUIDScalar, selection: Selection<T, Objects.Relationship>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.relationship(id: id, selection: selection)
    }
  }

  static func flow<T>(id: UUIDScalar, selection: Selection<T, Objects.Flow>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.flow(id: id, selection: selection)
    }
  }

  static func flowsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Flow]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.flowsList(filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func flowsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.flowsAggregate(filter: filter, selection: selection)
    }
  }

  static func flowVersion<T>(id: UUIDScalar, selection: Selection<T, Objects.FlowVersion>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.flowVersion(id: id, selection: selection)
    }
  }

  static func flowVersionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.FlowVersion]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.flowVersionsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func flowVersionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.flowVersionsAggregate(filter: filter, selection: selection)
    }
  }

  static func flowNode<T>(id: UUIDScalar, selection: Selection<T, Objects.FlowNode>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.flowNode(id: id, selection: selection)
    }
  }

  static func flowNodesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.FlowNode]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.flowNodesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func flowNodesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.flowNodesAggregate(filter: filter, selection: selection)
    }
  }

  static func flowExecution<T>(id: UUIDScalar, selection: Selection<T, Objects.FlowExecution>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.flowExecution(id: id, selection: selection)
    }
  }

  static func flowExecutionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.FlowExecution]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.flowExecutionsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func flowExecutionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.flowExecutionsAggregate(filter: filter, selection: selection)
    }
  }

  static func flowExecutionNode<T>(
    id: UUIDScalar, selection: Selection<T, Objects.FlowExecutionNode>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.flowExecutionNode(id: id, selection: selection)
    }
  }

  static func flowExecutionNodesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.FlowExecutionNode]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.flowExecutionNodesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func flowExecutionNodesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.flowExecutionNodesAggregate(filter: filter, selection: selection)
    }
  }

  static func content<T>(id: UUIDScalar, selection: Selection<T, Objects.CustomContent>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.content(id: id, selection: selection)
    }
  }

  static func contentsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.CustomContent]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.contentsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func contentsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.contentsAggregate(filter: filter, selection: selection)
    }
  }

  static func searchContent(input: InputObjects.SearchContentInput) -> Selection<
    [JSONScalar], Objects.Query
  > {
    Selection<[JSONScalar], Objects.Query> {
      try $0.searchContent(input: input)
    }
  }

  static func fetchContent(input: InputObjects.FetchContentInput) -> Selection<
    JSONScalar, Objects.Query
  > {
    Selection<JSONScalar, Objects.Query> {
      try $0.fetchContent(input: input)
    }
  }

  static func contentType<T>(id: UUIDScalar, selection: Selection<T, Objects.ContentType>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.contentType(id: id, selection: selection)
    }
  }

  static func contentTypesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ContentType]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.contentTypesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func contentTypesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.contentTypesAggregate(filter: filter, selection: selection)
    }
  }

  static func field<T>(id: UUIDScalar, selection: Selection<T, Objects.Field>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.field(id: id, selection: selection)
    }
  }

  static func fieldsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Field]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.fieldsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func fieldsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.fieldsAggregate(filter: filter, selection: selection)
    }
  }

  static func fieldRestrictionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.FieldRestriction]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.fieldRestrictionsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func fieldRestrictionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.fieldRestrictionsAggregate(filter: filter, selection: selection)
    }
  }

  static func medium<T>(id: UUIDScalar, selection: Selection<T, Objects.Medium>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.medium(id: id, selection: selection)
    }
  }

  static func mediaList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Medium]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.mediaList(filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func mediaAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.mediaAggregate(filter: filter, selection: selection)
    }
  }

  static func prepareMedium<T>(selection: Selection<T, Objects.PrepareMediumResponse>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.prepareMedium(selection: selection)
    }
  }

  static func contentVersion<T>(id: UUIDScalar, selection: Selection<T, Objects.ContentVersion>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.contentVersion(id: id, selection: selection)
    }
  }

  static func contentVersionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.contentVersionsAggregate(filter: filter, selection: selection)
    }
  }

  static func contentVersionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ContentVersion]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.contentVersionsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func contentTypeFieldOrderingsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ContentTypeFieldOrdering]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.contentTypeFieldOrderingsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func delivery<T>(id: UUIDScalar, selection: Selection<T, Objects.Delivery>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.delivery(id: id, selection: selection)
    }
  }

  static func deliveriesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Delivery]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.deliveriesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func deliveriesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.deliveriesAggregate(filter: filter, selection: selection)
    }
  }

  static func recipient<T>(id: UUIDScalar, selection: Selection<T, Objects.Recipient>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.recipient(id: id, selection: selection)
    }
  }

  static func recipientsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Recipient]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.recipientsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func recipientsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.recipientsAggregate(filter: filter, selection: selection)
    }
  }

  static func notification<T>(id: UUIDScalar, selection: Selection<T, Objects.Notification>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.notification(id: id, selection: selection)
    }
  }

  static func notificationsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Notification]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.notificationsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func notificationsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.notificationsAggregate(filter: filter, selection: selection)
    }
  }

  static func notificationRecipient<T>(
    id: UUIDScalar, selection: Selection<T, Objects.NotificationRecipient>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.notificationRecipient(id: id, selection: selection)
    }
  }

  static func notificationRecipientsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.NotificationRecipient]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.notificationRecipientsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func notificationRecipientsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.notificationRecipientsAggregate(filter: filter, selection: selection)
    }
  }

  static func preference<T>(id: UUIDScalar, selection: Selection<T, Objects.Preference>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.preference(id: id, selection: selection)
    }
  }

  static func preferencesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Preference]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.preferencesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func preferencesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.preferencesAggregate(filter: filter, selection: selection)
    }
  }

  static func storedPreference<T>(id: UUIDScalar, selection: Selection<T, Objects.StoredPreference>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.storedPreference(id: id, selection: selection)
    }
  }

  static func storedPreferencesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.StoredPreference]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.storedPreferencesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func storedPreferencesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.storedPreferencesAggregate(filter: filter, selection: selection)
    }
  }

  static func fetchStoredPreferences<T>(
    input: InputObjects.FetchStoredPreferencesInput,
    selection: Selection<T, Objects.FetchStoredPreferencesResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.fetchStoredPreferences(input: input, selection: selection)
    }
  }

  static func preferenceRestriction<T>(
    id: UUIDScalar, selection: Selection<T, Objects.PreferenceRestriction>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.preferenceRestriction(id: id, selection: selection)
    }
  }

  static func preferenceRestrictionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.PreferenceRestriction]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.preferenceRestrictionsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func preferenceRestrictionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.preferenceRestrictionsAggregate(filter: filter, selection: selection)
    }
  }

  static func notificationLog<T>(id: UUIDScalar, selection: Selection<T, Objects.NotificationLog>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.notificationLog(id: id, selection: selection)
    }
  }

  static func notificationLogsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.NotificationLog]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.notificationLogsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func notificationLogsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.notificationLogsAggregate(filter: filter, selection: selection)
    }
  }

  static func item<T>(id: UUIDScalar, selection: Selection<T, Objects.Item>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.item(id: id, selection: selection)
    }
  }

  static func fetchItem<T>(
    input: InputObjects.FetchItemInput, selection: Selection<T, Objects.Item>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.fetchItem(input: input, selection: selection)
    }
  }

  static func itemsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Item]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.itemsList(filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func itemsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.itemsAggregate(filter: filter, selection: selection)
    }
  }

  static func pricing<T>(id: UUIDScalar, selection: Selection<T, Objects.Pricing>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.pricing(id: id, selection: selection)
    }
  }

  static func pricingsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Pricing]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.pricingsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func pricingsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.pricingsAggregate(filter: filter, selection: selection)
    }
  }

  static func itemCategory<T>(id: UUIDScalar, selection: Selection<T, Objects.ItemCategory>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.itemCategory(id: id, selection: selection)
    }
  }

  static func itemCategoriesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ItemCategory]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.itemCategoriesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func itemCategoriesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.itemCategoriesAggregate(filter: filter, selection: selection)
    }
  }

  static func itemCategoryMembership<T>(
    id: UUIDScalar, selection: Selection<T, Objects.ItemCategoryMembership>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.itemCategoryMembership(id: id, selection: selection)
    }
  }

  static func itemCategoryMembershipsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.ItemCategoryMembership]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.itemCategoryMembershipsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func itemCategoryMembershipsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.itemCategoryMembershipsAggregate(filter: filter, selection: selection)
    }
  }

  static func coupon<T>(id: UUIDScalar, selection: Selection<T, Objects.Coupon>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.coupon(id: id, selection: selection)
    }
  }

  static func couponsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Coupon]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.couponsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func couponsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.couponsAggregate(filter: filter, selection: selection)
    }
  }

  static func couponCode<T>(id: UUIDScalar, selection: Selection<T, Objects.CouponCode>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.couponCode(id: id, selection: selection)
    }
  }

  static func couponCodesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.CouponCode]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.couponCodesList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func couponCodesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.couponCodesAggregate(filter: filter, selection: selection)
    }
  }

  static func couponRestriction<T>(
    id: UUIDScalar, selection: Selection<T, Objects.CouponRestriction>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.couponRestriction(id: id, selection: selection)
    }
  }

  static func couponRestrictionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.CouponRestriction]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.couponRestrictionsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func couponRestrictionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.couponRestrictionsAggregate(filter: filter, selection: selection)
    }
  }

  static func couponRedemption<T>(id: UUIDScalar, selection: Selection<T, Objects.CouponRedemption>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.couponRedemption(id: id, selection: selection)
    }
  }

  static func couponRedemptionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.CouponRedemption]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.couponRedemptionsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func couponRedemptionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.couponRedemptionsAggregate(filter: filter, selection: selection)
    }
  }

  static func order<T>(id: UUIDScalar, selection: Selection<T, Objects.Order>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.order(id: id, selection: selection)
    }
  }

  static func ordersList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Order]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.ordersList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func ordersAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.ordersAggregate(filter: filter, selection: selection)
    }
  }

  static func ordersListByItems<T>(
    input: InputObjects.OrdersListByItemsInput, selection: Selection<T, [Objects.Order]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.ordersListByItems(input: input, selection: selection)
    }
  }

  static func ordersAggregateByItems<T>(
    input: InputObjects.OrdersAggregateByItemsInput,
    selection: Selection<T, Objects.OrdersAggregateByItemsResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.ordersAggregateByItems(input: input, selection: selection)
    }
  }

  static func fetchCart<T>(
    input: InputObjects.FetchCartInput, selection: Selection<T, Objects.Order>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.fetchCart(input: input, selection: selection)
    }
  }

  static func orderItemsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.OrderItem]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.orderItemsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func transaction<T>(id: UUIDScalar, selection: Selection<T, Objects.Transaction>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.transaction(id: id, selection: selection)
    }
  }

  static func transactionsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Transaction]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.transactionsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func transactionsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.transactionsAggregate(filter: filter, selection: selection)
    }
  }

  static func role<T>(id: UUIDScalar, selection: Selection<T, Objects.Role>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.role(id: id, selection: selection)
    }
  }

  static func rolesList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Role]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.rolesList(filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func rolesAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.rolesAggregate(filter: filter, selection: selection)
    }
  }

  static func roleMembership<T>(id: UUIDScalar, selection: Selection<T, Objects.RoleMembership>)
    -> Selection<T, Objects.Query>
  {
    Selection<T, Objects.Query> {
      try $0.roleMembership(id: id, selection: selection)
    }
  }

  static func roleMembershipsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.RoleMembership]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.roleMembershipsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func roleMembershipsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.roleMembershipsAggregate(filter: filter, selection: selection)
    }
  }

  static func segment<T>(id: UUIDScalar, selection: Selection<T, Objects.Segment>) -> Selection<
    T, Objects.Query
  > {
    Selection<T, Objects.Query> {
      try $0.segment(id: id, selection: selection)
    }
  }

  static func segmentsList<T>(
    filter: OptionalArgument<JSONScalar> = .init(), order: OptionalArgument<JSONScalar> = .init(),
    limit: OptionalArgument<Int> = .init(), page: OptionalArgument<Int> = .init(),
    selection: Selection<T, [Objects.Segment]>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.segmentsList(
        filter: filter, order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func segmentsAggregate<T>(
    filter: OptionalArgument<JSONScalar> = .init(),
    selection: Selection<T, Objects.AggregateResponse>
  ) -> Selection<T, Objects.Query> {
    Selection<T, Objects.Query> {
      try $0.segmentsAggregate(filter: filter, selection: selection)
    }
  }
}
extension Objects.Recipient {

  static func id() -> Selection<UUIDScalar, Objects.Recipient> {
    Selection<UUIDScalar, Objects.Recipient> {
      try $0.id()
    }
  }

  static func deliveryId() -> Selection<UUIDScalar, Objects.Recipient> {
    Selection<UUIDScalar, Objects.Recipient> {
      try $0.deliveryId()
    }
  }

  static func accountId() -> Selection<UUIDScalar?, Objects.Recipient> {
    Selection<UUIDScalar?, Objects.Recipient> {
      try $0.accountId()
    }
  }

  static func groupId() -> Selection<UUIDScalar?, Objects.Recipient> {
    Selection<UUIDScalar?, Objects.Recipient> {
      try $0.groupId()
    }
  }

  static func parentId() -> Selection<UUIDScalar?, Objects.Recipient> {
    Selection<UUIDScalar?, Objects.Recipient> {
      try $0.parentId()
    }
  }

  static func data() -> Selection<JSONScalar?, Objects.Recipient> {
    Selection<JSONScalar?, Objects.Recipient> {
      try $0.data()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Recipient> {
    Selection<DateTimeScalar, Objects.Recipient> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Recipient> {
    Selection<DateTimeScalar, Objects.Recipient> {
      try $0.updatedAt()
    }
  }

  static func target() -> Selection<Enums.RecipientTarget, Objects.Recipient> {
    Selection<Enums.RecipientTarget, Objects.Recipient> {
      try $0.target()
    }
  }

  static func kind() -> Selection<Enums.RecipientKind, Objects.Recipient> {
    Selection<Enums.RecipientKind, Objects.Recipient> {
      try $0.kind()
    }
  }

  static func status() -> Selection<Enums.RecipientStatus, Objects.Recipient> {
    Selection<Enums.RecipientStatus, Objects.Recipient> {
      try $0.status()
    }
  }

  static func statusReason() -> Selection<String?, Objects.Recipient> {
    Selection<String?, Objects.Recipient> {
      try $0.statusReason()
    }
  }

  static func account<T>(selection: Selection<T, Objects.Account?>) -> Selection<
    T, Objects.Recipient
  > {
    Selection<T, Objects.Recipient> {
      try $0.account(selection: selection)
    }
  }

  static func group<T>(selection: Selection<T, Objects.Group?>) -> Selection<T, Objects.Recipient> {
    Selection<T, Objects.Recipient> {
      try $0.group(selection: selection)
    }
  }
}
extension Objects.RegisterWorkspaceResponse {

  static func invitationUrl() -> Selection<String, Objects.RegisterWorkspaceResponse> {
    Selection<String, Objects.RegisterWorkspaceResponse> {
      try $0.invitationUrl()
    }
  }
}
extension Objects.Relationship {

  static func id() -> Selection<UUIDScalar, Objects.Relationship> {
    Selection<UUIDScalar, Objects.Relationship> {
      try $0.id()
    }
  }

  static func name() -> Selection<String, Objects.Relationship> {
    Selection<String, Objects.Relationship> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Relationship> {
    Selection<String, Objects.Relationship> {
      try $0.identifier()
    }
  }

  static func sourceId() -> Selection<UUIDScalar, Objects.Relationship> {
    Selection<UUIDScalar, Objects.Relationship> {
      try $0.sourceId()
    }
  }

  static func sourceAttributeId() -> Selection<UUIDScalar, Objects.Relationship> {
    Selection<UUIDScalar, Objects.Relationship> {
      try $0.sourceAttributeId()
    }
  }

  static func targetId() -> Selection<UUIDScalar, Objects.Relationship> {
    Selection<UUIDScalar, Objects.Relationship> {
      try $0.targetId()
    }
  }

  static func targetAttributeId() -> Selection<UUIDScalar, Objects.Relationship> {
    Selection<UUIDScalar, Objects.Relationship> {
      try $0.targetAttributeId()
    }
  }

  static func kind() -> Selection<Enums.RelationshipKind, Objects.Relationship> {
    Selection<Enums.RelationshipKind, Objects.Relationship> {
      try $0.kind()
    }
  }

  static func filter() -> Selection<JSONScalar?, Objects.Relationship> {
    Selection<JSONScalar?, Objects.Relationship> {
      try $0.filter()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Relationship> {
    Selection<DateTimeScalar, Objects.Relationship> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Relationship> {
    Selection<DateTimeScalar, Objects.Relationship> {
      try $0.updatedAt()
    }
  }

  static func source<T>(selection: Selection<T, Objects.Resource>) -> Selection<
    T, Objects.Relationship
  > {
    Selection<T, Objects.Relationship> {
      try $0.source(selection: selection)
    }
  }

  static func sourceAttribute<T>(selection: Selection<T, Objects.Attribute>) -> Selection<
    T, Objects.Relationship
  > {
    Selection<T, Objects.Relationship> {
      try $0.sourceAttribute(selection: selection)
    }
  }

  static func target<T>(selection: Selection<T, Objects.Resource>) -> Selection<
    T, Objects.Relationship
  > {
    Selection<T, Objects.Relationship> {
      try $0.target(selection: selection)
    }
  }

  static func targetAttribute<T>(selection: Selection<T, Objects.Attribute>) -> Selection<
    T, Objects.Relationship
  > {
    Selection<T, Objects.Relationship> {
      try $0.targetAttribute(selection: selection)
    }
  }
}
extension Objects.Resource {

  static func id() -> Selection<UUIDScalar, Objects.Resource> {
    Selection<UUIDScalar, Objects.Resource> {
      try $0.id()
    }
  }

  static func originType() -> Selection<String?, Objects.Resource> {
    Selection<String?, Objects.Resource> {
      try $0.originType()
    }
  }

  static func originId() -> Selection<UUIDScalar?, Objects.Resource> {
    Selection<UUIDScalar?, Objects.Resource> {
      try $0.originId()
    }
  }

  static func name() -> Selection<String, Objects.Resource> {
    Selection<String, Objects.Resource> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Resource> {
    Selection<String, Objects.Resource> {
      try $0.identifier()
    }
  }

  static func description() -> Selection<String?, Objects.Resource> {
    Selection<String?, Objects.Resource> {
      try $0.description()
    }
  }

  static func icon() -> Selection<String?, Objects.Resource> {
    Selection<String?, Objects.Resource> {
      try $0.icon()
    }
  }

  static func position() -> Selection<Int, Objects.Resource> {
    Selection<Int, Objects.Resource> {
      try $0.position()
    }
  }

  static func titleAttributeId() -> Selection<UUIDScalar?, Objects.Resource> {
    Selection<UUIDScalar?, Objects.Resource> {
      try $0.titleAttributeId()
    }
  }

  static func subtitleAttributeId() -> Selection<UUIDScalar?, Objects.Resource> {
    Selection<UUIDScalar?, Objects.Resource> {
      try $0.subtitleAttributeId()
    }
  }

  static func polymorphicAttributeId() -> Selection<UUIDScalar?, Objects.Resource> {
    Selection<UUIDScalar?, Objects.Resource> {
      try $0.polymorphicAttributeId()
    }
  }

  static func orderStyle() -> Selection<Enums.OrderStyle?, Objects.Resource> {
    Selection<Enums.OrderStyle?, Objects.Resource> {
      try $0.orderStyle()
    }
  }

  static func orderAttributes() -> Selection<[JSONScalar], Objects.Resource> {
    Selection<[JSONScalar], Objects.Resource> {
      try $0.orderAttributes()
    }
  }

  static func validations() -> Selection<[JSONScalar], Objects.Resource> {
    Selection<[JSONScalar], Objects.Resource> {
      try $0.validations()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Resource> {
    Selection<DateTimeScalar, Objects.Resource> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Resource> {
    Selection<DateTimeScalar, Objects.Resource> {
      try $0.updatedAt()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar?, Objects.Resource> {
    Selection<UUIDScalar?, Objects.Resource> {
      try $0.workspaceId()
    }
  }

  static func appId() -> Selection<UUIDScalar?, Objects.Resource> {
    Selection<UUIDScalar?, Objects.Resource> {
      try $0.appId()
    }
  }

  static func operations<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.Operation]>
  ) -> Selection<T, Objects.Resource> {
    Selection<T, Objects.Resource> {
      try $0.operations(order: order, limit: limit, page: page, selection: selection)
    }
  }

  static func attributes<T>(
    order: OptionalArgument<JSONScalar> = .init(), limit: OptionalArgument<Int> = .init(),
    page: OptionalArgument<Int> = .init(), selection: Selection<T, [Objects.Attribute]>
  ) -> Selection<T, Objects.Resource> {
    Selection<T, Objects.Resource> {
      try $0.attributes(order: order, limit: limit, page: page, selection: selection)
    }
  }
}
extension Objects.Role {

  static func id() -> Selection<UUIDScalar, Objects.Role> {
    Selection<UUIDScalar, Objects.Role> {
      try $0.id()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar?, Objects.Role> {
    Selection<UUIDScalar?, Objects.Role> {
      try $0.workspaceId()
    }
  }

  static func appId() -> Selection<UUIDScalar?, Objects.Role> {
    Selection<UUIDScalar?, Objects.Role> {
      try $0.appId()
    }
  }

  static func name() -> Selection<String, Objects.Role> {
    Selection<String, Objects.Role> {
      try $0.name()
    }
  }

  static func policy() -> Selection<JSONScalar, Objects.Role> {
    Selection<JSONScalar, Objects.Role> {
      try $0.policy()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Role> {
    Selection<DateTimeScalar, Objects.Role> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Role> {
    Selection<DateTimeScalar, Objects.Role> {
      try $0.updatedAt()
    }
  }
}
extension Objects.RoleMembership {

  static func id() -> Selection<UUIDScalar, Objects.RoleMembership> {
    Selection<UUIDScalar, Objects.RoleMembership> {
      try $0.id()
    }
  }

  static func roleId() -> Selection<UUIDScalar, Objects.RoleMembership> {
    Selection<UUIDScalar, Objects.RoleMembership> {
      try $0.roleId()
    }
  }

  static func accountId() -> Selection<UUIDScalar, Objects.RoleMembership> {
    Selection<UUIDScalar, Objects.RoleMembership> {
      try $0.accountId()
    }
  }

  static func environmentId() -> Selection<UUIDScalar?, Objects.RoleMembership> {
    Selection<UUIDScalar?, Objects.RoleMembership> {
      try $0.environmentId()
    }
  }

  static func appId() -> Selection<UUIDScalar?, Objects.RoleMembership> {
    Selection<UUIDScalar?, Objects.RoleMembership> {
      try $0.appId()
    }
  }

  static func installationId() -> Selection<UUIDScalar?, Objects.RoleMembership> {
    Selection<UUIDScalar?, Objects.RoleMembership> {
      try $0.installationId()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.RoleMembership> {
    Selection<DateTimeScalar, Objects.RoleMembership> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.RoleMembership> {
    Selection<DateTimeScalar, Objects.RoleMembership> {
      try $0.updatedAt()
    }
  }
}
extension Objects.SaveContactsResponse {

  static func contacts<T>(selection: Selection<T, [Objects.Contact]>) -> Selection<
    T, Objects.SaveContactsResponse
  > {
    Selection<T, Objects.SaveContactsResponse> {
      try $0.contacts(selection: selection)
    }
  }
}
extension Objects.SaveStoredPreferencesResponse {

  static func success() -> Selection<Bool, Objects.SaveStoredPreferencesResponse> {
    Selection<Bool, Objects.SaveStoredPreferencesResponse> {
      try $0.success()
    }
  }
}
extension Objects.Segment {

  static func id() -> Selection<UUIDScalar, Objects.Segment> {
    Selection<UUIDScalar, Objects.Segment> {
      try $0.id()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar?, Objects.Segment> {
    Selection<UUIDScalar?, Objects.Segment> {
      try $0.workspaceId()
    }
  }

  static func resourceId() -> Selection<UUIDScalar, Objects.Segment> {
    Selection<UUIDScalar, Objects.Segment> {
      try $0.resourceId()
    }
  }

  static func name() -> Selection<String, Objects.Segment> {
    Selection<String, Objects.Segment> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Segment> {
    Selection<String, Objects.Segment> {
      try $0.identifier()
    }
  }

  static func filter() -> Selection<JSONScalar, Objects.Segment> {
    Selection<JSONScalar, Objects.Segment> {
      try $0.filter()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Segment> {
    Selection<DateTimeScalar, Objects.Segment> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Segment> {
    Selection<DateTimeScalar, Objects.Segment> {
      try $0.updatedAt()
    }
  }

  static func resource<T>(selection: Selection<T, Objects.Resource>) -> Selection<
    T, Objects.Segment
  > {
    Selection<T, Objects.Segment> {
      try $0.resource(selection: selection)
    }
  }
}
extension Objects.Session {

  static func id() -> Selection<UUIDScalar, Objects.Session> {
    Selection<UUIDScalar, Objects.Session> {
      try $0.id()
    }
  }

  static func accountId() -> Selection<UUIDScalar, Objects.Session> {
    Selection<UUIDScalar, Objects.Session> {
      try $0.accountId()
    }
  }

  static func token() -> Selection<String, Objects.Session> {
    Selection<String, Objects.Session> {
      try $0.token()
    }
  }

  static func lastActiveAt() -> Selection<DateTimeScalar, Objects.Session> {
    Selection<DateTimeScalar, Objects.Session> {
      try $0.lastActiveAt()
    }
  }

  static func expiresAt() -> Selection<DateTimeScalar, Objects.Session> {
    Selection<DateTimeScalar, Objects.Session> {
      try $0.expiresAt()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Session> {
    Selection<DateTimeScalar, Objects.Session> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Session> {
    Selection<DateTimeScalar, Objects.Session> {
      try $0.updatedAt()
    }
  }
}
extension Objects.StoredPreference {

  static func id() -> Selection<UUIDScalar, Objects.StoredPreference> {
    Selection<UUIDScalar, Objects.StoredPreference> {
      try $0.id()
    }
  }

  static func accountId() -> Selection<UUIDScalar, Objects.StoredPreference> {
    Selection<UUIDScalar, Objects.StoredPreference> {
      try $0.accountId()
    }
  }

  static func preferenceId() -> Selection<UUIDScalar?, Objects.StoredPreference> {
    Selection<UUIDScalar?, Objects.StoredPreference> {
      try $0.preferenceId()
    }
  }

  static func isEnabled() -> Selection<Bool, Objects.StoredPreference> {
    Selection<Bool, Objects.StoredPreference> {
      try $0.isEnabled()
    }
  }

  static func channels() -> Selection<[Enums.DeliveryChannel], Objects.StoredPreference> {
    Selection<[Enums.DeliveryChannel], Objects.StoredPreference> {
      try $0.channels()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.StoredPreference> {
    Selection<DateTimeScalar, Objects.StoredPreference> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.StoredPreference> {
    Selection<DateTimeScalar, Objects.StoredPreference> {
      try $0.updatedAt()
    }
  }

  static func preference<T>(selection: Selection<T, Objects.Preference?>) -> Selection<
    T, Objects.StoredPreference
  > {
    Selection<T, Objects.StoredPreference> {
      try $0.preference(selection: selection)
    }
  }

  static func account<T>(selection: Selection<T, Objects.Account>) -> Selection<
    T, Objects.StoredPreference
  > {
    Selection<T, Objects.StoredPreference> {
      try $0.account(selection: selection)
    }
  }
}
extension Objects.SummarizeExternalRecordsResponse {

  static func count() -> Selection<Int?, Objects.SummarizeExternalRecordsResponse> {
    Selection<Int?, Objects.SummarizeExternalRecordsResponse> {
      try $0.count()
    }
  }
}
extension Objects.Theme {

  static func id() -> Selection<UUIDScalar, Objects.Theme> {
    Selection<UUIDScalar, Objects.Theme> {
      try $0.id()
    }
  }

  static func workspaceId() -> Selection<UUIDScalar?, Objects.Theme> {
    Selection<UUIDScalar?, Objects.Theme> {
      try $0.workspaceId()
    }
  }

  static func name() -> Selection<String, Objects.Theme> {
    Selection<String, Objects.Theme> {
      try $0.name()
    }
  }

  static func palette<T>(selection: Selection<T, Objects.ThemePalette>) -> Selection<
    T, Objects.Theme
  > {
    Selection<T, Objects.Theme> {
      try $0.palette(selection: selection)
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Theme> {
    Selection<DateTimeScalar, Objects.Theme> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Theme> {
    Selection<DateTimeScalar, Objects.Theme> {
      try $0.updatedAt()
    }
  }
}
extension Objects.ThemePalette {

  static func primary() -> Selection<String, Objects.ThemePalette> {
    Selection<String, Objects.ThemePalette> {
      try $0.primary()
    }
  }

  static func secondary() -> Selection<String, Objects.ThemePalette> {
    Selection<String, Objects.ThemePalette> {
      try $0.secondary()
    }
  }

  static func accent() -> Selection<String, Objects.ThemePalette> {
    Selection<String, Objects.ThemePalette> {
      try $0.accent()
    }
  }
}
extension Objects.TimeZone {

  static func label() -> Selection<String, Objects.TimeZone> {
    Selection<String, Objects.TimeZone> {
      try $0.label()
    }
  }

  static func value() -> Selection<String, Objects.TimeZone> {
    Selection<String, Objects.TimeZone> {
      try $0.value()
    }
  }
}
extension Objects.TrackEventResponse {

  static func id() -> Selection<UUIDScalar, Objects.TrackEventResponse> {
    Selection<UUIDScalar, Objects.TrackEventResponse> {
      try $0.id()
    }
  }

  static func success() -> Selection<Bool, Objects.TrackEventResponse> {
    Selection<Bool, Objects.TrackEventResponse> {
      try $0.success()
    }
  }
}
extension Objects.TrackNotificationResponse {

  static func success() -> Selection<Bool, Objects.TrackNotificationResponse> {
    Selection<Bool, Objects.TrackNotificationResponse> {
      try $0.success()
    }
  }
}
extension Objects.Transaction {

  static func id() -> Selection<UUIDScalar, Objects.Transaction> {
    Selection<UUIDScalar, Objects.Transaction> {
      try $0.id()
    }
  }

  static func orderId() -> Selection<UUIDScalar, Objects.Transaction> {
    Selection<UUIDScalar, Objects.Transaction> {
      try $0.orderId()
    }
  }

  static func accountId() -> Selection<UUIDScalar, Objects.Transaction> {
    Selection<UUIDScalar, Objects.Transaction> {
      try $0.accountId()
    }
  }

  static func amount() -> Selection<DecimalScalar, Objects.Transaction> {
    Selection<DecimalScalar, Objects.Transaction> {
      try $0.amount()
    }
  }

  static func status() -> Selection<Enums.TransactionStatus, Objects.Transaction> {
    Selection<Enums.TransactionStatus, Objects.Transaction> {
      try $0.status()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Transaction> {
    Selection<DateTimeScalar, Objects.Transaction> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Transaction> {
    Selection<DateTimeScalar, Objects.Transaction> {
      try $0.updatedAt()
    }
  }

  static func gatewayMeta() -> Selection<JSONScalar?, Objects.Transaction> {
    Selection<JSONScalar?, Objects.Transaction> {
      try $0.gatewayMeta()
    }
  }

  static func currencyCode() -> Selection<String, Objects.Transaction> {
    Selection<String, Objects.Transaction> {
      try $0.currencyCode()
    }
  }
}
extension Objects.ValidateKeyPairResponse {

  static func success() -> Selection<Bool, Objects.ValidateKeyPairResponse> {
    Selection<Bool, Objects.ValidateKeyPairResponse> {
      try $0.success()
    }
  }
}
extension Objects.VerifyInvitationResponse {

  static func success() -> Selection<Bool, Objects.VerifyInvitationResponse> {
    Selection<Bool, Objects.VerifyInvitationResponse> {
      try $0.success()
    }
  }
}
extension Objects.VerifyResetPasswordTokenResponse {

  static func success() -> Selection<Bool, Objects.VerifyResetPasswordTokenResponse> {
    Selection<Bool, Objects.VerifyResetPasswordTokenResponse> {
      try $0.success()
    }
  }
}
extension Objects.View {

  static func id() -> Selection<UUIDScalar, Objects.View> {
    Selection<UUIDScalar, Objects.View> {
      try $0.id()
    }
  }

  static func dashboardId() -> Selection<UUIDScalar, Objects.View> {
    Selection<UUIDScalar, Objects.View> {
      try $0.dashboardId()
    }
  }

  static func installationId() -> Selection<UUIDScalar?, Objects.View> {
    Selection<UUIDScalar?, Objects.View> {
      try $0.installationId()
    }
  }

  static func name() -> Selection<String, Objects.View> {
    Selection<String, Objects.View> {
      try $0.name()
    }
  }

  static func defaultStyle() -> Selection<Enums.ViewStyle, Objects.View> {
    Selection<Enums.ViewStyle, Objects.View> {
      try $0.defaultStyle()
    }
  }

  static func componentPath() -> Selection<String?, Objects.View> {
    Selection<String?, Objects.View> {
      try $0.componentPath()
    }
  }

  static func blocks() -> Selection<[JSONScalar], Objects.View> {
    Selection<[JSONScalar], Objects.View> {
      try $0.blocks()
    }
  }

  static func operations() -> Selection<[JSONScalar], Objects.View> {
    Selection<[JSONScalar], Objects.View> {
      try $0.operations()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.View> {
    Selection<DateTimeScalar, Objects.View> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.View> {
    Selection<DateTimeScalar, Objects.View> {
      try $0.updatedAt()
    }
  }

  static func installation<T>(selection: Selection<T, Objects.Installation?>) -> Selection<
    T, Objects.View
  > {
    Selection<T, Objects.View> {
      try $0.installation(selection: selection)
    }
  }
}
extension Objects.Workspace {

  static func id() -> Selection<UUIDScalar, Objects.Workspace> {
    Selection<UUIDScalar, Objects.Workspace> {
      try $0.id()
    }
  }

  static func name() -> Selection<String, Objects.Workspace> {
    Selection<String, Objects.Workspace> {
      try $0.name()
    }
  }

  static func identifier() -> Selection<String, Objects.Workspace> {
    Selection<String, Objects.Workspace> {
      try $0.identifier()
    }
  }

  static func hostname() -> Selection<String?, Objects.Workspace> {
    Selection<String?, Objects.Workspace> {
      try $0.hostname()
    }
  }

  static func logoSymbol() -> Selection<String?, Objects.Workspace> {
    Selection<String?, Objects.Workspace> {
      try $0.logoSymbol()
    }
  }

  static func logoFull() -> Selection<String?, Objects.Workspace> {
    Selection<String?, Objects.Workspace> {
      try $0.logoFull()
    }
  }

  static func wallpaper() -> Selection<String?, Objects.Workspace> {
    Selection<String?, Objects.Workspace> {
      try $0.wallpaper()
    }
  }

  static func createdAt() -> Selection<DateTimeScalar, Objects.Workspace> {
    Selection<DateTimeScalar, Objects.Workspace> {
      try $0.createdAt()
    }
  }

  static func updatedAt() -> Selection<DateTimeScalar, Objects.Workspace> {
    Selection<DateTimeScalar, Objects.Workspace> {
      try $0.updatedAt()
    }
  }

  static func themeId() -> Selection<UUIDScalar?, Objects.Workspace> {
    Selection<UUIDScalar?, Objects.Workspace> {
      try $0.themeId()
    }
  }

  static func locales() -> Selection<[JSONScalar], Objects.Workspace> {
    Selection<[JSONScalar], Objects.Workspace> {
      try $0.locales()
    }
  }

  static func theme<T>(selection: Selection<T, Objects.Theme?>) -> Selection<T, Objects.Workspace> {
    Selection<T, Objects.Workspace> {
      try $0.theme(selection: selection)
    }
  }
}

// MARK: - Interfaces
enum Interfaces {}

// MARK: - Unions
enum Unions {}

// MARK: - Enums
enum Enums {}
extension Enums {
  /// AccountGender
  enum AccountGender: String, CaseIterable, Codable {

    case male = "MALE"

    case female = "FEMALE"

    case other = "OTHER"
  }
}

extension Enums.AccountGender: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.AccountGender(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "AccountGender",
        received: data.value
      )
    }
  }

  static var mockValue = Self.male
}
extension Enums {
  /// AccountKind
  enum AccountKind: String, CaseIterable, Codable {

    case workspaceMember = "WORKSPACE_MEMBER"

    case user = "USER"

    case visitor = "VISITOR"
  }
}

extension Enums.AccountKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.AccountKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "AccountKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.workspaceMember
}
extension Enums {
  /// AccountStatus
  enum AccountStatus: String, CaseIterable, Codable {

    case notInvited = "NOT_INVITED"

    case invited = "INVITED"

    case onboarding = "ONBOARDING"

    case enabled = "ENABLED"

    case disabled = "DISABLED"
  }
}

extension Enums.AccountStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.AccountStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "AccountStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.notInvited
}
extension Enums {
  /// AppKind
  enum AppKind: String, CaseIterable, Codable {

    case `internal` = "INTERNAL"

    case external = "EXTERNAL"

    case custom = "CUSTOM"
  }
}

extension Enums.AppKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.AppKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "AppKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.`internal`
}
extension Enums {
  /// AssetProcessingStatus
  enum AssetProcessingStatus: String, CaseIterable, Codable {

    case pending = "PENDING"

    case completed = "COMPLETED"

    case failed = "FAILED"
  }
}

extension Enums.AssetProcessingStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.AssetProcessingStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "AssetProcessingStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.pending
}
extension Enums {
  /// AssetUploadStatus
  enum AssetUploadStatus: String, CaseIterable, Codable {

    case pending = "PENDING"

    case uploaded = "UPLOADED"

    case failed = "FAILED"

    case canceled = "CANCELED"

    case timedOut = "TIMED_OUT"
  }
}

extension Enums.AssetUploadStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.AssetUploadStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "AssetUploadStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.pending
}
extension Enums {
  /// ConfigurationStatus
  enum ConfigurationStatus: String, CaseIterable, Codable {

    case pending = "PENDING"

    case completed = "COMPLETED"

    case failed = "FAILED"
  }
}

extension Enums.ConfigurationStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.ConfigurationStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "ConfigurationStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.pending
}
extension Enums {
  /// ContactKind
  enum ContactKind: String, CaseIterable, Codable {

    case email = "EMAIL"

    case phone = "PHONE"

    case ios = "IOS"

    case android = "ANDROID"

    case web = "WEB"

    case whatsapp = "WHATSAPP"
  }
}

extension Enums.ContactKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.ContactKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "ContactKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.email
}
extension Enums {
  /// ContactStatus
  enum ContactStatus: String, CaseIterable, Codable {

    case subscribed = "SUBSCRIBED"

    case notSubscribed = "NOT_SUBSCRIBED"

    case unsubscribed = "UNSUBSCRIBED"

    case blacklisted = "BLACKLISTED"

    case revoked = "REVOKED"
  }
}

extension Enums.ContactStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.ContactStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "ContactStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.subscribed
}
extension Enums {
  /// ContentTypeCategory
  enum ContentTypeCategory: String, CaseIterable, Codable {

    case regular = "REGULAR"

    case embedded = "EMBEDDED"
  }
}

extension Enums.ContentTypeCategory: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.ContentTypeCategory(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "ContentTypeCategory",
        received: data.value
      )
    }
  }

  static var mockValue = Self.regular
}
extension Enums {
  /// ContentTypeKind
  enum ContentTypeKind: String, CaseIterable, Codable {

    case collection = "COLLECTION"

    case singleton = "SINGLETON"
  }
}

extension Enums.ContentTypeKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.ContentTypeKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "ContentTypeKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.collection
}
extension Enums {
  /// ContentTypeOrderingStyle
  enum ContentTypeOrderingStyle: String, CaseIterable, Codable {

    case byCreationTime = "BY_CREATION_TIME"

    case bySpecificFields = "BY_SPECIFIC_FIELDS"

    case byLinearDragAndDrop = "BY_LINEAR_DRAG_AND_DROP"

    case byTreeDragAndDrop = "BY_TREE_DRAG_AND_DROP"
  }
}

extension Enums.ContentTypeOrderingStyle: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.ContentTypeOrderingStyle(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "ContentTypeOrderingStyle",
        received: data.value
      )
    }
  }

  static var mockValue = Self.byCreationTime
}
extension Enums {
  /// CouponDiscountType
  enum CouponDiscountType: String, CaseIterable, Codable {

    case fixed = "FIXED"

    case percentage = "PERCENTAGE"
  }
}

extension Enums.CouponDiscountType: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.CouponDiscountType(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "CouponDiscountType",
        received: data.value
      )
    }
  }

  static var mockValue = Self.fixed
}
extension Enums {
  /// DashboardSourceType
  enum DashboardSourceType: String, CaseIterable, Codable {

    case environment = "ENVIRONMENT"

    case installation = "INSTALLATION"

    case resource = "RESOURCE"

    case menuElement = "MENU_ELEMENT"
  }
}

extension Enums.DashboardSourceType: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.DashboardSourceType(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "DashboardSourceType",
        received: data.value
      )
    }
  }

  static var mockValue = Self.environment
}
extension Enums {
  /// DeliveryChannel
  enum DeliveryChannel: String, CaseIterable, Codable {

    case email = "EMAIL"

    case sms = "SMS"

    case push = "PUSH"

    case whatsapp = "WHATSAPP"
  }
}

extension Enums.DeliveryChannel: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.DeliveryChannel(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "DeliveryChannel",
        received: data.value
      )
    }
  }

  static var mockValue = Self.email
}
extension Enums {
  /// DeliveryStatus
  enum DeliveryStatus: String, CaseIterable, Codable {

    case draft = "DRAFT"

    case scheduled = "SCHEDULED"

    case pending = "PENDING"

    case processed = "PROCESSED"

    case failed = "FAILED"
  }
}

extension Enums.DeliveryStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.DeliveryStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "DeliveryStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.draft
}
extension Enums {
  /// ExternalLogKind
  enum ExternalLogKind: String, CaseIterable, Codable {

    case inbound = "INBOUND"

    case outbound = "OUTBOUND"
  }
}

extension Enums.ExternalLogKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.ExternalLogKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "ExternalLogKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.inbound
}
extension Enums {
  /// ExternalLogStatus
  enum ExternalLogStatus: String, CaseIterable, Codable {

    case pending = "PENDING"

    case processing = "PROCESSING"

    case completed = "COMPLETED"

    case failed = "FAILED"

    case dropped = "DROPPED"
  }
}

extension Enums.ExternalLogStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.ExternalLogStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "ExternalLogStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.pending
}
extension Enums {
  /// ExternalRelationshipKind
  enum ExternalRelationshipKind: String, CaseIterable, Codable {

    case oneToOne = "ONE_TO_ONE"

    case oneToMany = "ONE_TO_MANY"
  }
}

extension Enums.ExternalRelationshipKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.ExternalRelationshipKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "ExternalRelationshipKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.oneToOne
}
extension Enums {
  /// FieldTypeCategory
  enum FieldTypeCategory: String, CaseIterable, Codable {

    case basic = "BASIC"

    case advanced = "ADVANCED"

    case other = "OTHER"
  }
}

extension Enums.FieldTypeCategory: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FieldTypeCategory(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FieldTypeCategory",
        received: data.value
      )
    }
  }

  static var mockValue = Self.basic
}
extension Enums {
  /// FieldTypeDataType
  enum FieldTypeDataType: String, CaseIterable, Codable {

    case string = "STRING"

    case number = "NUMBER"

    case boolean = "BOOLEAN"

    case json = "JSON"
  }
}

extension Enums.FieldTypeDataType: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FieldTypeDataType(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FieldTypeDataType",
        received: data.value
      )
    }
  }

  static var mockValue = Self.string
}
extension Enums {
  /// FlowExecutionNodeStatus
  enum FlowExecutionNodeStatus: String, CaseIterable, Codable {

    case pending = "PENDING"

    case completed = "COMPLETED"

    case failed = "FAILED"

    case stopped = "STOPPED"
  }
}

extension Enums.FlowExecutionNodeStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowExecutionNodeStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowExecutionNodeStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.pending
}
extension Enums {
  /// FlowExecutionStatus
  enum FlowExecutionStatus: String, CaseIterable, Codable {

    case pending = "PENDING"

    case completed = "COMPLETED"

    case failed = "FAILED"

    case stopped = "STOPPED"
  }
}

extension Enums.FlowExecutionStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowExecutionStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowExecutionStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.pending
}
extension Enums {
  /// FlowNodeKind
  enum FlowNodeKind: String, CaseIterable, Codable {

    case timeTrigger = "TIME_TRIGGER"

    case eventTrigger = "EVENT_TRIGGER"

    case timeStep = "TIME_STEP"

    case eventStep = "EVENT_STEP"

    case actionStep = "ACTION_STEP"

    case branchStep = "BRANCH_STEP"
  }
}

extension Enums.FlowNodeKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowNodeKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowNodeKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.timeTrigger
}
extension Enums {
  /// FlowNodeOccurrenceBehavior
  enum FlowNodeOccurrenceBehavior: String, CaseIterable, Codable {

    case must = "MUST"

    case mustNot = "MUST_NOT"
  }
}

extension Enums.FlowNodeOccurrenceBehavior: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowNodeOccurrenceBehavior(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowNodeOccurrenceBehavior",
        received: data.value
      )
    }
  }

  static var mockValue = Self.must
}
extension Enums {
  /// FlowNodeOccurrenceKind
  enum FlowNodeOccurrenceKind: String, CaseIterable, Codable {

    case exactly = "EXACTLY"

    case atLeast = "AT_LEAST"
  }
}

extension Enums.FlowNodeOccurrenceKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowNodeOccurrenceKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowNodeOccurrenceKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.exactly
}
extension Enums {
  /// FlowNodeOccurrenceScope
  enum FlowNodeOccurrenceScope: String, CaseIterable, Codable {

    case triggerAccount = "TRIGGER_ACCOUNT"

    case anyAccount = "ANY_ACCOUNT"

    case custom = "CUSTOM"
  }
}

extension Enums.FlowNodeOccurrenceScope: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowNodeOccurrenceScope(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowNodeOccurrenceScope",
        received: data.value
      )
    }
  }

  static var mockValue = Self.triggerAccount
}
extension Enums {
  /// FlowNodeOccurrenceWindowPeriod
  enum FlowNodeOccurrenceWindowPeriod: String, CaseIterable, Codable {

    case lifetime = "LIFETIME"

    case year = "YEAR"

    case month = "MONTH"

    case week = "WEEK"

    case day = "DAY"

    case hour = "HOUR"

    case minute = "MINUTE"

    case second = "SECOND"
  }
}

extension Enums.FlowNodeOccurrenceWindowPeriod: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowNodeOccurrenceWindowPeriod(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowNodeOccurrenceWindowPeriod",
        received: data.value
      )
    }
  }

  static var mockValue = Self.lifetime
}
extension Enums {
  /// FlowNodeRepeatability
  enum FlowNodeRepeatability: String, CaseIterable, Codable {

    case one = "ONE"

    case many = "MANY"
  }
}

extension Enums.FlowNodeRepeatability: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowNodeRepeatability(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowNodeRepeatability",
        received: data.value
      )
    }
  }

  static var mockValue = Self.one
}
extension Enums {
  /// FlowNodeWaitBehavior
  enum FlowNodeWaitBehavior: String, CaseIterable, Codable {

    case waitFor = "WAIT_FOR"

    case waitUntil = "WAIT_UNTIL"
  }
}

extension Enums.FlowNodeWaitBehavior: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowNodeWaitBehavior(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowNodeWaitBehavior",
        received: data.value
      )
    }
  }

  static var mockValue = Self.waitFor
}
extension Enums {
  /// FlowNodeWaitForPeriod
  enum FlowNodeWaitForPeriod: String, CaseIterable, Codable {

    case day = "DAY"

    case year = "YEAR"

    case month = "MONTH"

    case week = "WEEK"

    case hour = "HOUR"

    case minute = "MINUTE"

    case second = "SECOND"
  }
}

extension Enums.FlowNodeWaitForPeriod: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowNodeWaitForPeriod(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowNodeWaitForPeriod",
        received: data.value
      )
    }
  }

  static var mockValue = Self.day
}
extension Enums {
  /// FlowNodeWaitUntilPeriod
  enum FlowNodeWaitUntilPeriod: String, CaseIterable, Codable {

    case hour = "HOUR"

    case day = "DAY"

    case week = "WEEK"

    case month = "MONTH"
  }
}

extension Enums.FlowNodeWaitUntilPeriod: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowNodeWaitUntilPeriod(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowNodeWaitUntilPeriod",
        received: data.value
      )
    }
  }

  static var mockValue = Self.hour
}
extension Enums {
  /// FlowNodeWaitUntilWeekday
  enum FlowNodeWaitUntilWeekday: String, CaseIterable, Codable {

    case mo = "MO"

    case tu = "TU"

    case we = "WE"

    case th = "TH"

    case fr = "FR"

    case sa = "SA"

    case su = "SU"
  }
}

extension Enums.FlowNodeWaitUntilWeekday: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowNodeWaitUntilWeekday(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowNodeWaitUntilWeekday",
        received: data.value
      )
    }
  }

  static var mockValue = Self.mo
}
extension Enums {
  /// FlowVersionStatus
  enum FlowVersionStatus: String, CaseIterable, Codable {

    case draft = "DRAFT"

    case published = "PUBLISHED"

    case unpublishing = "UNPUBLISHING"

    case unpublished = "UNPUBLISHED"
  }
}

extension Enums.FlowVersionStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.FlowVersionStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "FlowVersionStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.draft
}
extension Enums {
  /// ItemKind
  enum ItemKind: String, CaseIterable, Codable {

    case goods = "GOODS"

    case services = "SERVICES"
  }
}

extension Enums.ItemKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.ItemKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "ItemKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.goods
}
extension Enums {
  /// MenuElementKind
  enum MenuElementKind: String, CaseIterable, Codable {

    case item = "ITEM"

    case group = "GROUP"

    case separator = "SEPARATOR"
  }
}

extension Enums.MenuElementKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.MenuElementKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "MenuElementKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.item
}
extension Enums {
  /// MenuElementPlacement
  enum MenuElementPlacement: String, CaseIterable, Codable {

    case side = "SIDE"

    case top = "TOP"
  }
}

extension Enums.MenuElementPlacement: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.MenuElementPlacement(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "MenuElementPlacement",
        received: data.value
      )
    }
  }

  static var mockValue = Self.side
}
extension Enums {
  /// MenuElementSeparatorStyle
  enum MenuElementSeparatorStyle: String, CaseIterable, Codable {

    case ruler = "RULER"

    case whitespace = "WHITESPACE"
  }
}

extension Enums.MenuElementSeparatorStyle: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.MenuElementSeparatorStyle(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "MenuElementSeparatorStyle",
        received: data.value
      )
    }
  }

  static var mockValue = Self.ruler
}
extension Enums {
  /// MenuElementTarget
  enum MenuElementTarget: String, CaseIterable, Codable {

    case view = "VIEW"

    case submenu = "SUBMENU"

    case url = "URL"
  }
}

extension Enums.MenuElementTarget: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.MenuElementTarget(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "MenuElementTarget",
        received: data.value
      )
    }
  }

  static var mockValue = Self.view
}
extension Enums {
  /// NotificationLogCategory
  enum NotificationLogCategory: String, CaseIterable, Codable {

    case sendFailed = "SEND_FAILED"

    case sent = "SENT"

    case rejected = "REJECTED"

    case bounced = "BOUNCED"

    case deliveryFailed = "DELIVERY_FAILED"

    case delivered = "DELIVERED"

    case opened = "OPENED"

    case clicked = "CLICKED"

    case complained = "COMPLAINED"

    case subscriptionChanged = "SUBSCRIPTION_CHANGED"

    case unknown = "UNKNOWN"
  }
}

extension Enums.NotificationLogCategory: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.NotificationLogCategory(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "NotificationLogCategory",
        received: data.value
      )
    }
  }

  static var mockValue = Self.sendFailed
}
extension Enums {
  /// NotificationLogSubcategory
  enum NotificationLogSubcategory: String, CaseIterable, Codable {

    case hardBounced = "HARD_BOUNCED"

    case softBounced = "SOFT_BOUNCED"

    case otherBounced = "OTHER_BOUNCED"

    case unsubscribed = "UNSUBSCRIBED"

    case subscribed = "SUBSCRIBED"

    case groupUnsubscribed = "GROUP_UNSUBSCRIBED"

    case groupSubscribed = "GROUP_SUBSCRIBED"

    case failedDnd = "FAILED_DND"
  }
}

extension Enums.NotificationLogSubcategory: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.NotificationLogSubcategory(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "NotificationLogSubcategory",
        received: data.value
      )
    }
  }

  static var mockValue = Self.hardBounced
}
extension Enums {
  /// OperationActsOn
  enum OperationActsOn: String, CaseIterable, Codable {

    case member = "MEMBER"

    case collection = "COLLECTION"
  }
}

extension Enums.OperationActsOn: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.OperationActsOn(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "OperationActsOn",
        received: data.value
      )
    }
  }

  static var mockValue = Self.member
}
extension Enums {
  /// OperationBehavior
  enum OperationBehavior: String, CaseIterable, Codable {

    case custom = "CUSTOM"

    case get = "GET"

    case list = "LIST"

    case aggregate = "AGGREGATE"

    case export = "EXPORT"

    case create = "CREATE"

    case update = "UPDATE"

    case destroy = "DESTROY"

    case generic = "GENERIC"
  }
}

extension Enums.OperationBehavior: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.OperationBehavior(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "OperationBehavior",
        received: data.value
      )
    }
  }

  static var mockValue = Self.custom
}
extension Enums {
  /// OperationKind
  enum OperationKind: String, CaseIterable, Codable {

    case query = "QUERY"

    case mutation = "MUTATION"
  }
}

extension Enums.OperationKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.OperationKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "OperationKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.query
}
extension Enums {
  /// OrderStatus
  enum OrderStatus: String, CaseIterable, Codable {

    case draft = "DRAFT"

    case initial = "INITIAL"

    case checkedOut = "CHECKED_OUT"

    case paid = "PAID"

    case canceled = "CANCELED"
  }
}

extension Enums.OrderStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.OrderStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "OrderStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.draft
}
extension Enums {
  /// OrderStyle
  enum OrderStyle: String, CaseIterable, Codable {

    case creationTime = "CREATION_TIME"

    case specificFields = "SPECIFIC_FIELDS"

    case linearDragAndDrop = "LINEAR_DRAG_AND_DROP"

    case treeDragAndDrop = "TREE_DRAG_AND_DROP"
  }
}

extension Enums.OrderStyle: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.OrderStyle(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "OrderStyle",
        received: data.value
      )
    }
  }

  static var mockValue = Self.creationTime
}
extension Enums {
  /// PricingKind
  enum PricingKind: String, CaseIterable, Codable {

    case regular = "REGULAR"

    case inApp = "IN_APP"
  }
}

extension Enums.PricingKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.PricingKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "PricingKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.regular
}
extension Enums {
  /// PricingRecurringIntervalUnit
  enum PricingRecurringIntervalUnit: String, CaseIterable, Codable {

    case day = "DAY"

    case week = "WEEK"

    case month = "MONTH"

    case year = "YEAR"
  }
}

extension Enums.PricingRecurringIntervalUnit: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.PricingRecurringIntervalUnit(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "PricingRecurringIntervalUnit",
        received: data.value
      )
    }
  }

  static var mockValue = Self.day
}
extension Enums {
  /// RecipientKind
  enum RecipientKind: String, CaseIterable, Codable {

    case directContact = "DIRECT_CONTACT"

    case account = "ACCOUNT"

    case group = "GROUP"

    case accountSegment = "ACCOUNT_SEGMENT"

    case groupSegment = "GROUP_SEGMENT"
  }
}

extension Enums.RecipientKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.RecipientKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "RecipientKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.directContact
}
extension Enums {
  /// RecipientStatus
  enum RecipientStatus: String, CaseIterable, Codable {

    case pending = "PENDING"

    case validated = "VALIDATED"

    case processed = "PROCESSED"

    case failed = "FAILED"

    case skipped = "SKIPPED"
  }
}

extension Enums.RecipientStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.RecipientStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "RecipientStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.pending
}
extension Enums {
  /// RecipientTarget
  enum RecipientTarget: String, CaseIterable, Codable {

    case to = "TO"

    case cc = "CC"

    case bcc = "BCC"
  }
}

extension Enums.RecipientTarget: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.RecipientTarget(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "RecipientTarget",
        received: data.value
      )
    }
  }

  static var mockValue = Self.to
}
extension Enums {
  /// RelationshipKind
  enum RelationshipKind: String, CaseIterable, Codable {

    case oneToOne = "ONE_TO_ONE"

    case oneToMany = "ONE_TO_MANY"
  }
}

extension Enums.RelationshipKind: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.RelationshipKind(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "RelationshipKind",
        received: data.value
      )
    }
  }

  static var mockValue = Self.oneToOne
}
extension Enums {
  /// SortDirection
  enum SortDirection: String, CaseIterable, Codable {

    case asc = "ASC"

    case desc = "DESC"
  }
}

extension Enums.SortDirection: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.SortDirection(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "SortDirection",
        received: data.value
      )
    }
  }

  static var mockValue = Self.asc
}
extension Enums {
  /// TrackNotificationStatus
  enum TrackNotificationStatus: String, CaseIterable, Codable {

    case delivered = "DELIVERED"

    case opened = "OPENED"

    case clicked = "CLICKED"
  }
}

extension Enums.TrackNotificationStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.TrackNotificationStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "TrackNotificationStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.delivered
}
extension Enums {
  /// TransactionStatus
  enum TransactionStatus: String, CaseIterable, Codable {

    case succeeded = "SUCCEEDED"

    case failed = "FAILED"
  }
}

extension Enums.TransactionStatus: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.TransactionStatus(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "TransactionStatus",
        received: data.value
      )
    }
  }

  static var mockValue = Self.succeeded
}
extension Enums {
  /// ViewStyle
  enum ViewStyle: String, CaseIterable, Codable {

    case main = "MAIN"

    case modal = "MODAL"

    case panel = "PANEL"

    case dialog = "DIALOG"

    case popover = "POPOVER"
  }
}

extension Enums.ViewStyle: GraphQLScalar {
  init(from data: AnyCodable) throws {
    switch data.value {
    case let string as String:
      if let value = Enums.ViewStyle(rawValue: string) {
        self = value
      } else {
        throw ScalarDecodingError.unknownEnumCase(value: string)
      }
    default:
      throw ScalarDecodingError.unexpectedScalarType(
        expected: "ViewStyle",
        received: data.value
      )
    }
  }

  static var mockValue = Self.main
}

// MARK: - Input Objects

/// Utility pointer to InputObjects.
typealias Inputs = InputObjects

enum InputObjects {}
extension InputObjects {
  struct AddContentInput: Encodable, Hashable {

    var contentType: String

    var content: OptionalArgument<String> = .init()

    var data: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(contentType, forKey: .contentType)
      if content.hasValue { try container.encode(content, forKey: .content) }
      try container.encode(data, forKey: .data)
    }

    enum CodingKeys: String, CodingKey {
      case contentType = "contentType"
      case content = "content"
      case data = "data"
    }
  }
}
extension InputObjects {
  struct AddExternalRecordInput: Encodable, Hashable {

    var externalTableId: UUIDScalar

    var data: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(externalTableId, forKey: .externalTableId)
      try container.encode(data, forKey: .data)
    }

    enum CodingKeys: String, CodingKey {
      case externalTableId = "externalTableId"
      case data = "data"
    }
  }
}
extension InputObjects {
  struct AddItemToCartInput: Encodable, Hashable {

    var accountUid: OptionalArgument<String> = .init()

    var accountAnonymousUid: OptionalArgument<String> = .init()

    var itemId: UUIDScalar

    var pricingId: UUIDScalar

    var quantity: DecimalScalar

    var reset: Bool

    var custom: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if accountUid.hasValue { try container.encode(accountUid, forKey: .accountUid) }
      if accountAnonymousUid.hasValue {
        try container.encode(accountAnonymousUid, forKey: .accountAnonymousUid)
      }
      try container.encode(itemId, forKey: .itemId)
      try container.encode(pricingId, forKey: .pricingId)
      try container.encode(quantity, forKey: .quantity)
      try container.encode(reset, forKey: .reset)
      if custom.hasValue { try container.encode(custom, forKey: .custom) }
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
      case accountAnonymousUid = "accountAnonymousUid"
      case itemId = "itemId"
      case pricingId = "pricingId"
      case quantity = "quantity"
      case reset = "reset"
      case custom = "custom"
    }
  }
}
extension InputObjects {
  struct AddRecordInput: Encodable, Hashable {

    var resourceId: UUIDScalar

    var data: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(resourceId, forKey: .resourceId)
      try container.encode(data, forKey: .data)
    }

    enum CodingKeys: String, CodingKey {
      case resourceId = "resourceId"
      case data = "data"
    }
  }
}
extension InputObjects {
  struct AddToDashboardInput: Encodable, Hashable {

    var dashboardId: UUIDScalar

    var parentMenuElementId: OptionalArgument<UUIDScalar> = .init()

    var sourceType: Enums.DashboardSourceType

    var sourceId: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(dashboardId, forKey: .dashboardId)
      if parentMenuElementId.hasValue {
        try container.encode(parentMenuElementId, forKey: .parentMenuElementId)
      }
      try container.encode(sourceType, forKey: .sourceType)
      try container.encode(sourceId, forKey: .sourceId)
    }

    enum CodingKeys: String, CodingKey {
      case dashboardId = "dashboardId"
      case parentMenuElementId = "parentMenuElementId"
      case sourceType = "sourceType"
      case sourceId = "sourceId"
    }
  }
}
extension InputObjects {
  struct ApplyCouponToCartInput: Encodable, Hashable {

    var accountUid: OptionalArgument<String> = .init()

    var accountAnonymousUid: OptionalArgument<String> = .init()

    var couponCode: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if accountUid.hasValue { try container.encode(accountUid, forKey: .accountUid) }
      if accountAnonymousUid.hasValue {
        try container.encode(accountAnonymousUid, forKey: .accountAnonymousUid)
      }
      try container.encode(couponCode, forKey: .couponCode)
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
      case accountAnonymousUid = "accountAnonymousUid"
      case couponCode = "couponCode"
    }
  }
}
extension InputObjects {
  struct ArchiveInstallationInput: Encodable, Hashable {

    var id: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
    }
  }
}
extension InputObjects {
  struct CapturePaymentInput: Encodable, Hashable {

    var accountUid: OptionalArgument<String> = .init()

    var accountAnonymousUid: OptionalArgument<String> = .init()

    var gatewayResponse: OptionalArgument<JSONScalar> = .init()

    var orderId: OptionalArgument<UUIDScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if accountUid.hasValue { try container.encode(accountUid, forKey: .accountUid) }
      if accountAnonymousUid.hasValue {
        try container.encode(accountAnonymousUid, forKey: .accountAnonymousUid)
      }
      if gatewayResponse.hasValue {
        try container.encode(gatewayResponse, forKey: .gatewayResponse)
      }
      if orderId.hasValue { try container.encode(orderId, forKey: .orderId) }
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
      case accountAnonymousUid = "accountAnonymousUid"
      case gatewayResponse = "gatewayResponse"
      case orderId = "orderId"
    }
  }
}
extension InputObjects {
  struct ChangeEmailInput: Encodable, Hashable {

    var password: String

    var email: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(password, forKey: .password)
      try container.encode(email, forKey: .email)
    }

    enum CodingKeys: String, CodingKey {
      case password = "password"
      case email = "email"
    }
  }
}
extension InputObjects {
  struct ChangePasswordInput: Encodable, Hashable {

    var id: OptionalArgument<UUIDScalar> = .init()

    var currentPassword: String

    var password: String

    var passwordConfirmation: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if id.hasValue { try container.encode(id, forKey: .id) }
      try container.encode(currentPassword, forKey: .currentPassword)
      try container.encode(password, forKey: .password)
      try container.encode(passwordConfirmation, forKey: .passwordConfirmation)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case currentPassword = "currentPassword"
      case password = "password"
      case passwordConfirmation = "passwordConfirmation"
    }
  }
}
extension InputObjects {
  struct CheckoutCartInput: Encodable, Hashable {

    var accountUid: OptionalArgument<String> = .init()

    var accountAnonymousUid: OptionalArgument<String> = .init()

    var gatewayOptions: OptionalArgument<JSONScalar> = .init()

    var gatewayIdentifier: OptionalArgument<String> = .init()

    var orderId: OptionalArgument<UUIDScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if accountUid.hasValue { try container.encode(accountUid, forKey: .accountUid) }
      if accountAnonymousUid.hasValue {
        try container.encode(accountAnonymousUid, forKey: .accountAnonymousUid)
      }
      if gatewayOptions.hasValue { try container.encode(gatewayOptions, forKey: .gatewayOptions) }
      if gatewayIdentifier.hasValue {
        try container.encode(gatewayIdentifier, forKey: .gatewayIdentifier)
      }
      if orderId.hasValue { try container.encode(orderId, forKey: .orderId) }
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
      case accountAnonymousUid = "accountAnonymousUid"
      case gatewayOptions = "gatewayOptions"
      case gatewayIdentifier = "gatewayIdentifier"
      case orderId = "orderId"
    }
  }
}
extension InputObjects {
  struct CompleteOnboardingInput: Encodable, Hashable {

    var firstName: OptionalArgument<String> = .init()

    var lastName: OptionalArgument<String> = .init()

    var gender: OptionalArgument<Enums.AccountGender> = .init()

    var dateOfBirth: OptionalArgument<DateScalar> = .init()

    var custom: OptionalArgument<JSONScalar> = .init()

    var timeZone: OptionalArgument<String> = .init()

    var phone: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if firstName.hasValue { try container.encode(firstName, forKey: .firstName) }
      if lastName.hasValue { try container.encode(lastName, forKey: .lastName) }
      if gender.hasValue { try container.encode(gender, forKey: .gender) }
      if dateOfBirth.hasValue { try container.encode(dateOfBirth, forKey: .dateOfBirth) }
      if custom.hasValue { try container.encode(custom, forKey: .custom) }
      if timeZone.hasValue { try container.encode(timeZone, forKey: .timeZone) }
      if phone.hasValue { try container.encode(phone, forKey: .phone) }
    }

    enum CodingKeys: String, CodingKey {
      case firstName = "firstName"
      case lastName = "lastName"
      case gender = "gender"
      case dateOfBirth = "dateOfBirth"
      case custom = "custom"
      case timeZone = "timeZone"
      case phone = "phone"
    }
  }
}
extension InputObjects {
  struct ConfigureInstallationInput: Encodable, Hashable {

    var id: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
    }
  }
}
extension InputObjects {
  struct ContactStubInput: Encodable, Hashable {

    var kind: Enums.ContactKind

    var value: String

    var tag: OptionalArgument<String> = .init()

    var status: OptionalArgument<Enums.ContactStatus> = .init()

    var shouldDestroy: OptionalArgument<Bool> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(kind, forKey: .kind)
      try container.encode(value, forKey: .value)
      if tag.hasValue { try container.encode(tag, forKey: .tag) }
      if status.hasValue { try container.encode(status, forKey: .status) }
      if shouldDestroy.hasValue { try container.encode(shouldDestroy, forKey: .shouldDestroy) }
    }

    enum CodingKeys: String, CodingKey {
      case kind = "kind"
      case value = "value"
      case tag = "tag"
      case status = "status"
      case shouldDestroy = "shouldDestroy"
    }
  }
}
extension InputObjects {
  struct CreateAccountInput: Encodable, Hashable {

    var environmentId: UUIDScalar

    var email: OptionalArgument<String> = .init()

    var custom: JSONScalar

    var hasGuiAccess: Bool

    var hasApiAccess: Bool

    var fullName: OptionalArgument<String> = .init()

    var name: OptionalArgument<String> = .init()

    var firstName: OptionalArgument<String> = .init()

    var lastName: OptionalArgument<String> = .init()

    var avatar: OptionalArgument<String> = .init()

    var dateOfBirth: OptionalArgument<DateScalar> = .init()

    var timeZone: OptionalArgument<String> = .init()

    var gender: OptionalArgument<Enums.AccountGender> = .init()

    var phone: OptionalArgument<String> = .init()

    var scope: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(environmentId, forKey: .environmentId)
      if email.hasValue { try container.encode(email, forKey: .email) }
      try container.encode(custom, forKey: .custom)
      try container.encode(hasGuiAccess, forKey: .hasGuiAccess)
      try container.encode(hasApiAccess, forKey: .hasApiAccess)
      if fullName.hasValue { try container.encode(fullName, forKey: .fullName) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if firstName.hasValue { try container.encode(firstName, forKey: .firstName) }
      if lastName.hasValue { try container.encode(lastName, forKey: .lastName) }
      if avatar.hasValue { try container.encode(avatar, forKey: .avatar) }
      if dateOfBirth.hasValue { try container.encode(dateOfBirth, forKey: .dateOfBirth) }
      if timeZone.hasValue { try container.encode(timeZone, forKey: .timeZone) }
      if gender.hasValue { try container.encode(gender, forKey: .gender) }
      if phone.hasValue { try container.encode(phone, forKey: .phone) }
      if scope.hasValue { try container.encode(scope, forKey: .scope) }
    }

    enum CodingKeys: String, CodingKey {
      case environmentId = "environmentId"
      case email = "email"
      case custom = "custom"
      case hasGuiAccess = "hasGuiAccess"
      case hasApiAccess = "hasApiAccess"
      case fullName = "fullName"
      case name = "name"
      case firstName = "firstName"
      case lastName = "lastName"
      case avatar = "avatar"
      case dateOfBirth = "dateOfBirth"
      case timeZone = "timeZone"
      case gender = "gender"
      case phone = "phone"
      case scope = "scope"
    }
  }
}
extension InputObjects {
  struct CreateAppInput: Encodable, Hashable {

    var name: String

    var identifier: String

    var summary: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      if summary.hasValue { try container.encode(summary, forKey: .summary) }
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case identifier = "identifier"
      case summary = "summary"
    }
  }
}
extension InputObjects {
  struct CreateAttributeInput: Encodable, Hashable {

    var resourceId: UUIDScalar

    var name: String

    var identifier: String

    var fieldType: String

    var dataType: OptionalArgument<String> = .init()

    var dataFormat: OptionalArgument<String> = .init()

    var isNullable: OptionalArgument<Bool> = .init()

    var isRepeatable: OptionalArgument<Bool> = .init()

    var isTranslatable: OptionalArgument<Bool> = .init()

    var isFilterable: OptionalArgument<Bool> = .init()

    var isOrderable: OptionalArgument<Bool> = .init()

    var isSearchable: OptionalArgument<Bool> = .init()

    var validations: [JSONScalar]

    var settings: JSONScalar

    var defaultValue: OptionalArgument<JSONScalar> = .init()

    var position: Int

    var placeholder: OptionalArgument<String> = .init()

    var helpText: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(resourceId, forKey: .resourceId)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      try container.encode(fieldType, forKey: .fieldType)
      if dataType.hasValue { try container.encode(dataType, forKey: .dataType) }
      if dataFormat.hasValue { try container.encode(dataFormat, forKey: .dataFormat) }
      if isNullable.hasValue { try container.encode(isNullable, forKey: .isNullable) }
      if isRepeatable.hasValue { try container.encode(isRepeatable, forKey: .isRepeatable) }
      if isTranslatable.hasValue { try container.encode(isTranslatable, forKey: .isTranslatable) }
      if isFilterable.hasValue { try container.encode(isFilterable, forKey: .isFilterable) }
      if isOrderable.hasValue { try container.encode(isOrderable, forKey: .isOrderable) }
      if isSearchable.hasValue { try container.encode(isSearchable, forKey: .isSearchable) }
      try container.encode(validations, forKey: .validations)
      try container.encode(settings, forKey: .settings)
      if defaultValue.hasValue { try container.encode(defaultValue, forKey: .defaultValue) }
      try container.encode(position, forKey: .position)
      if placeholder.hasValue { try container.encode(placeholder, forKey: .placeholder) }
      if helpText.hasValue { try container.encode(helpText, forKey: .helpText) }
    }

    enum CodingKeys: String, CodingKey {
      case resourceId = "resourceId"
      case name = "name"
      case identifier = "identifier"
      case fieldType = "fieldType"
      case dataType = "dataType"
      case dataFormat = "dataFormat"
      case isNullable = "isNullable"
      case isRepeatable = "isRepeatable"
      case isTranslatable = "isTranslatable"
      case isFilterable = "isFilterable"
      case isOrderable = "isOrderable"
      case isSearchable = "isSearchable"
      case validations = "validations"
      case settings = "settings"
      case defaultValue = "defaultValue"
      case position = "position"
      case placeholder = "placeholder"
      case helpText = "helpText"
    }
  }
}
extension InputObjects {
  struct CreateConfigurationInput: Encodable, Hashable {

    var installationId: UUIDScalar

    var environmentId: UUIDScalar

    var settings: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(installationId, forKey: .installationId)
      try container.encode(environmentId, forKey: .environmentId)
      try container.encode(settings, forKey: .settings)
    }

    enum CodingKeys: String, CodingKey {
      case installationId = "installationId"
      case environmentId = "environmentId"
      case settings = "settings"
    }
  }
}
extension InputObjects {
  struct CreateContactInput: Encodable, Hashable {

    var accountId: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var kind: Enums.ContactKind

    var value: String

    var status: Enums.ContactStatus

    var userAgent: OptionalArgument<String> = .init()

    var osName: OptionalArgument<String> = .init()

    var osVersion: OptionalArgument<String> = .init()

    var deviceModel: OptionalArgument<String> = .init()

    var deviceManufacturer: OptionalArgument<String> = .init()

    var deviceUid: OptionalArgument<String> = .init()

    var deviceAdvertisingUid: OptionalArgument<String> = .init()

    var isDeviceAdTrackingEnabled: OptionalArgument<Bool> = .init()

    var tag: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(accountId, forKey: .accountId)
      if name.hasValue { try container.encode(name, forKey: .name) }
      try container.encode(kind, forKey: .kind)
      try container.encode(value, forKey: .value)
      try container.encode(status, forKey: .status)
      if userAgent.hasValue { try container.encode(userAgent, forKey: .userAgent) }
      if osName.hasValue { try container.encode(osName, forKey: .osName) }
      if osVersion.hasValue { try container.encode(osVersion, forKey: .osVersion) }
      if deviceModel.hasValue { try container.encode(deviceModel, forKey: .deviceModel) }
      if deviceManufacturer.hasValue {
        try container.encode(deviceManufacturer, forKey: .deviceManufacturer)
      }
      if deviceUid.hasValue { try container.encode(deviceUid, forKey: .deviceUid) }
      if deviceAdvertisingUid.hasValue {
        try container.encode(deviceAdvertisingUid, forKey: .deviceAdvertisingUid)
      }
      if isDeviceAdTrackingEnabled.hasValue {
        try container.encode(isDeviceAdTrackingEnabled, forKey: .isDeviceAdTrackingEnabled)
      }
      if tag.hasValue { try container.encode(tag, forKey: .tag) }
    }

    enum CodingKeys: String, CodingKey {
      case accountId = "accountId"
      case name = "name"
      case kind = "kind"
      case value = "value"
      case status = "status"
      case userAgent = "userAgent"
      case osName = "osName"
      case osVersion = "osVersion"
      case deviceModel = "deviceModel"
      case deviceManufacturer = "deviceManufacturer"
      case deviceUid = "deviceUid"
      case deviceAdvertisingUid = "deviceAdvertisingUid"
      case isDeviceAdTrackingEnabled = "isDeviceAdTrackingEnabled"
      case tag = "tag"
    }
  }
}
extension InputObjects {
  struct CreateContentInput: Encodable, Hashable {

    var identifier: OptionalArgument<String> = .init()

    var contentTypeId: UUIDScalar

    var position: OptionalArgument<Int> = .init()

    var data: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      try container.encode(contentTypeId, forKey: .contentTypeId)
      if position.hasValue { try container.encode(position, forKey: .position) }
      try container.encode(data, forKey: .data)
    }

    enum CodingKeys: String, CodingKey {
      case identifier = "identifier"
      case contentTypeId = "contentTypeId"
      case position = "position"
      case data = "data"
    }
  }
}
extension InputObjects {
  struct CreateContentTypeInput: Encodable, Hashable {

    var kind: Enums.ContentTypeKind

    var name: String

    var identifier: String

    var systemIdentifier: OptionalArgument<String> = .init()

    var position: Int

    var category: OptionalArgument<Enums.ContentTypeCategory> = .init()

    var isPublishingEnabled: Bool

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(kind, forKey: .kind)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      if systemIdentifier.hasValue {
        try container.encode(systemIdentifier, forKey: .systemIdentifier)
      }
      try container.encode(position, forKey: .position)
      if category.hasValue { try container.encode(category, forKey: .category) }
      try container.encode(isPublishingEnabled, forKey: .isPublishingEnabled)
    }

    enum CodingKeys: String, CodingKey {
      case kind = "kind"
      case name = "name"
      case identifier = "identifier"
      case systemIdentifier = "systemIdentifier"
      case position = "position"
      case category = "category"
      case isPublishingEnabled = "isPublishingEnabled"
    }
  }
}
extension InputObjects {
  struct CreateCouponCodeInput: Encodable, Hashable {

    var name: String

    var accountId: OptionalArgument<UUIDScalar> = .init()

    var redemptionsLimit: OptionalArgument<Int> = .init()

    var couponId: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      if accountId.hasValue { try container.encode(accountId, forKey: .accountId) }
      if redemptionsLimit.hasValue {
        try container.encode(redemptionsLimit, forKey: .redemptionsLimit)
      }
      try container.encode(couponId, forKey: .couponId)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case accountId = "accountId"
      case redemptionsLimit = "redemptionsLimit"
      case couponId = "couponId"
    }
  }
}
extension InputObjects {
  struct CreateCouponInput: Encodable, Hashable {

    var name: String

    var identifier: String

    var discountType: Enums.CouponDiscountType

    var discountAmount: DecimalScalar

    var currencyCode: OptionalArgument<String> = .init()

    var expiresAt: OptionalArgument<DateTimeScalar> = .init()

    var redemptionsLimit: OptionalArgument<Int> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      try container.encode(discountType, forKey: .discountType)
      try container.encode(discountAmount, forKey: .discountAmount)
      if currencyCode.hasValue { try container.encode(currencyCode, forKey: .currencyCode) }
      if expiresAt.hasValue { try container.encode(expiresAt, forKey: .expiresAt) }
      if redemptionsLimit.hasValue {
        try container.encode(redemptionsLimit, forKey: .redemptionsLimit)
      }
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case identifier = "identifier"
      case discountType = "discountType"
      case discountAmount = "discountAmount"
      case currencyCode = "currencyCode"
      case expiresAt = "expiresAt"
      case redemptionsLimit = "redemptionsLimit"
    }
  }
}
extension InputObjects {
  struct CreateCouponRedemptionInput: Encodable, Hashable {

    var couponId: UUIDScalar

    var orderId: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(couponId, forKey: .couponId)
      try container.encode(orderId, forKey: .orderId)
    }

    enum CodingKeys: String, CodingKey {
      case couponId = "couponId"
      case orderId = "orderId"
    }
  }
}
extension InputObjects {
  struct CreateCouponRestrictionInput: Encodable, Hashable {

    var couponId: UUIDScalar

    var itemId: OptionalArgument<UUIDScalar> = .init()

    var itemCategoryId: OptionalArgument<UUIDScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(couponId, forKey: .couponId)
      if itemId.hasValue { try container.encode(itemId, forKey: .itemId) }
      if itemCategoryId.hasValue { try container.encode(itemCategoryId, forKey: .itemCategoryId) }
    }

    enum CodingKeys: String, CodingKey {
      case couponId = "couponId"
      case itemId = "itemId"
      case itemCategoryId = "itemCategoryId"
    }
  }
}
extension InputObjects {
  struct CreateDashboardInput: Encodable, Hashable {

    var name: String

    var identifier: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case identifier = "identifier"
    }
  }
}
extension InputObjects {
  struct CreateDeliveryInput: Encodable, Hashable {

    var contentTypeIdentifier: OptionalArgument<String> = .init()

    var contentIdentifier: OptionalArgument<String> = .init()

    var contentTypeSystemIdentifier: OptionalArgument<String> = .init()

    var contentId: OptionalArgument<UUIDScalar> = .init()

    var content: OptionalArgument<JSONScalar> = .init()

    var name: OptionalArgument<String> = .init()

    var data: OptionalArgument<JSONScalar> = .init()

    var isDraft: OptionalArgument<Bool> = .init()

    var isTest: OptionalArgument<Bool> = .init()

    var scheduledAt: OptionalArgument<DateTimeScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if contentTypeIdentifier.hasValue {
        try container.encode(contentTypeIdentifier, forKey: .contentTypeIdentifier)
      }
      if contentIdentifier.hasValue {
        try container.encode(contentIdentifier, forKey: .contentIdentifier)
      }
      if contentTypeSystemIdentifier.hasValue {
        try container.encode(contentTypeSystemIdentifier, forKey: .contentTypeSystemIdentifier)
      }
      if contentId.hasValue { try container.encode(contentId, forKey: .contentId) }
      if content.hasValue { try container.encode(content, forKey: .content) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if data.hasValue { try container.encode(data, forKey: .data) }
      if isDraft.hasValue { try container.encode(isDraft, forKey: .isDraft) }
      if isTest.hasValue { try container.encode(isTest, forKey: .isTest) }
      if scheduledAt.hasValue { try container.encode(scheduledAt, forKey: .scheduledAt) }
    }

    enum CodingKeys: String, CodingKey {
      case contentTypeIdentifier = "contentTypeIdentifier"
      case contentIdentifier = "contentIdentifier"
      case contentTypeSystemIdentifier = "contentTypeSystemIdentifier"
      case contentId = "contentId"
      case content = "content"
      case name = "name"
      case data = "data"
      case isDraft = "isDraft"
      case isTest = "isTest"
      case scheduledAt = "scheduledAt"
    }
  }
}
extension InputObjects {
  struct CreateEnvironmentInput: Encodable, Hashable {

    var name: String

    var identifier: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case identifier = "identifier"
    }
  }
}
extension InputObjects {
  struct CreateEventTypeInput: Encodable, Hashable {

    var name: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
    }
  }
}
extension InputObjects {
  struct CreateExternalColumnInput: Encodable, Hashable {

    var externalTableId: UUIDScalar

    var name: String

    var identifier: String

    var fieldType: String

    var settings: OptionalArgument<JSONScalar> = .init()

    var position: OptionalArgument<Int> = .init()

    var isRepeated: Bool

    var uiMeta: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(externalTableId, forKey: .externalTableId)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      try container.encode(fieldType, forKey: .fieldType)
      if settings.hasValue { try container.encode(settings, forKey: .settings) }
      if position.hasValue { try container.encode(position, forKey: .position) }
      try container.encode(isRepeated, forKey: .isRepeated)
      try container.encode(uiMeta, forKey: .uiMeta)
    }

    enum CodingKeys: String, CodingKey {
      case externalTableId = "externalTableId"
      case name = "name"
      case identifier = "identifier"
      case fieldType = "fieldType"
      case settings = "settings"
      case position = "position"
      case isRepeated = "isRepeated"
      case uiMeta = "uiMeta"
    }
  }
}
extension InputObjects {
  struct CreateExternalPolymorphicViewInput: Encodable, Hashable {

    var externalTableId: UUIDScalar

    var name: String

    var value: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(externalTableId, forKey: .externalTableId)
      try container.encode(name, forKey: .name)
      try container.encode(value, forKey: .value)
    }

    enum CodingKeys: String, CodingKey {
      case externalTableId = "externalTableId"
      case name = "name"
      case value = "value"
    }
  }
}
extension InputObjects {
  struct CreateExternalRelationshipInput: Encodable, Hashable {

    var sourceExternalTableId: UUIDScalar

    var sourceExternalColumnId: UUIDScalar

    var destinationExternalTableId: UUIDScalar

    var destinationExternalColumnId: UUIDScalar

    var kind: Enums.ExternalRelationshipKind

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(sourceExternalTableId, forKey: .sourceExternalTableId)
      try container.encode(sourceExternalColumnId, forKey: .sourceExternalColumnId)
      try container.encode(destinationExternalTableId, forKey: .destinationExternalTableId)
      try container.encode(destinationExternalColumnId, forKey: .destinationExternalColumnId)
      try container.encode(kind, forKey: .kind)
    }

    enum CodingKeys: String, CodingKey {
      case sourceExternalTableId = "sourceExternalTableId"
      case sourceExternalColumnId = "sourceExternalColumnId"
      case destinationExternalTableId = "destinationExternalTableId"
      case destinationExternalColumnId = "destinationExternalColumnId"
      case kind = "kind"
    }
  }
}
extension InputObjects {
  struct CreateExternalTableInput: Encodable, Hashable {

    var name: String

    var identifier: String

    var titleColumnId: OptionalArgument<UUIDScalar> = .init()

    var polymorphicColumnId: OptionalArgument<UUIDScalar> = .init()

    var uiMeta: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      if titleColumnId.hasValue { try container.encode(titleColumnId, forKey: .titleColumnId) }
      if polymorphicColumnId.hasValue {
        try container.encode(polymorphicColumnId, forKey: .polymorphicColumnId)
      }
      try container.encode(uiMeta, forKey: .uiMeta)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case identifier = "identifier"
      case titleColumnId = "titleColumnId"
      case polymorphicColumnId = "polymorphicColumnId"
      case uiMeta = "uiMeta"
    }
  }
}
extension InputObjects {
  struct CreateFieldInput: Encodable, Hashable {

    var contentTypeId: UUIDScalar

    var fieldType: String

    var name: String

    var identifier: String

    var position: Int

    var isRepeated: Bool

    var defaultValue: OptionalArgument<String> = .init()

    var placeholder: OptionalArgument<String> = .init()

    var helpText: OptionalArgument<String> = .init()

    var settings: JSONScalar

    var restrictions: OptionalArgument<[UUIDScalar]> = .init()

    var isTranslatable: Bool

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(contentTypeId, forKey: .contentTypeId)
      try container.encode(fieldType, forKey: .fieldType)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      try container.encode(position, forKey: .position)
      try container.encode(isRepeated, forKey: .isRepeated)
      if defaultValue.hasValue { try container.encode(defaultValue, forKey: .defaultValue) }
      if placeholder.hasValue { try container.encode(placeholder, forKey: .placeholder) }
      if helpText.hasValue { try container.encode(helpText, forKey: .helpText) }
      try container.encode(settings, forKey: .settings)
      if restrictions.hasValue { try container.encode(restrictions, forKey: .restrictions) }
      try container.encode(isTranslatable, forKey: .isTranslatable)
    }

    enum CodingKeys: String, CodingKey {
      case contentTypeId = "contentTypeId"
      case fieldType = "fieldType"
      case name = "name"
      case identifier = "identifier"
      case position = "position"
      case isRepeated = "isRepeated"
      case defaultValue = "defaultValue"
      case placeholder = "placeholder"
      case helpText = "helpText"
      case settings = "settings"
      case restrictions = "restrictions"
      case isTranslatable = "isTranslatable"
    }
  }
}
extension InputObjects {
  struct CreateFlowInput: Encodable, Hashable {

    var name: String

    var identifier: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case identifier = "identifier"
    }
  }
}
extension InputObjects {
  struct CreateFlowVersionInput: Encodable, Hashable {

    var flowId: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(flowId, forKey: .flowId)
    }

    enum CodingKeys: String, CodingKey {
      case flowId = "flowId"
    }
  }
}
extension InputObjects {
  struct CreateGroupInput: Encodable, Hashable {

    var environmentId: UUIDScalar

    var parentId: OptionalArgument<UUIDScalar> = .init()

    var accountKind: Enums.AccountKind

    var name: String

    var position: OptionalArgument<Int> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(environmentId, forKey: .environmentId)
      if parentId.hasValue { try container.encode(parentId, forKey: .parentId) }
      try container.encode(accountKind, forKey: .accountKind)
      try container.encode(name, forKey: .name)
      if position.hasValue { try container.encode(position, forKey: .position) }
    }

    enum CodingKeys: String, CodingKey {
      case environmentId = "environmentId"
      case parentId = "parentId"
      case accountKind = "accountKind"
      case name = "name"
      case position = "position"
    }
  }
}
extension InputObjects {
  struct CreateInstallationInput: Encodable, Hashable {

    var appId: UUIDScalar

    var name: String

    var identifier: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(appId, forKey: .appId)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
    }

    enum CodingKeys: String, CodingKey {
      case appId = "appId"
      case name = "name"
      case identifier = "identifier"
    }
  }
}
extension InputObjects {
  struct CreateItemCategoryInput: Encodable, Hashable {

    var name: String

    var identifier: String

    var description: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      if description.hasValue { try container.encode(description, forKey: .description) }
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case identifier = "identifier"
      case description = "description"
    }
  }
}
extension InputObjects {
  struct CreateItemCategoryMembershipInput: Encodable, Hashable {

    var itemId: UUIDScalar

    var itemCategoryId: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(itemId, forKey: .itemId)
      try container.encode(itemCategoryId, forKey: .itemCategoryId)
    }

    enum CodingKeys: String, CodingKey {
      case itemId = "itemId"
      case itemCategoryId = "itemCategoryId"
    }
  }
}
extension InputObjects {
  struct CreateItemInput: Encodable, Hashable {

    var kind: Enums.ItemKind

    var name: String

    var identifier: String

    var description: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(kind, forKey: .kind)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      if description.hasValue { try container.encode(description, forKey: .description) }
    }

    enum CodingKeys: String, CodingKey {
      case kind = "kind"
      case name = "name"
      case identifier = "identifier"
      case description = "description"
    }
  }
}
extension InputObjects {
  struct CreateKeyPairInput: Encodable, Hashable {

    var accountId: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(accountId, forKey: .accountId)
    }

    enum CodingKeys: String, CodingKey {
      case accountId = "accountId"
    }
  }
}
extension InputObjects {
  struct CreateMediumInput: Encodable, Hashable {

    var fileData: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if fileData.hasValue { try container.encode(fileData, forKey: .fileData) }
    }

    enum CodingKeys: String, CodingKey {
      case fileData = "fileData"
    }
  }
}
extension InputObjects {
  struct CreateMenuElementInput: Encodable, Hashable {

    var dashboardId: UUIDScalar

    var kind: Enums.MenuElementKind

    var installationId: OptionalArgument<UUIDScalar> = .init()

    var parentId: OptionalArgument<UUIDScalar> = .init()

    var name: OptionalArgument<String> = .init()

    var icon: OptionalArgument<String> = .init()

    var path: OptionalArgument<String> = .init()

    var position: Int

    var placement: Enums.MenuElementPlacement

    var target: OptionalArgument<Enums.MenuElementTarget> = .init()

    var viewId: OptionalArgument<UUIDScalar> = .init()

    var viewStyle: OptionalArgument<Enums.ViewStyle> = .init()

    var url: OptionalArgument<String> = .init()

    var query: OptionalArgument<String> = .init()

    var actions: OptionalArgument<[InputObjects.MenuElementActionInput]> = .init()

    var separatorStyle: OptionalArgument<Enums.MenuElementSeparatorStyle> = .init()

    var isRepeated: OptionalArgument<Bool> = .init()

    var isSticky: OptionalArgument<Bool> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(dashboardId, forKey: .dashboardId)
      try container.encode(kind, forKey: .kind)
      if installationId.hasValue { try container.encode(installationId, forKey: .installationId) }
      if parentId.hasValue { try container.encode(parentId, forKey: .parentId) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if icon.hasValue { try container.encode(icon, forKey: .icon) }
      if path.hasValue { try container.encode(path, forKey: .path) }
      try container.encode(position, forKey: .position)
      try container.encode(placement, forKey: .placement)
      if target.hasValue { try container.encode(target, forKey: .target) }
      if viewId.hasValue { try container.encode(viewId, forKey: .viewId) }
      if viewStyle.hasValue { try container.encode(viewStyle, forKey: .viewStyle) }
      if url.hasValue { try container.encode(url, forKey: .url) }
      if query.hasValue { try container.encode(query, forKey: .query) }
      if actions.hasValue { try container.encode(actions, forKey: .actions) }
      if separatorStyle.hasValue { try container.encode(separatorStyle, forKey: .separatorStyle) }
      if isRepeated.hasValue { try container.encode(isRepeated, forKey: .isRepeated) }
      if isSticky.hasValue { try container.encode(isSticky, forKey: .isSticky) }
    }

    enum CodingKeys: String, CodingKey {
      case dashboardId = "dashboardId"
      case kind = "kind"
      case installationId = "installationId"
      case parentId = "parentId"
      case name = "name"
      case icon = "icon"
      case path = "path"
      case position = "position"
      case placement = "placement"
      case target = "target"
      case viewId = "viewId"
      case viewStyle = "viewStyle"
      case url = "url"
      case query = "query"
      case actions = "actions"
      case separatorStyle = "separatorStyle"
      case isRepeated = "isRepeated"
      case isSticky = "isSticky"
    }
  }
}
extension InputObjects {
  struct CreateOperationInput: Encodable, Hashable {

    var resourceId: OptionalArgument<UUIDScalar> = .init()

    var appId: OptionalArgument<UUIDScalar> = .init()

    var name: String

    var identifier: String

    var description: OptionalArgument<String> = .init()

    var icon: OptionalArgument<String> = .init()

    var position: Int

    var behavior: Enums.OperationBehavior

    var kind: Enums.OperationKind

    var actsOn: OptionalArgument<Enums.OperationActsOn> = .init()

    var behaviorInstallationId: OptionalArgument<UUIDScalar> = .init()

    var behaviorOperationId: OptionalArgument<UUIDScalar> = .init()

    var behaviorArguments: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if resourceId.hasValue { try container.encode(resourceId, forKey: .resourceId) }
      if appId.hasValue { try container.encode(appId, forKey: .appId) }
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      if description.hasValue { try container.encode(description, forKey: .description) }
      if icon.hasValue { try container.encode(icon, forKey: .icon) }
      try container.encode(position, forKey: .position)
      try container.encode(behavior, forKey: .behavior)
      try container.encode(kind, forKey: .kind)
      if actsOn.hasValue { try container.encode(actsOn, forKey: .actsOn) }
      if behaviorInstallationId.hasValue {
        try container.encode(behaviorInstallationId, forKey: .behaviorInstallationId)
      }
      if behaviorOperationId.hasValue {
        try container.encode(behaviorOperationId, forKey: .behaviorOperationId)
      }
      if behaviorArguments.hasValue {
        try container.encode(behaviorArguments, forKey: .behaviorArguments)
      }
    }

    enum CodingKeys: String, CodingKey {
      case resourceId = "resourceId"
      case appId = "appId"
      case name = "name"
      case identifier = "identifier"
      case description = "description"
      case icon = "icon"
      case position = "position"
      case behavior = "behavior"
      case kind = "kind"
      case actsOn = "actsOn"
      case behaviorInstallationId = "behaviorInstallationId"
      case behaviorOperationId = "behaviorOperationId"
      case behaviorArguments = "behaviorArguments"
    }
  }
}
extension InputObjects {
  struct CreateOrderInput: Encodable, Hashable {

    var accountId: OptionalArgument<UUIDScalar> = .init()

    var status: Enums.OrderStatus

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if accountId.hasValue { try container.encode(accountId, forKey: .accountId) }
      try container.encode(status, forKey: .status)
    }

    enum CodingKeys: String, CodingKey {
      case accountId = "accountId"
      case status = "status"
    }
  }
}
extension InputObjects {
  struct CreateOrderItemInput: Encodable, Hashable {

    var orderId: UUIDScalar

    var itemId: UUIDScalar

    var pricingId: UUIDScalar

    var quantity: DecimalScalar

    var discount: DecimalScalar

    var custom: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(orderId, forKey: .orderId)
      try container.encode(itemId, forKey: .itemId)
      try container.encode(pricingId, forKey: .pricingId)
      try container.encode(quantity, forKey: .quantity)
      try container.encode(discount, forKey: .discount)
      if custom.hasValue { try container.encode(custom, forKey: .custom) }
    }

    enum CodingKeys: String, CodingKey {
      case orderId = "orderId"
      case itemId = "itemId"
      case pricingId = "pricingId"
      case quantity = "quantity"
      case discount = "discount"
      case custom = "custom"
    }
  }
}
extension InputObjects {
  struct CreateParameterInput: Encodable, Hashable {

    var operationId: UUIDScalar

    var attributeId: OptionalArgument<UUIDScalar> = .init()

    var name: String

    var identifier: String

    var fieldType: OptionalArgument<String> = .init()

    var isNullable: OptionalArgument<Bool> = .init()

    var isRepeatable: OptionalArgument<Bool> = .init()

    var validations: [JSONScalar]

    var defaultValue: OptionalArgument<JSONScalar> = .init()

    var position: OptionalArgument<Int> = .init()

    var placeholder: OptionalArgument<String> = .init()

    var helpText: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(operationId, forKey: .operationId)
      if attributeId.hasValue { try container.encode(attributeId, forKey: .attributeId) }
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      if fieldType.hasValue { try container.encode(fieldType, forKey: .fieldType) }
      if isNullable.hasValue { try container.encode(isNullable, forKey: .isNullable) }
      if isRepeatable.hasValue { try container.encode(isRepeatable, forKey: .isRepeatable) }
      try container.encode(validations, forKey: .validations)
      if defaultValue.hasValue { try container.encode(defaultValue, forKey: .defaultValue) }
      if position.hasValue { try container.encode(position, forKey: .position) }
      if placeholder.hasValue { try container.encode(placeholder, forKey: .placeholder) }
      if helpText.hasValue { try container.encode(helpText, forKey: .helpText) }
    }

    enum CodingKeys: String, CodingKey {
      case operationId = "operationId"
      case attributeId = "attributeId"
      case name = "name"
      case identifier = "identifier"
      case fieldType = "fieldType"
      case isNullable = "isNullable"
      case isRepeatable = "isRepeatable"
      case validations = "validations"
      case defaultValue = "defaultValue"
      case position = "position"
      case placeholder = "placeholder"
      case helpText = "helpText"
    }
  }
}
extension InputObjects {
  struct CreatePreferenceInput: Encodable, Hashable {

    var name: String

    var identifier: String

    var restrictions: OptionalArgument<[UUIDScalar]> = .init()

    var isEnabledByDefault: Bool

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      if restrictions.hasValue { try container.encode(restrictions, forKey: .restrictions) }
      try container.encode(isEnabledByDefault, forKey: .isEnabledByDefault)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case identifier = "identifier"
      case restrictions = "restrictions"
      case isEnabledByDefault = "isEnabledByDefault"
    }
  }
}
extension InputObjects {
  struct CreatePricingInput: Encodable, Hashable {

    var itemId: UUIDScalar

    var amount: DecimalScalar

    var currencyCode: String

    var originalAmount: OptionalArgument<DecimalScalar> = .init()

    var isRecurring: Bool

    var recurringInterval: Int

    var recurringIntervalUnit: Enums.PricingRecurringIntervalUnit

    var kind: Enums.PricingKind

    var appleProductIdentifier: OptionalArgument<String> = .init()

    var googleProductIdentifier: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(itemId, forKey: .itemId)
      try container.encode(amount, forKey: .amount)
      try container.encode(currencyCode, forKey: .currencyCode)
      if originalAmount.hasValue { try container.encode(originalAmount, forKey: .originalAmount) }
      try container.encode(isRecurring, forKey: .isRecurring)
      try container.encode(recurringInterval, forKey: .recurringInterval)
      try container.encode(recurringIntervalUnit, forKey: .recurringIntervalUnit)
      try container.encode(kind, forKey: .kind)
      if appleProductIdentifier.hasValue {
        try container.encode(appleProductIdentifier, forKey: .appleProductIdentifier)
      }
      if googleProductIdentifier.hasValue {
        try container.encode(googleProductIdentifier, forKey: .googleProductIdentifier)
      }
    }

    enum CodingKeys: String, CodingKey {
      case itemId = "itemId"
      case amount = "amount"
      case currencyCode = "currencyCode"
      case originalAmount = "originalAmount"
      case isRecurring = "isRecurring"
      case recurringInterval = "recurringInterval"
      case recurringIntervalUnit = "recurringIntervalUnit"
      case kind = "kind"
      case appleProductIdentifier = "appleProductIdentifier"
      case googleProductIdentifier = "googleProductIdentifier"
    }
  }
}
extension InputObjects {
  struct CreateRecipientInput: Encodable, Hashable {

    var deliveryId: UUIDScalar

    var kind: Enums.RecipientKind

    var accountId: OptionalArgument<UUIDScalar> = .init()

    var groupId: OptionalArgument<UUIDScalar> = .init()

    var target: Enums.RecipientTarget

    var data: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(deliveryId, forKey: .deliveryId)
      try container.encode(kind, forKey: .kind)
      if accountId.hasValue { try container.encode(accountId, forKey: .accountId) }
      if groupId.hasValue { try container.encode(groupId, forKey: .groupId) }
      try container.encode(target, forKey: .target)
      if data.hasValue { try container.encode(data, forKey: .data) }
    }

    enum CodingKeys: String, CodingKey {
      case deliveryId = "deliveryId"
      case kind = "kind"
      case accountId = "accountId"
      case groupId = "groupId"
      case target = "target"
      case data = "data"
    }
  }
}
extension InputObjects {
  struct CreateRelationshipInput: Encodable, Hashable {

    var name: String

    var identifier: String

    var sourceAttributeId: UUIDScalar

    var targetAttributeId: UUIDScalar

    var kind: Enums.RelationshipKind

    var filter: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      try container.encode(sourceAttributeId, forKey: .sourceAttributeId)
      try container.encode(targetAttributeId, forKey: .targetAttributeId)
      try container.encode(kind, forKey: .kind)
      if filter.hasValue { try container.encode(filter, forKey: .filter) }
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case identifier = "identifier"
      case sourceAttributeId = "sourceAttributeId"
      case targetAttributeId = "targetAttributeId"
      case kind = "kind"
      case filter = "filter"
    }
  }
}
extension InputObjects {
  struct CreateResourceInput: Encodable, Hashable {

    var appId: OptionalArgument<UUIDScalar> = .init()

    var name: String

    var identifier: String

    var originType: OptionalArgument<String> = .init()

    var originId: OptionalArgument<UUIDScalar> = .init()

    var description: OptionalArgument<String> = .init()

    var icon: OptionalArgument<String> = .init()

    var position: Int

    var validations: [JSONScalar]

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if appId.hasValue { try container.encode(appId, forKey: .appId) }
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      if originType.hasValue { try container.encode(originType, forKey: .originType) }
      if originId.hasValue { try container.encode(originId, forKey: .originId) }
      if description.hasValue { try container.encode(description, forKey: .description) }
      if icon.hasValue { try container.encode(icon, forKey: .icon) }
      try container.encode(position, forKey: .position)
      try container.encode(validations, forKey: .validations)
    }

    enum CodingKeys: String, CodingKey {
      case appId = "appId"
      case name = "name"
      case identifier = "identifier"
      case originType = "originType"
      case originId = "originId"
      case description = "description"
      case icon = "icon"
      case position = "position"
      case validations = "validations"
    }
  }
}
extension InputObjects {
  struct CreateRoleInput: Encodable, Hashable {

    var appId: OptionalArgument<UUIDScalar> = .init()

    var name: String

    var policy: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if appId.hasValue { try container.encode(appId, forKey: .appId) }
      try container.encode(name, forKey: .name)
      try container.encode(policy, forKey: .policy)
    }

    enum CodingKeys: String, CodingKey {
      case appId = "appId"
      case name = "name"
      case policy = "policy"
    }
  }
}
extension InputObjects {
  struct CreateRoleMembershipInput: Encodable, Hashable {

    var roleId: UUIDScalar

    var accountId: UUIDScalar

    var environmentId: OptionalArgument<UUIDScalar> = .init()

    var appId: OptionalArgument<UUIDScalar> = .init()

    var installationId: OptionalArgument<UUIDScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(roleId, forKey: .roleId)
      try container.encode(accountId, forKey: .accountId)
      if environmentId.hasValue { try container.encode(environmentId, forKey: .environmentId) }
      if appId.hasValue { try container.encode(appId, forKey: .appId) }
      if installationId.hasValue { try container.encode(installationId, forKey: .installationId) }
    }

    enum CodingKeys: String, CodingKey {
      case roleId = "roleId"
      case accountId = "accountId"
      case environmentId = "environmentId"
      case appId = "appId"
      case installationId = "installationId"
    }
  }
}
extension InputObjects {
  struct CreateSegmentInput: Encodable, Hashable {

    var resourceId: UUIDScalar

    var name: String

    var identifier: String

    var filter: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(resourceId, forKey: .resourceId)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
      try container.encode(filter, forKey: .filter)
    }

    enum CodingKeys: String, CodingKey {
      case resourceId = "resourceId"
      case name = "name"
      case identifier = "identifier"
      case filter = "filter"
    }
  }
}
extension InputObjects {
  struct CreateSessionInput: Encodable, Hashable {

    var workspaceId: UUIDScalar

    var email: String

    var password: String

    var userAgent: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(workspaceId, forKey: .workspaceId)
      try container.encode(email, forKey: .email)
      try container.encode(password, forKey: .password)
      if userAgent.hasValue { try container.encode(userAgent, forKey: .userAgent) }
    }

    enum CodingKeys: String, CodingKey {
      case workspaceId = "workspaceId"
      case email = "email"
      case password = "password"
      case userAgent = "userAgent"
    }
  }
}
extension InputObjects {
  struct CreateStoredPreferenceInput: Encodable, Hashable {

    var accountId: UUIDScalar

    var preferenceId: OptionalArgument<UUIDScalar> = .init()

    var isEnabled: Bool

    var channels: [Enums.DeliveryChannel]

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(accountId, forKey: .accountId)
      if preferenceId.hasValue { try container.encode(preferenceId, forKey: .preferenceId) }
      try container.encode(isEnabled, forKey: .isEnabled)
      try container.encode(channels, forKey: .channels)
    }

    enum CodingKeys: String, CodingKey {
      case accountId = "accountId"
      case preferenceId = "preferenceId"
      case isEnabled = "isEnabled"
      case channels = "channels"
    }
  }
}
extension InputObjects {
  struct CreateThemeInput: Encodable, Hashable {

    var name: String

    var palette: InputObjects.ThemePaletteInput

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(palette, forKey: .palette)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case palette = "palette"
    }
  }
}
extension InputObjects {
  struct CreateTransactionInput: Encodable, Hashable {

    var orderId: UUIDScalar

    var accountId: UUIDScalar

    var amount: DecimalScalar

    var status: Enums.TransactionStatus

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(orderId, forKey: .orderId)
      try container.encode(accountId, forKey: .accountId)
      try container.encode(amount, forKey: .amount)
      try container.encode(status, forKey: .status)
    }

    enum CodingKeys: String, CodingKey {
      case orderId = "orderId"
      case accountId = "accountId"
      case amount = "amount"
      case status = "status"
    }
  }
}
extension InputObjects {
  struct DeleteExternalRecordInput: Encodable, Hashable {

    var externalTableId: UUIDScalar

    var id: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(externalTableId, forKey: .externalTableId)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case externalTableId = "externalTableId"
      case id = "id"
    }
  }
}
extension InputObjects {
  struct DeleteRecordInput: Encodable, Hashable {

    var resourceId: UUIDScalar

    var id: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(resourceId, forKey: .resourceId)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case resourceId = "resourceId"
      case id = "id"
    }
  }
}
extension InputObjects {
  struct DuplicateFlowVersionInput: Encodable, Hashable {

    var id: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
    }
  }
}
extension InputObjects {
  struct EditContentInput: Encodable, Hashable {

    var contentType: String

    var content: String

    var data: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(contentType, forKey: .contentType)
      try container.encode(content, forKey: .content)
      try container.encode(data, forKey: .data)
    }

    enum CodingKeys: String, CodingKey {
      case contentType = "contentType"
      case content = "content"
      case data = "data"
    }
  }
}
extension InputObjects {
  struct EditExternalRecordInput: Encodable, Hashable {

    var externalTableId: UUIDScalar

    var data: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(externalTableId, forKey: .externalTableId)
      try container.encode(data, forKey: .data)
    }

    enum CodingKeys: String, CodingKey {
      case externalTableId = "externalTableId"
      case data = "data"
    }
  }
}
extension InputObjects {
  struct EditItemInCartInput: Encodable, Hashable {

    var accountUid: OptionalArgument<String> = .init()

    var accountAnonymousUid: OptionalArgument<String> = .init()

    var id: UUIDScalar

    var pricingId: OptionalArgument<UUIDScalar> = .init()

    var quantity: OptionalArgument<DecimalScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if accountUid.hasValue { try container.encode(accountUid, forKey: .accountUid) }
      if accountAnonymousUid.hasValue {
        try container.encode(accountAnonymousUid, forKey: .accountAnonymousUid)
      }
      try container.encode(id, forKey: .id)
      if pricingId.hasValue { try container.encode(pricingId, forKey: .pricingId) }
      if quantity.hasValue { try container.encode(quantity, forKey: .quantity) }
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
      case accountAnonymousUid = "accountAnonymousUid"
      case id = "id"
      case pricingId = "pricingId"
      case quantity = "quantity"
    }
  }
}
extension InputObjects {
  struct EditRecordInput: Encodable, Hashable {

    var resourceId: UUIDScalar

    var data: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(resourceId, forKey: .resourceId)
      try container.encode(data, forKey: .data)
    }

    enum CodingKeys: String, CodingKey {
      case resourceId = "resourceId"
      case data = "data"
    }
  }
}
extension InputObjects {
  struct ExportExternalRecordsInput: Encodable, Hashable {

    var externalTableId: UUIDScalar

    var filter: OptionalArgument<JSONScalar> = .init()

    var order: OptionalArgument<JSONScalar> = .init()

    var limit: OptionalArgument<Int> = .init()

    var page: OptionalArgument<Int> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(externalTableId, forKey: .externalTableId)
      if filter.hasValue { try container.encode(filter, forKey: .filter) }
      if order.hasValue { try container.encode(order, forKey: .order) }
      if limit.hasValue { try container.encode(limit, forKey: .limit) }
      if page.hasValue { try container.encode(page, forKey: .page) }
    }

    enum CodingKeys: String, CodingKey {
      case externalTableId = "externalTableId"
      case filter = "filter"
      case order = "order"
      case limit = "limit"
      case page = "page"
    }
  }
}
extension InputObjects {
  struct FetchCartInput: Encodable, Hashable {

    var accountUid: OptionalArgument<String> = .init()

    var accountAnonymousUid: OptionalArgument<String> = .init()

    var orderId: OptionalArgument<UUIDScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if accountUid.hasValue { try container.encode(accountUid, forKey: .accountUid) }
      if accountAnonymousUid.hasValue {
        try container.encode(accountAnonymousUid, forKey: .accountAnonymousUid)
      }
      if orderId.hasValue { try container.encode(orderId, forKey: .orderId) }
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
      case accountAnonymousUid = "accountAnonymousUid"
      case orderId = "orderId"
    }
  }
}
extension InputObjects {
  struct FetchContactsInput: Encodable, Hashable {

    var uid: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(uid, forKey: .uid)
    }

    enum CodingKeys: String, CodingKey {
      case uid = "uid"
    }
  }
}
extension InputObjects {
  struct FetchContentInput: Encodable, Hashable {

    var contentId: OptionalArgument<UUIDScalar> = .init()

    var contentType: OptionalArgument<String> = .init()

    var content: OptionalArgument<String> = .init()

    var preview: OptionalArgument<Bool> = .init()

    var language: OptionalArgument<String> = .init()

    var fields: OptionalArgument<[String]> = .init()

    var include: OptionalArgument<[String]> = .init()

    var exclude: OptionalArgument<[String]> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if contentId.hasValue { try container.encode(contentId, forKey: .contentId) }
      if contentType.hasValue { try container.encode(contentType, forKey: .contentType) }
      if content.hasValue { try container.encode(content, forKey: .content) }
      if preview.hasValue { try container.encode(preview, forKey: .preview) }
      if language.hasValue { try container.encode(language, forKey: .language) }
      if fields.hasValue { try container.encode(fields, forKey: .fields) }
      if include.hasValue { try container.encode(include, forKey: .include) }
      if exclude.hasValue { try container.encode(exclude, forKey: .exclude) }
    }

    enum CodingKeys: String, CodingKey {
      case contentId = "contentId"
      case contentType = "contentType"
      case content = "content"
      case preview = "preview"
      case language = "language"
      case fields = "fields"
      case include = "include"
      case exclude = "exclude"
    }
  }
}
extension InputObjects {
  struct FetchItemInput: Encodable, Hashable {

    var identifier: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(identifier, forKey: .identifier)
    }

    enum CodingKeys: String, CodingKey {
      case identifier = "identifier"
    }
  }
}
extension InputObjects {
  struct FetchStoredPreferencesInput: Encodable, Hashable {

    var accountUid: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(accountUid, forKey: .accountUid)
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
    }
  }
}
extension InputObjects {
  struct FieldOrderingInputInput: Encodable, Hashable {

    var id: UUIDScalar

    var direction: Enums.SortDirection

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      try container.encode(direction, forKey: .direction)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case direction = "direction"
    }
  }
}
extension InputObjects {
  struct ForgotPasswordInput: Encodable, Hashable {

    var workspaceId: UUIDScalar

    var email: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(workspaceId, forKey: .workspaceId)
      try container.encode(email, forKey: .email)
    }

    enum CodingKeys: String, CodingKey {
      case workspaceId = "workspaceId"
      case email = "email"
    }
  }
}
extension InputObjects {
  struct GenerateExternalTableMenuInput: Encodable, Hashable {

    var id: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
    }
  }
}
extension InputObjects {
  struct GenerateIdentityTokenInput: Encodable, Hashable {

    var publicKey: String

    var privateKey: String

    var kind: String

    var uid: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(publicKey, forKey: .publicKey)
      try container.encode(privateKey, forKey: .privateKey)
      try container.encode(kind, forKey: .kind)
      try container.encode(uid, forKey: .uid)
    }

    enum CodingKeys: String, CodingKey {
      case publicKey = "publicKey"
      case privateKey = "privateKey"
      case kind = "kind"
      case uid = "uid"
    }
  }
}
extension InputObjects {
  struct GenericInput: Encodable, Hashable {

    var id: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
    }
  }
}
extension InputObjects {
  struct IdentifyAccountInput: Encodable, Hashable {

    var uid: OptionalArgument<String> = .init()

    var anonymousUid: OptionalArgument<String> = .init()

    var email: OptionalArgument<String> = .init()

    var phone: OptionalArgument<String> = .init()

    var name: OptionalArgument<String> = .init()

    var firstName: OptionalArgument<String> = .init()

    var lastName: OptionalArgument<String> = .init()

    var scope: OptionalArgument<String> = .init()

    var systemContext: OptionalArgument<InputObjects.SystemContextInput> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if uid.hasValue { try container.encode(uid, forKey: .uid) }
      if anonymousUid.hasValue { try container.encode(anonymousUid, forKey: .anonymousUid) }
      if email.hasValue { try container.encode(email, forKey: .email) }
      if phone.hasValue { try container.encode(phone, forKey: .phone) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if firstName.hasValue { try container.encode(firstName, forKey: .firstName) }
      if lastName.hasValue { try container.encode(lastName, forKey: .lastName) }
      if scope.hasValue { try container.encode(scope, forKey: .scope) }
      if systemContext.hasValue { try container.encode(systemContext, forKey: .systemContext) }
    }

    enum CodingKeys: String, CodingKey {
      case uid = "uid"
      case anonymousUid = "anonymousUid"
      case email = "email"
      case phone = "phone"
      case name = "name"
      case firstName = "firstName"
      case lastName = "lastName"
      case scope = "scope"
      case systemContext = "systemContext"
    }
  }
}
extension InputObjects {
  struct IdentifyProspectInput: Encodable, Hashable {

    var email: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(email, forKey: .email)
    }

    enum CodingKeys: String, CodingKey {
      case email = "email"
    }
  }
}
extension InputObjects {
  struct MenuElementActionInput: Encodable, Hashable {

    var icon: String

    var name: String

    var action: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(icon, forKey: .icon)
      try container.encode(name, forKey: .name)
      try container.encode(action, forKey: .action)
    }

    enum CodingKeys: String, CodingKey {
      case icon = "icon"
      case name = "name"
      case action = "action"
    }
  }
}
extension InputObjects {
  struct OrdersAggregateByItemsInput: Encodable, Hashable {

    var filter: OptionalArgument<JSONScalar> = .init()

    var itemIds: OptionalArgument<[UUIDScalar]> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if filter.hasValue { try container.encode(filter, forKey: .filter) }
      if itemIds.hasValue { try container.encode(itemIds, forKey: .itemIds) }
    }

    enum CodingKeys: String, CodingKey {
      case filter = "filter"
      case itemIds = "itemIds"
    }
  }
}
extension InputObjects {
  struct OrdersListByItemsInput: Encodable, Hashable {

    var filter: OptionalArgument<JSONScalar> = .init()

    var order: OptionalArgument<JSONScalar> = .init()

    var limit: OptionalArgument<Int> = .init()

    var page: OptionalArgument<Int> = .init()

    var itemIds: OptionalArgument<[UUIDScalar]> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if filter.hasValue { try container.encode(filter, forKey: .filter) }
      if order.hasValue { try container.encode(order, forKey: .order) }
      if limit.hasValue { try container.encode(limit, forKey: .limit) }
      if page.hasValue { try container.encode(page, forKey: .page) }
      if itemIds.hasValue { try container.encode(itemIds, forKey: .itemIds) }
    }

    enum CodingKeys: String, CodingKey {
      case filter = "filter"
      case order = "order"
      case limit = "limit"
      case page = "page"
      case itemIds = "itemIds"
    }
  }
}
extension InputObjects {
  struct ParseIdentityTokenInput: Encodable, Hashable {

    var publicKey: String

    var privateKey: String

    var token: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(publicKey, forKey: .publicKey)
      try container.encode(privateKey, forKey: .privateKey)
      try container.encode(token, forKey: .token)
    }

    enum CodingKeys: String, CodingKey {
      case publicKey = "publicKey"
      case privateKey = "privateKey"
      case token = "token"
    }
  }
}
extension InputObjects {
  struct PrepareAssetInput: Encodable, Hashable {

    var resource: String

    var attribute: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(resource, forKey: .resource)
      try container.encode(attribute, forKey: .attribute)
    }

    enum CodingKeys: String, CodingKey {
      case resource = "resource"
      case attribute = "attribute"
    }
  }
}
extension InputObjects {
  struct PrepareExternalAssetInput: Encodable, Hashable {

    var externalColumnId: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(externalColumnId, forKey: .externalColumnId)
    }

    enum CodingKeys: String, CodingKey {
      case externalColumnId = "externalColumnId"
    }
  }
}
extension InputObjects {
  struct PublishContentVersionInput: Encodable, Hashable {

    var id: UUIDScalar

    var contentVersionId: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      try container.encode(contentVersionId, forKey: .contentVersionId)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case contentVersionId = "contentVersionId"
    }
  }
}
extension InputObjects {
  struct PublishFlowVersionInput: Encodable, Hashable {

    var id: UUIDScalar

    var isGraceful: Bool

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      try container.encode(isGraceful, forKey: .isGraceful)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case isGraceful = "isGraceful"
    }
  }
}
extension InputObjects {
  struct RegisterWorkspaceInput: Encodable, Hashable {

    var name: String

    var identifier: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(identifier, forKey: .identifier)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case identifier = "identifier"
    }
  }
}
extension InputObjects {
  struct RemoveCouponFromCartInput: Encodable, Hashable {

    var accountUid: OptionalArgument<String> = .init()

    var accountAnonymousUid: OptionalArgument<String> = .init()

    var couponCode: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if accountUid.hasValue { try container.encode(accountUid, forKey: .accountUid) }
      if accountAnonymousUid.hasValue {
        try container.encode(accountAnonymousUid, forKey: .accountAnonymousUid)
      }
      try container.encode(couponCode, forKey: .couponCode)
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
      case accountAnonymousUid = "accountAnonymousUid"
      case couponCode = "couponCode"
    }
  }
}
extension InputObjects {
  struct RemoveItemFromCartInput: Encodable, Hashable {

    var accountUid: OptionalArgument<String> = .init()

    var accountAnonymousUid: OptionalArgument<String> = .init()

    var id: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if accountUid.hasValue { try container.encode(accountUid, forKey: .accountUid) }
      if accountAnonymousUid.hasValue {
        try container.encode(accountAnonymousUid, forKey: .accountAnonymousUid)
      }
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
      case accountAnonymousUid = "accountAnonymousUid"
      case id = "id"
    }
  }
}
extension InputObjects {
  struct RemoveWorkspaceLocaleInput: Encodable, Hashable {

    var identifier: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(identifier, forKey: .identifier)
    }

    enum CodingKeys: String, CodingKey {
      case identifier = "identifier"
    }
  }
}
extension InputObjects {
  struct ResetPasswordInput: Encodable, Hashable {

    var token: String

    var password: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(token, forKey: .token)
      try container.encode(password, forKey: .password)
    }

    enum CodingKeys: String, CodingKey {
      case token = "token"
      case password = "password"
    }
  }
}
extension InputObjects {
  struct ResolveInstallationInput: Encodable, Hashable {

    var workspaceId: UUIDScalar

    var appIdentifier: String

    var environmentId: OptionalArgument<UUIDScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(workspaceId, forKey: .workspaceId)
      try container.encode(appIdentifier, forKey: .appIdentifier)
      if environmentId.hasValue { try container.encode(environmentId, forKey: .environmentId) }
    }

    enum CodingKeys: String, CodingKey {
      case workspaceId = "workspaceId"
      case appIdentifier = "appIdentifier"
      case environmentId = "environmentId"
    }
  }
}
extension InputObjects {
  struct RestoreContentVersionInput: Encodable, Hashable {

    var id: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
    }
  }
}
extension InputObjects {
  struct RevokeKeyPairInput: Encodable, Hashable {

    var id: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
    }
  }
}
extension InputObjects {
  struct SaveContactsInput: Encodable, Hashable {

    var uid: String

    var contacts: [InputObjects.ContactStubInput]

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(uid, forKey: .uid)
      try container.encode(contacts, forKey: .contacts)
    }

    enum CodingKeys: String, CodingKey {
      case uid = "uid"
      case contacts = "contacts"
    }
  }
}
extension InputObjects {
  struct SaveStoredPreferencesInput: Encodable, Hashable {

    var accountUid: String

    var preferenceData: JSONScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(accountUid, forKey: .accountUid)
      try container.encode(preferenceData, forKey: .preferenceData)
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
      case preferenceData = "preferenceData"
    }
  }
}
extension InputObjects {
  struct SaveWorkspaceLocaleInput: Encodable, Hashable {

    var identifier: String

    var isDefault: Bool

    var allowFallback: Bool

    var fallbacks: [String]

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(identifier, forKey: .identifier)
      try container.encode(isDefault, forKey: .isDefault)
      try container.encode(allowFallback, forKey: .allowFallback)
      try container.encode(fallbacks, forKey: .fallbacks)
    }

    enum CodingKeys: String, CodingKey {
      case identifier = "identifier"
      case isDefault = "isDefault"
      case allowFallback = "allowFallback"
      case fallbacks = "fallbacks"
    }
  }
}
extension InputObjects {
  struct SearchContentInput: Encodable, Hashable {

    var contentType: String

    var returnType: String

    var filter: OptionalArgument<JSONScalar> = .init()

    var order: OptionalArgument<JSONScalar> = .init()

    var limit: OptionalArgument<Int> = .init()

    var preview: OptionalArgument<Bool> = .init()

    var language: OptionalArgument<String> = .init()

    var fields: OptionalArgument<[String]> = .init()

    var include: OptionalArgument<[String]> = .init()

    var exclude: OptionalArgument<[String]> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(contentType, forKey: .contentType)
      try container.encode(returnType, forKey: .returnType)
      if filter.hasValue { try container.encode(filter, forKey: .filter) }
      if order.hasValue { try container.encode(order, forKey: .order) }
      if limit.hasValue { try container.encode(limit, forKey: .limit) }
      if preview.hasValue { try container.encode(preview, forKey: .preview) }
      if language.hasValue { try container.encode(language, forKey: .language) }
      if fields.hasValue { try container.encode(fields, forKey: .fields) }
      if include.hasValue { try container.encode(include, forKey: .include) }
      if exclude.hasValue { try container.encode(exclude, forKey: .exclude) }
    }

    enum CodingKeys: String, CodingKey {
      case contentType = "contentType"
      case returnType = "returnType"
      case filter = "filter"
      case order = "order"
      case limit = "limit"
      case preview = "preview"
      case language = "language"
      case fields = "fields"
      case include = "include"
      case exclude = "exclude"
    }
  }
}
extension InputObjects {
  struct SearchExternalRecordsInput: Encodable, Hashable {

    var externalTableId: UUIDScalar

    var filter: OptionalArgument<JSONScalar> = .init()

    var order: OptionalArgument<JSONScalar> = .init()

    var limit: OptionalArgument<Int> = .init()

    var page: OptionalArgument<Int> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(externalTableId, forKey: .externalTableId)
      if filter.hasValue { try container.encode(filter, forKey: .filter) }
      if order.hasValue { try container.encode(order, forKey: .order) }
      if limit.hasValue { try container.encode(limit, forKey: .limit) }
      if page.hasValue { try container.encode(page, forKey: .page) }
    }

    enum CodingKeys: String, CodingKey {
      case externalTableId = "externalTableId"
      case filter = "filter"
      case order = "order"
      case limit = "limit"
      case page = "page"
    }
  }
}
extension InputObjects {
  struct SearchRecordsInput: Encodable, Hashable {

    var resourceId: UUIDScalar

    var filter: OptionalArgument<JSONScalar> = .init()

    var order: OptionalArgument<JSONScalar> = .init()

    var limit: OptionalArgument<Int> = .init()

    var page: OptionalArgument<Int> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(resourceId, forKey: .resourceId)
      if filter.hasValue { try container.encode(filter, forKey: .filter) }
      if order.hasValue { try container.encode(order, forKey: .order) }
      if limit.hasValue { try container.encode(limit, forKey: .limit) }
      if page.hasValue { try container.encode(page, forKey: .page) }
    }

    enum CodingKeys: String, CodingKey {
      case resourceId = "resourceId"
      case filter = "filter"
      case order = "order"
      case limit = "limit"
      case page = "page"
    }
  }
}
extension InputObjects {
  struct StartDeliveryInput: Encodable, Hashable {

    var id: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
    }
  }
}
extension InputObjects {
  struct StartOnboardingInput: Encodable, Hashable {

    var invitationToken: String

    var password: String

    var passwordConfirmation: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(invitationToken, forKey: .invitationToken)
      try container.encode(password, forKey: .password)
      try container.encode(passwordConfirmation, forKey: .passwordConfirmation)
    }

    enum CodingKeys: String, CodingKey {
      case invitationToken = "invitationToken"
      case password = "password"
      case passwordConfirmation = "passwordConfirmation"
    }
  }
}
extension InputObjects {
  struct SubscribeContactInput: Encodable, Hashable {

    var accountUid: OptionalArgument<String> = .init()

    var accountAnonymousUid: OptionalArgument<String> = .init()

    var name: OptionalArgument<String> = .init()

    var kind: Enums.ContactKind

    var value: String

    var userAgent: OptionalArgument<String> = .init()

    var osName: OptionalArgument<String> = .init()

    var osVersion: OptionalArgument<String> = .init()

    var deviceModel: OptionalArgument<String> = .init()

    var deviceManufacturer: OptionalArgument<String> = .init()

    var deviceUid: OptionalArgument<String> = .init()

    var deviceAdvertisingUid: OptionalArgument<String> = .init()

    var isDeviceAdTrackingEnabled: OptionalArgument<Bool> = .init()

    var tag: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      if accountUid.hasValue { try container.encode(accountUid, forKey: .accountUid) }
      if accountAnonymousUid.hasValue {
        try container.encode(accountAnonymousUid, forKey: .accountAnonymousUid)
      }
      if name.hasValue { try container.encode(name, forKey: .name) }
      try container.encode(kind, forKey: .kind)
      try container.encode(value, forKey: .value)
      if userAgent.hasValue { try container.encode(userAgent, forKey: .userAgent) }
      if osName.hasValue { try container.encode(osName, forKey: .osName) }
      if osVersion.hasValue { try container.encode(osVersion, forKey: .osVersion) }
      if deviceModel.hasValue { try container.encode(deviceModel, forKey: .deviceModel) }
      if deviceManufacturer.hasValue {
        try container.encode(deviceManufacturer, forKey: .deviceManufacturer)
      }
      if deviceUid.hasValue { try container.encode(deviceUid, forKey: .deviceUid) }
      if deviceAdvertisingUid.hasValue {
        try container.encode(deviceAdvertisingUid, forKey: .deviceAdvertisingUid)
      }
      if isDeviceAdTrackingEnabled.hasValue {
        try container.encode(isDeviceAdTrackingEnabled, forKey: .isDeviceAdTrackingEnabled)
      }
      if tag.hasValue { try container.encode(tag, forKey: .tag) }
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
      case accountAnonymousUid = "accountAnonymousUid"
      case name = "name"
      case kind = "kind"
      case value = "value"
      case userAgent = "userAgent"
      case osName = "osName"
      case osVersion = "osVersion"
      case deviceModel = "deviceModel"
      case deviceManufacturer = "deviceManufacturer"
      case deviceUid = "deviceUid"
      case deviceAdvertisingUid = "deviceAdvertisingUid"
      case isDeviceAdTrackingEnabled = "isDeviceAdTrackingEnabled"
      case tag = "tag"
    }
  }
}
extension InputObjects {
  struct SummarizeExternalRecordsInput: Encodable, Hashable {

    var externalTableId: UUIDScalar

    var filter: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(externalTableId, forKey: .externalTableId)
      if filter.hasValue { try container.encode(filter, forKey: .filter) }
    }

    enum CodingKeys: String, CodingKey {
      case externalTableId = "externalTableId"
      case filter = "filter"
    }
  }
}
extension InputObjects {
  struct SystemContextAppInput: Encodable, Hashable {

    var name: String

    var version: String

    var build: String

    var namespace: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(version, forKey: .version)
      try container.encode(build, forKey: .build)
      try container.encode(namespace, forKey: .namespace)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case version = "version"
      case build = "build"
      case namespace = "namespace"
    }
  }
}
extension InputObjects {
  struct SystemContextCampaignInput: Encodable, Hashable {

    var name: String

    var source: String

    var medium: String

    var term: String

    var content: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(source, forKey: .source)
      try container.encode(medium, forKey: .medium)
      try container.encode(term, forKey: .term)
      try container.encode(content, forKey: .content)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case source = "source"
      case medium = "medium"
      case term = "term"
      case content = "content"
    }
  }
}
extension InputObjects {
  struct SystemContextDeviceInput: Encodable, Hashable {

    var id: String

    var advertisingId: String

    var adTrackingEnabled: String

    var manufacturer: String

    var model: String

    var name: String

    var kind: String

    var token: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      try container.encode(advertisingId, forKey: .advertisingId)
      try container.encode(adTrackingEnabled, forKey: .adTrackingEnabled)
      try container.encode(manufacturer, forKey: .manufacturer)
      try container.encode(model, forKey: .model)
      try container.encode(name, forKey: .name)
      try container.encode(kind, forKey: .kind)
      try container.encode(token, forKey: .token)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case advertisingId = "advertisingId"
      case adTrackingEnabled = "adTrackingEnabled"
      case manufacturer = "manufacturer"
      case model = "model"
      case name = "name"
      case kind = "kind"
      case token = "token"
    }
  }
}
extension InputObjects {
  struct SystemContextInput: Encodable, Hashable {

    var ip: String

    var locale: String

    var timeZone: String

    var userAgent: String

    var app: OptionalArgument<InputObjects.SystemContextAppInput> = .init()

    var device: OptionalArgument<InputObjects.SystemContextDeviceInput> = .init()

    var os: OptionalArgument<InputObjects.SystemContextOsInput> = .init()

    var library: OptionalArgument<InputObjects.SystemContextLibraryInput> = .init()

    var network: OptionalArgument<InputObjects.SystemContextNetworkInput> = .init()

    var screen: OptionalArgument<InputObjects.SystemContextScreenInput> = .init()

    var systemContextCampaign: OptionalArgument<InputObjects.SystemContextCampaignInput> = .init()

    var systemContextLocation: OptionalArgument<InputObjects.SystemContextLocationInput> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(ip, forKey: .ip)
      try container.encode(locale, forKey: .locale)
      try container.encode(timeZone, forKey: .timeZone)
      try container.encode(userAgent, forKey: .userAgent)
      if app.hasValue { try container.encode(app, forKey: .app) }
      if device.hasValue { try container.encode(device, forKey: .device) }
      if os.hasValue { try container.encode(os, forKey: .os) }
      if library.hasValue { try container.encode(library, forKey: .library) }
      if network.hasValue { try container.encode(network, forKey: .network) }
      if screen.hasValue { try container.encode(screen, forKey: .screen) }
      if systemContextCampaign.hasValue {
        try container.encode(systemContextCampaign, forKey: .systemContextCampaign)
      }
      if systemContextLocation.hasValue {
        try container.encode(systemContextLocation, forKey: .systemContextLocation)
      }
    }

    enum CodingKeys: String, CodingKey {
      case ip = "ip"
      case locale = "locale"
      case timeZone = "timeZone"
      case userAgent = "userAgent"
      case app = "app"
      case device = "device"
      case os = "os"
      case library = "library"
      case network = "network"
      case screen = "screen"
      case systemContextCampaign = "systemContextCampaign"
      case systemContextLocation = "systemContextLocation"
    }
  }
}
extension InputObjects {
  struct SystemContextLibraryInput: Encodable, Hashable {

    var name: String

    var version: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(version, forKey: .version)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case version = "version"
    }
  }
}
extension InputObjects {
  struct SystemContextLocationInput: Encodable, Hashable {

    var city: String

    var country: String

    var latitude: DecimalScalar

    var longitude: DecimalScalar

    var speed: DecimalScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(city, forKey: .city)
      try container.encode(country, forKey: .country)
      try container.encode(latitude, forKey: .latitude)
      try container.encode(longitude, forKey: .longitude)
      try container.encode(speed, forKey: .speed)
    }

    enum CodingKeys: String, CodingKey {
      case city = "city"
      case country = "country"
      case latitude = "latitude"
      case longitude = "longitude"
      case speed = "speed"
    }
  }
}
extension InputObjects {
  struct SystemContextNetworkInput: Encodable, Hashable {

    var bluetooth: Bool

    var carrier: String

    var cellular: Bool

    var wifi: Bool

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(bluetooth, forKey: .bluetooth)
      try container.encode(carrier, forKey: .carrier)
      try container.encode(cellular, forKey: .cellular)
      try container.encode(wifi, forKey: .wifi)
    }

    enum CodingKeys: String, CodingKey {
      case bluetooth = "bluetooth"
      case carrier = "carrier"
      case cellular = "cellular"
      case wifi = "wifi"
    }
  }
}
extension InputObjects {
  struct SystemContextOsInput: Encodable, Hashable {

    var name: String

    var version: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(name, forKey: .name)
      try container.encode(version, forKey: .version)
    }

    enum CodingKeys: String, CodingKey {
      case name = "name"
      case version = "version"
    }
  }
}
extension InputObjects {
  struct SystemContextScreenInput: Encodable, Hashable {

    var width: Int

    var height: Int

    var density: Int

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(width, forKey: .width)
      try container.encode(height, forKey: .height)
      try container.encode(density, forKey: .density)
    }

    enum CodingKeys: String, CodingKey {
      case width = "width"
      case height = "height"
      case density = "density"
    }
  }
}
extension InputObjects {
  struct ThemePaletteInput: Encodable, Hashable {

    var primary: String

    var secondary: String

    var accent: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(primary, forKey: .primary)
      try container.encode(secondary, forKey: .secondary)
      try container.encode(accent, forKey: .accent)
    }

    enum CodingKeys: String, CodingKey {
      case primary = "primary"
      case secondary = "secondary"
      case accent = "accent"
    }
  }
}
extension InputObjects {
  struct TrackEventInput: Encodable, Hashable {

    var event: String

    var accountUid: OptionalArgument<String> = .init()

    var accountAnonymousUid: OptionalArgument<String> = .init()

    var data: OptionalArgument<JSONScalar> = .init()

    var timestamp: OptionalArgument<DateTimeScalar> = .init()

    var systemContext: OptionalArgument<InputObjects.SystemContextInput> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(event, forKey: .event)
      if accountUid.hasValue { try container.encode(accountUid, forKey: .accountUid) }
      if accountAnonymousUid.hasValue {
        try container.encode(accountAnonymousUid, forKey: .accountAnonymousUid)
      }
      if data.hasValue { try container.encode(data, forKey: .data) }
      if timestamp.hasValue { try container.encode(timestamp, forKey: .timestamp) }
      if systemContext.hasValue { try container.encode(systemContext, forKey: .systemContext) }
    }

    enum CodingKeys: String, CodingKey {
      case event = "event"
      case accountUid = "accountUid"
      case accountAnonymousUid = "accountAnonymousUid"
      case data = "data"
      case timestamp = "timestamp"
      case systemContext = "systemContext"
    }
  }
}
extension InputObjects {
  struct TrackNotificationInput: Encodable, Hashable {

    var id: UUIDScalar

    var status: Enums.TrackNotificationStatus

    var timestamp: DateTimeScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      try container.encode(status, forKey: .status)
      try container.encode(timestamp, forKey: .timestamp)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case status = "status"
      case timestamp = "timestamp"
    }
  }
}
extension InputObjects {
  struct TransferCartInput: Encodable, Hashable {

    var accountUid: String

    var accountAnonymousUid: String

    var orderId: OptionalArgument<UUIDScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(accountUid, forKey: .accountUid)
      try container.encode(accountAnonymousUid, forKey: .accountAnonymousUid)
      if orderId.hasValue { try container.encode(orderId, forKey: .orderId) }
    }

    enum CodingKeys: String, CodingKey {
      case accountUid = "accountUid"
      case accountAnonymousUid = "accountAnonymousUid"
      case orderId = "orderId"
    }
  }
}
extension InputObjects {
  struct UnarchiveInstallationInput: Encodable, Hashable {

    var id: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
    }
  }
}
extension InputObjects {
  struct UnpublishContentVersionInput: Encodable, Hashable {

    var id: UUIDScalar

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
    }
  }
}
extension InputObjects {
  struct UnpublishFlowVersionInput: Encodable, Hashable {

    var id: UUIDScalar

    var isGraceful: Bool

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      try container.encode(isGraceful, forKey: .isGraceful)
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case isGraceful = "isGraceful"
    }
  }
}
extension InputObjects {
  struct UpdateAccountAvatarInput: Encodable, Hashable {

    var id: UUIDScalar

    var avatar: OptionalArgument<UploadScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if avatar.hasValue { try container.encode(avatar, forKey: .avatar) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case avatar = "avatar"
    }
  }
}
extension InputObjects {
  struct UpdateAccountInput: Encodable, Hashable {

    var id: UUIDScalar

    var email: OptionalArgument<String> = .init()

    var fullName: OptionalArgument<String> = .init()

    var name: OptionalArgument<String> = .init()

    var firstName: OptionalArgument<String> = .init()

    var lastName: OptionalArgument<String> = .init()

    var avatar: OptionalArgument<String> = .init()

    var dateOfBirth: OptionalArgument<DateScalar> = .init()

    var timeZone: OptionalArgument<String> = .init()

    var hasApiAccess: OptionalArgument<Bool> = .init()

    var hasGuiAccess: OptionalArgument<Bool> = .init()

    var custom: OptionalArgument<JSONScalar> = .init()

    var gender: OptionalArgument<Enums.AccountGender> = .init()

    var phone: OptionalArgument<String> = .init()

    var scope: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if email.hasValue { try container.encode(email, forKey: .email) }
      if fullName.hasValue { try container.encode(fullName, forKey: .fullName) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if firstName.hasValue { try container.encode(firstName, forKey: .firstName) }
      if lastName.hasValue { try container.encode(lastName, forKey: .lastName) }
      if avatar.hasValue { try container.encode(avatar, forKey: .avatar) }
      if dateOfBirth.hasValue { try container.encode(dateOfBirth, forKey: .dateOfBirth) }
      if timeZone.hasValue { try container.encode(timeZone, forKey: .timeZone) }
      if hasApiAccess.hasValue { try container.encode(hasApiAccess, forKey: .hasApiAccess) }
      if hasGuiAccess.hasValue { try container.encode(hasGuiAccess, forKey: .hasGuiAccess) }
      if custom.hasValue { try container.encode(custom, forKey: .custom) }
      if gender.hasValue { try container.encode(gender, forKey: .gender) }
      if phone.hasValue { try container.encode(phone, forKey: .phone) }
      if scope.hasValue { try container.encode(scope, forKey: .scope) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case email = "email"
      case fullName = "fullName"
      case name = "name"
      case firstName = "firstName"
      case lastName = "lastName"
      case avatar = "avatar"
      case dateOfBirth = "dateOfBirth"
      case timeZone = "timeZone"
      case hasApiAccess = "hasApiAccess"
      case hasGuiAccess = "hasGuiAccess"
      case custom = "custom"
      case gender = "gender"
      case phone = "phone"
      case scope = "scope"
    }
  }
}
extension InputObjects {
  struct UpdateAttributeInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var dataFormat: OptionalArgument<String> = .init()

    var isNullable: OptionalArgument<Bool> = .init()

    var isRepeatable: OptionalArgument<Bool> = .init()

    var isTranslatable: OptionalArgument<Bool> = .init()

    var isFilterable: OptionalArgument<Bool> = .init()

    var isOrderable: OptionalArgument<Bool> = .init()

    var isSearchable: OptionalArgument<Bool> = .init()

    var validations: OptionalArgument<[JSONScalar]> = .init()

    var settings: OptionalArgument<JSONScalar> = .init()

    var defaultValue: OptionalArgument<JSONScalar> = .init()

    var position: OptionalArgument<Int> = .init()

    var placeholder: OptionalArgument<String> = .init()

    var helpText: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if dataFormat.hasValue { try container.encode(dataFormat, forKey: .dataFormat) }
      if isNullable.hasValue { try container.encode(isNullable, forKey: .isNullable) }
      if isRepeatable.hasValue { try container.encode(isRepeatable, forKey: .isRepeatable) }
      if isTranslatable.hasValue { try container.encode(isTranslatable, forKey: .isTranslatable) }
      if isFilterable.hasValue { try container.encode(isFilterable, forKey: .isFilterable) }
      if isOrderable.hasValue { try container.encode(isOrderable, forKey: .isOrderable) }
      if isSearchable.hasValue { try container.encode(isSearchable, forKey: .isSearchable) }
      if validations.hasValue { try container.encode(validations, forKey: .validations) }
      if settings.hasValue { try container.encode(settings, forKey: .settings) }
      if defaultValue.hasValue { try container.encode(defaultValue, forKey: .defaultValue) }
      if position.hasValue { try container.encode(position, forKey: .position) }
      if placeholder.hasValue { try container.encode(placeholder, forKey: .placeholder) }
      if helpText.hasValue { try container.encode(helpText, forKey: .helpText) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
      case dataFormat = "dataFormat"
      case isNullable = "isNullable"
      case isRepeatable = "isRepeatable"
      case isTranslatable = "isTranslatable"
      case isFilterable = "isFilterable"
      case isOrderable = "isOrderable"
      case isSearchable = "isSearchable"
      case validations = "validations"
      case settings = "settings"
      case defaultValue = "defaultValue"
      case position = "position"
      case placeholder = "placeholder"
      case helpText = "helpText"
    }
  }
}
extension InputObjects {
  struct UpdateConfigurationInput: Encodable, Hashable {

    var id: UUIDScalar

    var settings: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if settings.hasValue { try container.encode(settings, forKey: .settings) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case settings = "settings"
    }
  }
}
extension InputObjects {
  struct UpdateContactInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var kind: OptionalArgument<Enums.ContactKind> = .init()

    var value: OptionalArgument<String> = .init()

    var status: OptionalArgument<Enums.ContactStatus> = .init()

    var userAgent: OptionalArgument<String> = .init()

    var osName: OptionalArgument<String> = .init()

    var osVersion: OptionalArgument<String> = .init()

    var deviceModel: OptionalArgument<String> = .init()

    var deviceManufacturer: OptionalArgument<String> = .init()

    var deviceUid: OptionalArgument<String> = .init()

    var deviceAdvertisingUid: OptionalArgument<String> = .init()

    var isDeviceAdTrackingEnabled: OptionalArgument<Bool> = .init()

    var tag: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if kind.hasValue { try container.encode(kind, forKey: .kind) }
      if value.hasValue { try container.encode(value, forKey: .value) }
      if status.hasValue { try container.encode(status, forKey: .status) }
      if userAgent.hasValue { try container.encode(userAgent, forKey: .userAgent) }
      if osName.hasValue { try container.encode(osName, forKey: .osName) }
      if osVersion.hasValue { try container.encode(osVersion, forKey: .osVersion) }
      if deviceModel.hasValue { try container.encode(deviceModel, forKey: .deviceModel) }
      if deviceManufacturer.hasValue {
        try container.encode(deviceManufacturer, forKey: .deviceManufacturer)
      }
      if deviceUid.hasValue { try container.encode(deviceUid, forKey: .deviceUid) }
      if deviceAdvertisingUid.hasValue {
        try container.encode(deviceAdvertisingUid, forKey: .deviceAdvertisingUid)
      }
      if isDeviceAdTrackingEnabled.hasValue {
        try container.encode(isDeviceAdTrackingEnabled, forKey: .isDeviceAdTrackingEnabled)
      }
      if tag.hasValue { try container.encode(tag, forKey: .tag) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case kind = "kind"
      case value = "value"
      case status = "status"
      case userAgent = "userAgent"
      case osName = "osName"
      case osVersion = "osVersion"
      case deviceModel = "deviceModel"
      case deviceManufacturer = "deviceManufacturer"
      case deviceUid = "deviceUid"
      case deviceAdvertisingUid = "deviceAdvertisingUid"
      case isDeviceAdTrackingEnabled = "isDeviceAdTrackingEnabled"
      case tag = "tag"
    }
  }
}
extension InputObjects {
  struct UpdateContentInput: Encodable, Hashable {

    var id: UUIDScalar

    var identifier: OptionalArgument<String> = .init()

    var position: OptionalArgument<Int> = .init()

    var data: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if position.hasValue { try container.encode(position, forKey: .position) }
      if data.hasValue { try container.encode(data, forKey: .data) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case identifier = "identifier"
      case position = "position"
      case data = "data"
    }
  }
}
extension InputObjects {
  struct UpdateContentTypeInput: Encodable, Hashable {

    var id: UUIDScalar

    var kind: OptionalArgument<Enums.ContentTypeKind> = .init()

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var position: OptionalArgument<Int> = .init()

    var titleFieldId: OptionalArgument<UUIDScalar> = .init()

    var category: OptionalArgument<Enums.ContentTypeCategory> = .init()

    var orderingStyle: OptionalArgument<Enums.ContentTypeOrderingStyle> = .init()

    var fieldOrderings: OptionalArgument<[InputObjects.FieldOrderingInputInput]> = .init()

    var isPublishingEnabled: OptionalArgument<Bool> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if kind.hasValue { try container.encode(kind, forKey: .kind) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if position.hasValue { try container.encode(position, forKey: .position) }
      if titleFieldId.hasValue { try container.encode(titleFieldId, forKey: .titleFieldId) }
      if category.hasValue { try container.encode(category, forKey: .category) }
      if orderingStyle.hasValue { try container.encode(orderingStyle, forKey: .orderingStyle) }
      if fieldOrderings.hasValue { try container.encode(fieldOrderings, forKey: .fieldOrderings) }
      if isPublishingEnabled.hasValue {
        try container.encode(isPublishingEnabled, forKey: .isPublishingEnabled)
      }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case kind = "kind"
      case name = "name"
      case identifier = "identifier"
      case position = "position"
      case titleFieldId = "titleFieldId"
      case category = "category"
      case orderingStyle = "orderingStyle"
      case fieldOrderings = "fieldOrderings"
      case isPublishingEnabled = "isPublishingEnabled"
    }
  }
}
extension InputObjects {
  struct UpdateCouponCodeInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var accountId: OptionalArgument<UUIDScalar> = .init()

    var redemptionsLimit: OptionalArgument<Int> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if accountId.hasValue { try container.encode(accountId, forKey: .accountId) }
      if redemptionsLimit.hasValue {
        try container.encode(redemptionsLimit, forKey: .redemptionsLimit)
      }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case accountId = "accountId"
      case redemptionsLimit = "redemptionsLimit"
    }
  }
}
extension InputObjects {
  struct UpdateCouponInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var discountType: OptionalArgument<Enums.CouponDiscountType> = .init()

    var discountAmount: OptionalArgument<DecimalScalar> = .init()

    var currencyCode: OptionalArgument<String> = .init()

    var expiresAt: OptionalArgument<DateTimeScalar> = .init()

    var redemptionsLimit: OptionalArgument<Int> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if discountType.hasValue { try container.encode(discountType, forKey: .discountType) }
      if discountAmount.hasValue { try container.encode(discountAmount, forKey: .discountAmount) }
      if currencyCode.hasValue { try container.encode(currencyCode, forKey: .currencyCode) }
      if expiresAt.hasValue { try container.encode(expiresAt, forKey: .expiresAt) }
      if redemptionsLimit.hasValue {
        try container.encode(redemptionsLimit, forKey: .redemptionsLimit)
      }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
      case discountType = "discountType"
      case discountAmount = "discountAmount"
      case currencyCode = "currencyCode"
      case expiresAt = "expiresAt"
      case redemptionsLimit = "redemptionsLimit"
    }
  }
}
extension InputObjects {
  struct UpdateCouponRedemptionInput: Encodable, Hashable {

    var id: UUIDScalar

    var couponId: OptionalArgument<UUIDScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if couponId.hasValue { try container.encode(couponId, forKey: .couponId) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case couponId = "couponId"
    }
  }
}
extension InputObjects {
  struct UpdateCouponRestrictionInput: Encodable, Hashable {

    var id: UUIDScalar

    var itemId: OptionalArgument<UUIDScalar> = .init()

    var itemCategoryId: OptionalArgument<UUIDScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if itemId.hasValue { try container.encode(itemId, forKey: .itemId) }
      if itemCategoryId.hasValue { try container.encode(itemCategoryId, forKey: .itemCategoryId) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case itemId = "itemId"
      case itemCategoryId = "itemCategoryId"
    }
  }
}
extension InputObjects {
  struct UpdateDashboardInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
    }
  }
}
extension InputObjects {
  struct UpdateDeliveryInput: Encodable, Hashable {

    var id: UUIDScalar

    var contentId: OptionalArgument<UUIDScalar> = .init()

    var content: OptionalArgument<JSONScalar> = .init()

    var name: OptionalArgument<String> = .init()

    var data: OptionalArgument<JSONScalar> = .init()

    var isTest: OptionalArgument<Bool> = .init()

    var scheduledAt: OptionalArgument<DateTimeScalar> = .init()

    var status: OptionalArgument<Enums.DeliveryStatus> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if contentId.hasValue { try container.encode(contentId, forKey: .contentId) }
      if content.hasValue { try container.encode(content, forKey: .content) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if data.hasValue { try container.encode(data, forKey: .data) }
      if isTest.hasValue { try container.encode(isTest, forKey: .isTest) }
      if scheduledAt.hasValue { try container.encode(scheduledAt, forKey: .scheduledAt) }
      if status.hasValue { try container.encode(status, forKey: .status) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case contentId = "contentId"
      case content = "content"
      case name = "name"
      case data = "data"
      case isTest = "isTest"
      case scheduledAt = "scheduledAt"
      case status = "status"
    }
  }
}
extension InputObjects {
  struct UpdateEnvironmentInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
    }
  }
}
extension InputObjects {
  struct UpdateEventTypeInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
    }
  }
}
extension InputObjects {
  struct UpdateExternalColumnInput: Encodable, Hashable {

    var id: UUIDScalar

    var externalTableId: OptionalArgument<UUIDScalar> = .init()

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var fieldType: OptionalArgument<String> = .init()

    var settings: OptionalArgument<JSONScalar> = .init()

    var position: OptionalArgument<Int> = .init()

    var isRepeated: OptionalArgument<Bool> = .init()

    var uiMeta: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if externalTableId.hasValue {
        try container.encode(externalTableId, forKey: .externalTableId)
      }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if fieldType.hasValue { try container.encode(fieldType, forKey: .fieldType) }
      if settings.hasValue { try container.encode(settings, forKey: .settings) }
      if position.hasValue { try container.encode(position, forKey: .position) }
      if isRepeated.hasValue { try container.encode(isRepeated, forKey: .isRepeated) }
      if uiMeta.hasValue { try container.encode(uiMeta, forKey: .uiMeta) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case externalTableId = "externalTableId"
      case name = "name"
      case identifier = "identifier"
      case fieldType = "fieldType"
      case settings = "settings"
      case position = "position"
      case isRepeated = "isRepeated"
      case uiMeta = "uiMeta"
    }
  }
}
extension InputObjects {
  struct UpdateExternalPolymorphicViewInput: Encodable, Hashable {

    var id: UUIDScalar

    var externalTableId: OptionalArgument<UUIDScalar> = .init()

    var name: OptionalArgument<String> = .init()

    var value: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if externalTableId.hasValue {
        try container.encode(externalTableId, forKey: .externalTableId)
      }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if value.hasValue { try container.encode(value, forKey: .value) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case externalTableId = "externalTableId"
      case name = "name"
      case value = "value"
    }
  }
}
extension InputObjects {
  struct UpdateExternalRelationshipInput: Encodable, Hashable {

    var id: UUIDScalar

    var sourceExternalTableId: OptionalArgument<UUIDScalar> = .init()

    var sourceExternalColumnId: OptionalArgument<UUIDScalar> = .init()

    var destinationExternalTableId: OptionalArgument<UUIDScalar> = .init()

    var destinationExternalColumnId: OptionalArgument<UUIDScalar> = .init()

    var kind: OptionalArgument<Enums.ExternalRelationshipKind> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if sourceExternalTableId.hasValue {
        try container.encode(sourceExternalTableId, forKey: .sourceExternalTableId)
      }
      if sourceExternalColumnId.hasValue {
        try container.encode(sourceExternalColumnId, forKey: .sourceExternalColumnId)
      }
      if destinationExternalTableId.hasValue {
        try container.encode(destinationExternalTableId, forKey: .destinationExternalTableId)
      }
      if destinationExternalColumnId.hasValue {
        try container.encode(destinationExternalColumnId, forKey: .destinationExternalColumnId)
      }
      if kind.hasValue { try container.encode(kind, forKey: .kind) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case sourceExternalTableId = "sourceExternalTableId"
      case sourceExternalColumnId = "sourceExternalColumnId"
      case destinationExternalTableId = "destinationExternalTableId"
      case destinationExternalColumnId = "destinationExternalColumnId"
      case kind = "kind"
    }
  }
}
extension InputObjects {
  struct UpdateExternalTableInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var titleColumnId: OptionalArgument<UUIDScalar> = .init()

    var polymorphicColumnId: OptionalArgument<UUIDScalar> = .init()

    var uiMeta: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if titleColumnId.hasValue { try container.encode(titleColumnId, forKey: .titleColumnId) }
      if polymorphicColumnId.hasValue {
        try container.encode(polymorphicColumnId, forKey: .polymorphicColumnId)
      }
      if uiMeta.hasValue { try container.encode(uiMeta, forKey: .uiMeta) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
      case titleColumnId = "titleColumnId"
      case polymorphicColumnId = "polymorphicColumnId"
      case uiMeta = "uiMeta"
    }
  }
}
extension InputObjects {
  struct UpdateFieldInput: Encodable, Hashable {

    var id: UUIDScalar

    var contentTypeId: OptionalArgument<UUIDScalar> = .init()

    var fieldType: OptionalArgument<String> = .init()

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var position: OptionalArgument<Int> = .init()

    var isRepeated: OptionalArgument<Bool> = .init()

    var defaultValue: OptionalArgument<String> = .init()

    var placeholder: OptionalArgument<String> = .init()

    var helpText: OptionalArgument<String> = .init()

    var settings: OptionalArgument<JSONScalar> = .init()

    var restrictions: OptionalArgument<[UUIDScalar]> = .init()

    var isTranslatable: OptionalArgument<Bool> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if contentTypeId.hasValue { try container.encode(contentTypeId, forKey: .contentTypeId) }
      if fieldType.hasValue { try container.encode(fieldType, forKey: .fieldType) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if position.hasValue { try container.encode(position, forKey: .position) }
      if isRepeated.hasValue { try container.encode(isRepeated, forKey: .isRepeated) }
      if defaultValue.hasValue { try container.encode(defaultValue, forKey: .defaultValue) }
      if placeholder.hasValue { try container.encode(placeholder, forKey: .placeholder) }
      if helpText.hasValue { try container.encode(helpText, forKey: .helpText) }
      if settings.hasValue { try container.encode(settings, forKey: .settings) }
      if restrictions.hasValue { try container.encode(restrictions, forKey: .restrictions) }
      if isTranslatable.hasValue { try container.encode(isTranslatable, forKey: .isTranslatable) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case contentTypeId = "contentTypeId"
      case fieldType = "fieldType"
      case name = "name"
      case identifier = "identifier"
      case position = "position"
      case isRepeated = "isRepeated"
      case defaultValue = "defaultValue"
      case placeholder = "placeholder"
      case helpText = "helpText"
      case settings = "settings"
      case restrictions = "restrictions"
      case isTranslatable = "isTranslatable"
    }
  }
}
extension InputObjects {
  struct UpdateFlowInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
    }
  }
}
extension InputObjects {
  struct UpdateFlowVersionInput: Encodable, Hashable {

    var id: UUIDScalar

    var snapshot: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if snapshot.hasValue { try container.encode(snapshot, forKey: .snapshot) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case snapshot = "snapshot"
    }
  }
}
extension InputObjects {
  struct UpdateGroupInput: Encodable, Hashable {

    var id: UUIDScalar

    var parentId: OptionalArgument<UUIDScalar> = .init()

    var name: OptionalArgument<String> = .init()

    var position: OptionalArgument<Int> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if parentId.hasValue { try container.encode(parentId, forKey: .parentId) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if position.hasValue { try container.encode(position, forKey: .position) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case parentId = "parentId"
      case name = "name"
      case position = "position"
    }
  }
}
extension InputObjects {
  struct UpdateInstallationInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
    }
  }
}
extension InputObjects {
  struct UpdateItemCategoryInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var description: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if description.hasValue { try container.encode(description, forKey: .description) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
      case description = "description"
    }
  }
}
extension InputObjects {
  struct UpdateItemCategoryMembershipInput: Encodable, Hashable {

    var id: UUIDScalar

    var itemId: OptionalArgument<UUIDScalar> = .init()

    var itemCategoryId: OptionalArgument<UUIDScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if itemId.hasValue { try container.encode(itemId, forKey: .itemId) }
      if itemCategoryId.hasValue { try container.encode(itemCategoryId, forKey: .itemCategoryId) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case itemId = "itemId"
      case itemCategoryId = "itemCategoryId"
    }
  }
}
extension InputObjects {
  struct UpdateItemInput: Encodable, Hashable {

    var id: UUIDScalar

    var kind: OptionalArgument<Enums.ItemKind> = .init()

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var description: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if kind.hasValue { try container.encode(kind, forKey: .kind) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if description.hasValue { try container.encode(description, forKey: .description) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case kind = "kind"
      case name = "name"
      case identifier = "identifier"
      case description = "description"
    }
  }
}
extension InputObjects {
  struct UpdateMediumInput: Encodable, Hashable {

    var id: UUIDScalar

    var metadata: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if metadata.hasValue { try container.encode(metadata, forKey: .metadata) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case metadata = "metadata"
    }
  }
}
extension InputObjects {
  struct UpdateMenuElementInput: Encodable, Hashable {

    var id: UUIDScalar

    var parentId: OptionalArgument<UUIDScalar> = .init()

    var viewId: OptionalArgument<UUIDScalar> = .init()

    var name: OptionalArgument<String> = .init()

    var path: OptionalArgument<String> = .init()

    var icon: OptionalArgument<String> = .init()

    var kind: OptionalArgument<Enums.MenuElementKind> = .init()

    var separatorStyle: OptionalArgument<Enums.MenuElementSeparatorStyle> = .init()

    var placement: OptionalArgument<Enums.MenuElementPlacement> = .init()

    var target: OptionalArgument<Enums.MenuElementTarget> = .init()

    var url: OptionalArgument<String> = .init()

    var position: OptionalArgument<Int> = .init()

    var query: OptionalArgument<String> = .init()

    var actions: OptionalArgument<[InputObjects.MenuElementActionInput]> = .init()

    var isLocked: OptionalArgument<Bool> = .init()

    var isRepeated: OptionalArgument<Bool> = .init()

    var isSticky: OptionalArgument<Bool> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if parentId.hasValue { try container.encode(parentId, forKey: .parentId) }
      if viewId.hasValue { try container.encode(viewId, forKey: .viewId) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if path.hasValue { try container.encode(path, forKey: .path) }
      if icon.hasValue { try container.encode(icon, forKey: .icon) }
      if kind.hasValue { try container.encode(kind, forKey: .kind) }
      if separatorStyle.hasValue { try container.encode(separatorStyle, forKey: .separatorStyle) }
      if placement.hasValue { try container.encode(placement, forKey: .placement) }
      if target.hasValue { try container.encode(target, forKey: .target) }
      if url.hasValue { try container.encode(url, forKey: .url) }
      if position.hasValue { try container.encode(position, forKey: .position) }
      if query.hasValue { try container.encode(query, forKey: .query) }
      if actions.hasValue { try container.encode(actions, forKey: .actions) }
      if isLocked.hasValue { try container.encode(isLocked, forKey: .isLocked) }
      if isRepeated.hasValue { try container.encode(isRepeated, forKey: .isRepeated) }
      if isSticky.hasValue { try container.encode(isSticky, forKey: .isSticky) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case parentId = "parentId"
      case viewId = "viewId"
      case name = "name"
      case path = "path"
      case icon = "icon"
      case kind = "kind"
      case separatorStyle = "separatorStyle"
      case placement = "placement"
      case target = "target"
      case url = "url"
      case position = "position"
      case query = "query"
      case actions = "actions"
      case isLocked = "isLocked"
      case isRepeated = "isRepeated"
      case isSticky = "isSticky"
    }
  }
}
extension InputObjects {
  struct UpdateOperationInput: Encodable, Hashable {

    var id: UUIDScalar

    var appId: OptionalArgument<UUIDScalar> = .init()

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var description: OptionalArgument<String> = .init()

    var icon: OptionalArgument<String> = .init()

    var position: OptionalArgument<Int> = .init()

    var behavior: OptionalArgument<Enums.OperationBehavior> = .init()

    var kind: OptionalArgument<Enums.OperationKind> = .init()

    var actsOn: OptionalArgument<Enums.OperationActsOn> = .init()

    var behaviorInstallationId: OptionalArgument<UUIDScalar> = .init()

    var behaviorOperationId: OptionalArgument<UUIDScalar> = .init()

    var behaviorArguments: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if appId.hasValue { try container.encode(appId, forKey: .appId) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if description.hasValue { try container.encode(description, forKey: .description) }
      if icon.hasValue { try container.encode(icon, forKey: .icon) }
      if position.hasValue { try container.encode(position, forKey: .position) }
      if behavior.hasValue { try container.encode(behavior, forKey: .behavior) }
      if kind.hasValue { try container.encode(kind, forKey: .kind) }
      if actsOn.hasValue { try container.encode(actsOn, forKey: .actsOn) }
      if behaviorInstallationId.hasValue {
        try container.encode(behaviorInstallationId, forKey: .behaviorInstallationId)
      }
      if behaviorOperationId.hasValue {
        try container.encode(behaviorOperationId, forKey: .behaviorOperationId)
      }
      if behaviorArguments.hasValue {
        try container.encode(behaviorArguments, forKey: .behaviorArguments)
      }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case appId = "appId"
      case name = "name"
      case identifier = "identifier"
      case description = "description"
      case icon = "icon"
      case position = "position"
      case behavior = "behavior"
      case kind = "kind"
      case actsOn = "actsOn"
      case behaviorInstallationId = "behaviorInstallationId"
      case behaviorOperationId = "behaviorOperationId"
      case behaviorArguments = "behaviorArguments"
    }
  }
}
extension InputObjects {
  struct UpdateOrderInput: Encodable, Hashable {

    var id: UUIDScalar

    var discount: OptionalArgument<DecimalScalar> = .init()

    var total: OptionalArgument<DecimalScalar> = .init()

    var checkedOutAt: OptionalArgument<DateTimeScalar> = .init()

    var paidAt: OptionalArgument<DateTimeScalar> = .init()

    var gatewayId: OptionalArgument<UUIDScalar> = .init()

    var gatewayMeta: OptionalArgument<JSONScalar> = .init()

    var status: OptionalArgument<Enums.OrderStatus> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if discount.hasValue { try container.encode(discount, forKey: .discount) }
      if total.hasValue { try container.encode(total, forKey: .total) }
      if checkedOutAt.hasValue { try container.encode(checkedOutAt, forKey: .checkedOutAt) }
      if paidAt.hasValue { try container.encode(paidAt, forKey: .paidAt) }
      if gatewayId.hasValue { try container.encode(gatewayId, forKey: .gatewayId) }
      if gatewayMeta.hasValue { try container.encode(gatewayMeta, forKey: .gatewayMeta) }
      if status.hasValue { try container.encode(status, forKey: .status) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case discount = "discount"
      case total = "total"
      case checkedOutAt = "checkedOutAt"
      case paidAt = "paidAt"
      case gatewayId = "gatewayId"
      case gatewayMeta = "gatewayMeta"
      case status = "status"
    }
  }
}
extension InputObjects {
  struct UpdateOrderItemInput: Encodable, Hashable {

    var id: UUIDScalar

    var pricingId: OptionalArgument<UUIDScalar> = .init()

    var quantity: OptionalArgument<DecimalScalar> = .init()

    var discount: OptionalArgument<DecimalScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if pricingId.hasValue { try container.encode(pricingId, forKey: .pricingId) }
      if quantity.hasValue { try container.encode(quantity, forKey: .quantity) }
      if discount.hasValue { try container.encode(discount, forKey: .discount) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case pricingId = "pricingId"
      case quantity = "quantity"
      case discount = "discount"
    }
  }
}
extension InputObjects {
  struct UpdateParameterInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var isNullable: OptionalArgument<Bool> = .init()

    var isRepeatable: OptionalArgument<Bool> = .init()

    var validations: OptionalArgument<[JSONScalar]> = .init()

    var defaultValue: OptionalArgument<JSONScalar> = .init()

    var position: OptionalArgument<Int> = .init()

    var placeholder: OptionalArgument<String> = .init()

    var helpText: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if isNullable.hasValue { try container.encode(isNullable, forKey: .isNullable) }
      if isRepeatable.hasValue { try container.encode(isRepeatable, forKey: .isRepeatable) }
      if validations.hasValue { try container.encode(validations, forKey: .validations) }
      if defaultValue.hasValue { try container.encode(defaultValue, forKey: .defaultValue) }
      if position.hasValue { try container.encode(position, forKey: .position) }
      if placeholder.hasValue { try container.encode(placeholder, forKey: .placeholder) }
      if helpText.hasValue { try container.encode(helpText, forKey: .helpText) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
      case isNullable = "isNullable"
      case isRepeatable = "isRepeatable"
      case validations = "validations"
      case defaultValue = "defaultValue"
      case position = "position"
      case placeholder = "placeholder"
      case helpText = "helpText"
    }
  }
}
extension InputObjects {
  struct UpdatePreferenceInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var restrictions: OptionalArgument<[UUIDScalar]> = .init()

    var isEnabledByDefault: OptionalArgument<Bool> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if restrictions.hasValue { try container.encode(restrictions, forKey: .restrictions) }
      if isEnabledByDefault.hasValue {
        try container.encode(isEnabledByDefault, forKey: .isEnabledByDefault)
      }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
      case restrictions = "restrictions"
      case isEnabledByDefault = "isEnabledByDefault"
    }
  }
}
extension InputObjects {
  struct UpdatePricingInput: Encodable, Hashable {

    var id: UUIDScalar

    var amount: OptionalArgument<DecimalScalar> = .init()

    var currencyCode: OptionalArgument<String> = .init()

    var originalAmount: OptionalArgument<DecimalScalar> = .init()

    var isRecurring: OptionalArgument<Bool> = .init()

    var recurringInterval: OptionalArgument<Int> = .init()

    var recurringIntervalUnit: OptionalArgument<Enums.PricingRecurringIntervalUnit> = .init()

    var kind: OptionalArgument<Enums.PricingKind> = .init()

    var appleProductIdentifier: OptionalArgument<String> = .init()

    var googleProductIdentifier: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if amount.hasValue { try container.encode(amount, forKey: .amount) }
      if currencyCode.hasValue { try container.encode(currencyCode, forKey: .currencyCode) }
      if originalAmount.hasValue { try container.encode(originalAmount, forKey: .originalAmount) }
      if isRecurring.hasValue { try container.encode(isRecurring, forKey: .isRecurring) }
      if recurringInterval.hasValue {
        try container.encode(recurringInterval, forKey: .recurringInterval)
      }
      if recurringIntervalUnit.hasValue {
        try container.encode(recurringIntervalUnit, forKey: .recurringIntervalUnit)
      }
      if kind.hasValue { try container.encode(kind, forKey: .kind) }
      if appleProductIdentifier.hasValue {
        try container.encode(appleProductIdentifier, forKey: .appleProductIdentifier)
      }
      if googleProductIdentifier.hasValue {
        try container.encode(googleProductIdentifier, forKey: .googleProductIdentifier)
      }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case amount = "amount"
      case currencyCode = "currencyCode"
      case originalAmount = "originalAmount"
      case isRecurring = "isRecurring"
      case recurringInterval = "recurringInterval"
      case recurringIntervalUnit = "recurringIntervalUnit"
      case kind = "kind"
      case appleProductIdentifier = "appleProductIdentifier"
      case googleProductIdentifier = "googleProductIdentifier"
    }
  }
}
extension InputObjects {
  struct UpdateRecipientInput: Encodable, Hashable {

    var id: UUIDScalar

    var target: OptionalArgument<Enums.RecipientTarget> = .init()

    var data: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if target.hasValue { try container.encode(target, forKey: .target) }
      if data.hasValue { try container.encode(data, forKey: .data) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case target = "target"
      case data = "data"
    }
  }
}
extension InputObjects {
  struct UpdateRelationshipInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var sourceAttributeId: OptionalArgument<UUIDScalar> = .init()

    var targetAttributeId: OptionalArgument<UUIDScalar> = .init()

    var kind: OptionalArgument<Enums.RelationshipKind> = .init()

    var filter: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if sourceAttributeId.hasValue {
        try container.encode(sourceAttributeId, forKey: .sourceAttributeId)
      }
      if targetAttributeId.hasValue {
        try container.encode(targetAttributeId, forKey: .targetAttributeId)
      }
      if kind.hasValue { try container.encode(kind, forKey: .kind) }
      if filter.hasValue { try container.encode(filter, forKey: .filter) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
      case sourceAttributeId = "sourceAttributeId"
      case targetAttributeId = "targetAttributeId"
      case kind = "kind"
      case filter = "filter"
    }
  }
}
extension InputObjects {
  struct UpdateResourceInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var description: OptionalArgument<String> = .init()

    var icon: OptionalArgument<String> = .init()

    var position: OptionalArgument<Int> = .init()

    var titleAttributeId: OptionalArgument<UUIDScalar> = .init()

    var subtitleAttributeId: OptionalArgument<UUIDScalar> = .init()

    var polymorphicAttributeId: OptionalArgument<UUIDScalar> = .init()

    var orderStyle: OptionalArgument<Enums.OrderStyle> = .init()

    var orderAttributes: OptionalArgument<[JSONScalar]> = .init()

    var validations: OptionalArgument<[JSONScalar]> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if description.hasValue { try container.encode(description, forKey: .description) }
      if icon.hasValue { try container.encode(icon, forKey: .icon) }
      if position.hasValue { try container.encode(position, forKey: .position) }
      if titleAttributeId.hasValue {
        try container.encode(titleAttributeId, forKey: .titleAttributeId)
      }
      if subtitleAttributeId.hasValue {
        try container.encode(subtitleAttributeId, forKey: .subtitleAttributeId)
      }
      if polymorphicAttributeId.hasValue {
        try container.encode(polymorphicAttributeId, forKey: .polymorphicAttributeId)
      }
      if orderStyle.hasValue { try container.encode(orderStyle, forKey: .orderStyle) }
      if orderAttributes.hasValue {
        try container.encode(orderAttributes, forKey: .orderAttributes)
      }
      if validations.hasValue { try container.encode(validations, forKey: .validations) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
      case description = "description"
      case icon = "icon"
      case position = "position"
      case titleAttributeId = "titleAttributeId"
      case subtitleAttributeId = "subtitleAttributeId"
      case polymorphicAttributeId = "polymorphicAttributeId"
      case orderStyle = "orderStyle"
      case orderAttributes = "orderAttributes"
      case validations = "validations"
    }
  }
}
extension InputObjects {
  struct UpdateRoleInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var policy: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if policy.hasValue { try container.encode(policy, forKey: .policy) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case policy = "policy"
    }
  }
}
extension InputObjects {
  struct UpdateSegmentInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var identifier: OptionalArgument<String> = .init()

    var filter: OptionalArgument<JSONScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if filter.hasValue { try container.encode(filter, forKey: .filter) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case identifier = "identifier"
      case filter = "filter"
    }
  }
}
extension InputObjects {
  struct UpdateSessionInput: Encodable, Hashable {

    var id: UUIDScalar

    var lastActiveAt: OptionalArgument<DateTimeScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if lastActiveAt.hasValue { try container.encode(lastActiveAt, forKey: .lastActiveAt) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case lastActiveAt = "lastActiveAt"
    }
  }
}
extension InputObjects {
  struct UpdateStoredPreferenceInput: Encodable, Hashable {

    var id: UUIDScalar

    var isEnabled: OptionalArgument<Bool> = .init()

    var channels: OptionalArgument<[Enums.DeliveryChannel]> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if isEnabled.hasValue { try container.encode(isEnabled, forKey: .isEnabled) }
      if channels.hasValue { try container.encode(channels, forKey: .channels) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case isEnabled = "isEnabled"
      case channels = "channels"
    }
  }
}
extension InputObjects {
  struct UpdateThemeInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var palette: OptionalArgument<InputObjects.ThemePaletteInput> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if palette.hasValue { try container.encode(palette, forKey: .palette) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case palette = "palette"
    }
  }
}
extension InputObjects {
  struct UpdateTransactionInput: Encodable, Hashable {

    var id: UUIDScalar

    var amount: OptionalArgument<DecimalScalar> = .init()

    var status: OptionalArgument<Enums.TransactionStatus> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if amount.hasValue { try container.encode(amount, forKey: .amount) }
      if status.hasValue { try container.encode(status, forKey: .status) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case amount = "amount"
      case status = "status"
    }
  }
}
extension InputObjects {
  struct UpdateViewInput: Encodable, Hashable {

    var id: UUIDScalar

    var dashboardId: OptionalArgument<UUIDScalar> = .init()

    var name: OptionalArgument<String> = .init()

    var defaultStyle: OptionalArgument<Enums.ViewStyle> = .init()

    var componentPath: OptionalArgument<String> = .init()

    var blocks: OptionalArgument<[JSONScalar]> = .init()

    var operations: OptionalArgument<[JSONScalar]> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if dashboardId.hasValue { try container.encode(dashboardId, forKey: .dashboardId) }
      if name.hasValue { try container.encode(name, forKey: .name) }
      if defaultStyle.hasValue { try container.encode(defaultStyle, forKey: .defaultStyle) }
      if componentPath.hasValue { try container.encode(componentPath, forKey: .componentPath) }
      if blocks.hasValue { try container.encode(blocks, forKey: .blocks) }
      if operations.hasValue { try container.encode(operations, forKey: .operations) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case dashboardId = "dashboardId"
      case name = "name"
      case defaultStyle = "defaultStyle"
      case componentPath = "componentPath"
      case blocks = "blocks"
      case operations = "operations"
    }
  }
}
extension InputObjects {
  struct UpdateWorkspaceBrandingInput: Encodable, Hashable {

    var id: UUIDScalar

    var name: OptionalArgument<String> = .init()

    var logoFull: OptionalArgument<UploadScalar> = .init()

    var logoSymbol: OptionalArgument<UploadScalar> = .init()

    var wallpaper: OptionalArgument<UploadScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if name.hasValue { try container.encode(name, forKey: .name) }
      if logoFull.hasValue { try container.encode(logoFull, forKey: .logoFull) }
      if logoSymbol.hasValue { try container.encode(logoSymbol, forKey: .logoSymbol) }
      if wallpaper.hasValue { try container.encode(wallpaper, forKey: .wallpaper) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case name = "name"
      case logoFull = "logoFull"
      case logoSymbol = "logoSymbol"
      case wallpaper = "wallpaper"
    }
  }
}
extension InputObjects {
  struct UpdateWorkspaceDomainInput: Encodable, Hashable {

    var id: UUIDScalar

    var identifier: OptionalArgument<String> = .init()

    var hostname: OptionalArgument<String> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if identifier.hasValue { try container.encode(identifier, forKey: .identifier) }
      if hostname.hasValue { try container.encode(hostname, forKey: .hostname) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case identifier = "identifier"
      case hostname = "hostname"
    }
  }
}
extension InputObjects {
  struct UpdateWorkspaceThemeInput: Encodable, Hashable {

    var id: UUIDScalar

    var themeId: OptionalArgument<UUIDScalar> = .init()

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(id, forKey: .id)
      if themeId.hasValue { try container.encode(themeId, forKey: .themeId) }
    }

    enum CodingKeys: String, CodingKey {
      case id = "id"
      case themeId = "themeId"
    }
  }
}
extension InputObjects {
  struct ValidateKeyPairInput: Encodable, Hashable {

    var publicKey: String

    var privateKey: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(publicKey, forKey: .publicKey)
      try container.encode(privateKey, forKey: .privateKey)
    }

    enum CodingKeys: String, CodingKey {
      case publicKey = "publicKey"
      case privateKey = "privateKey"
    }
  }
}
extension InputObjects {
  struct VerifyEmailChangeInput: Encodable, Hashable {

    var token: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(token, forKey: .token)
    }

    enum CodingKeys: String, CodingKey {
      case token = "token"
    }
  }
}
extension InputObjects {
  struct VerifyInvitationInput: Encodable, Hashable {

    var invitationToken: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(invitationToken, forKey: .invitationToken)
    }

    enum CodingKeys: String, CodingKey {
      case invitationToken = "invitationToken"
    }
  }
}
extension InputObjects {
  struct VerifyProspectInput: Encodable, Hashable {

    var email: String

    var code: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(email, forKey: .email)
      try container.encode(code, forKey: .code)
    }

    enum CodingKeys: String, CodingKey {
      case email = "email"
      case code = "code"
    }
  }
}
extension InputObjects {
  struct VerifyResetPasswordTokenInput: Encodable, Hashable {

    var token: String

    func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)
      try container.encode(token, forKey: .token)
    }

    enum CodingKeys: String, CodingKey {
      case token = "token"
    }
  }
}